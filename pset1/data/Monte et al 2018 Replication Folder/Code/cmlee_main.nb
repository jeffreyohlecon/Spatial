(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    916979,      18025]
NotebookOptionsPosition[    886900,      17582]
NotebookOutlinePosition[    887523,      17605]
CellTagsIndexPosition[    887480,      17602]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Quit", " "}]], "Input",
 CellChangeTimes->{3.6533946744272537`*^9},
 CellLabel->
  "In[467]:=",ExpressionUUID->"b1511fcd-e472-469b-9230-c2809f28cff7"],

Cell[CellGroupData[{

Cell["Commuting, Migration, and Local Employment Elasticities", "Title",
 CellChangeTimes->{{3.6177936398614283`*^9, 3.6177936406794286`*^9}, {
  3.6177959784214287`*^9, 3.6177960001944284`*^9}, {3.619346982692162*^9, 
  3.619347029408162*^9}, {3.6403459880962105`*^9, 
  3.6403460005534563`*^9}},ExpressionUUID->"2c5f7765-f8d4-404d-89a8-\
c54f72aa0e54"],

Cell["\<\
by Ferdinando Monte, Stephen J. Redding and Esteban Rossi-Hansberg\
\>", "Subtitle",
 CellChangeTimes->{{3.7345403080987234`*^9, 3.7345403277847557`*^9}, 
   3.734540366628821*^9},ExpressionUUID->"a65c54b5-9845-43a0-b37b-\
cc1f963d65a7"],

Cell[TextData[StyleBox["American Economic Review, forthcoming 2018", \
"Subsubtitle"]], "Text",
 CellChangeTimes->{{3.734540431551918*^9, 
  3.734540442041934*^9}},ExpressionUUID->"853f611c-7efe-47d5-aa21-\
95fe5dfc58c7"],

Cell[CellGroupData[{

Cell["\<\
This Mathematica notebook generates data for all the counterfactual \
simulations in the paper, with exclusion of the Commuting Zone-level \
calibration (see cmlee_CZ.nb) and the calibration with partially locally \
owned and partially nationally owned land (see cmlee_ED.nb).\
\>", "ItemParagraph",
 CellChangeTimes->{{3.7345404900290065`*^9, 3.7345406192092066`*^9}, {
  3.734540697827325*^9, 
  3.734540697827325*^9}},ExpressionUUID->"b0348991-48f6-44e2-ac73-\
4017b4ec9647"],

Cell["\<\
The section \[OpenCurlyDoubleQuote]Setup, Import Data\[CloseCurlyDoubleQuote] \
sets up the simulation and loads external data.\
\>", "ItemParagraph",
 CellChangeTimes->{{3.7345404900290065`*^9, 3.7345406192092066`*^9}, {
   3.7345406984473257`*^9, 3.734540718123355*^9}, 
   3.7346486210496445`*^9},ExpressionUUID->"6577feb1-2ca9-4d52-a557-\
533a829370f3"],

Cell["\<\
The section \[OpenCurlyDoubleQuote]Functions\[CloseCurlyDoubleQuote] compiles \
routines to be used in the subsequent analysis.\
\>", "ItemParagraph",
 CellChangeTimes->{{3.7345404900290065`*^9, 3.7345406192092066`*^9}, {
   3.7345406984473257`*^9, 3.7345407571244164`*^9}, 
   3.7346486286622486`*^9},ExpressionUUID->"2b20b979-b63a-49b4-9e6a-\
380ecf7939d0"],

Cell["\<\
The section \[OpenCurlyDoubleQuote]Data Preparation\[CloseCurlyDoubleQuote] \
computes productivities, county-level trade deficits, and exports data for \
reduced form analysis (such as partial equilibrium elasticities and county \
productivities).\
\>", "ItemParagraph",
 CellChangeTimes->{{3.7345404900290065`*^9, 3.7345406192092066`*^9}, {
   3.7345406984473257`*^9, 3.7345408236415186`*^9}, 3.7345409270816755`*^9, 
   3.7346486358098736`*^9},ExpressionUUID->"053a42ca-dad5-4c04-b592-\
335dc3b7b283"],

Cell["\<\
The section \[OpenCurlyDoubleQuote]Counterfactual Simulations\
\[CloseCurlyDoubleQuote] performs the exercises in the paper and web appendix.\
\>", "ItemParagraph",
 CellChangeTimes->{{3.7345404900290065`*^9, 3.7345406192092066`*^9}, {
   3.7345406984473257`*^9, 3.734540860168574*^9}, 
   3.7346486422330017`*^9},ExpressionUUID->"38fbf0f0-a2fe-4a82-857c-\
6578d389fbe2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Setup, Import Data", "Chapter",
 CellChangeTimes->{{3.6403460947728767`*^9, 
  3.6403461228806877`*^9}},ExpressionUUID->"52f52cea-8225-44fa-a15f-\
bece6d1ca0d8"],

Cell[CellGroupData[{

Cell["Setup", "Subsection",
 CellChangeTimes->{{3.641041048524399*^9, 
  3.6410410546884384`*^9}},ExpressionUUID->"cf21b982-0389-4335-b2a8-\
8c52d2ac88a4"],

Cell["\<\
Setting history length to zero to avoid large memory usage during iterations\
\>", "Text",
 CellChangeTimes->{{3.6403461845928583`*^9, 3.6403461986082597`*^9}, {
  3.734531800686801*^9, 
  3.7345318012868013`*^9}},ExpressionUUID->"e997a02d-0b30-4c85-9364-\
712537b7bac3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", "\"\<E:\\\\AERaccept\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6405298131580124`*^9, 3.6405298366740127`*^9}, {
   3.640529881862013*^9, 3.6405298823650126`*^9}, {3.6527020275298114`*^9, 
   3.6527020281598125`*^9}, {3.6766421453036966`*^9, 
   3.6766421521687083`*^9}, {3.676644062306491*^9, 3.676644064396494*^9}, 
   3.7345022796464243`*^9, 3.734502362371169*^9, {3.7345027566041155`*^9, 
   3.7345027595152817`*^9}, {3.734547940072914*^9, 3.73454794235892*^9}, {
   3.7346037238812714`*^9, 3.7346037275644817`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8f23ef9c-7a3a-4c5f-a7b7-6d5dbce1cf1e"]
}, Closed]],

Cell[CellGroupData[{

Cell["Importing county data", "Subsection",
 CellChangeTimes->{{3.618238947751335*^9, 3.6182389511356735`*^9}, {
  3.6183280162670417`*^9, 3.618328020314042*^9}, {3.6403463094193397`*^9, 
  3.640346316176015*^9}},ExpressionUUID->"fe6d5f13-e0b5-4ce2-9b53-\
53066683c21b"],

Cell["\<\
This section imports data about initial equilibrium variables at county level.\
\>", "Text",
 CellChangeTimes->{{3.734531856437893*^9, 
  3.7345318611439*^9}},ExpressionUUID->"5a3e2997-2927-43fa-9c74-03a3104c991b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Workplace", " ", "data"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"workplaceEmp", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\workplaceEmp.csv\>\"", "]"}], 
      "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"number", " ", "of", " ", "jobs"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"workplaceWage", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\workplaceWage.csv\>\"", "]"}], 
      "]"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "average", " ", "yearly", " ", "wage", " ", "of", " ", "a", " ", "job", 
      " ", "by", " ", "workplace"}], ",", " ", "dollars"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"laborIncome", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"workplaceEmp", " ", "workplaceWage"}], ")"}], "/", 
      SuperscriptBox["10", "6"]}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "total", " ", "payment", " ", "to", " ", "workers", " ", "in", " ", "a", 
      " ", "workplace"}], ",", " ", 
     RowBox[{"in", " ", "millions"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Residence", " ", "data"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"resWage", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\residentialWage.csv\>\"", 
       "]"}], "]"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "average", " ", "yearly", " ", "wage", " ", "of", " ", "a", " ", "job", 
      " ", "by", " ", "residence"}], ",", " ", "dollars"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"resEmp", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\residentialEmp.csv\>\"", "]"}],
       "]"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "number", " ", "of", " ", "residents", " ", "in", " ", "a", " ", 
     "residential", " ", "location"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"resIncome", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\resIncome.csv\>\"", "]"}], 
      "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"total", " ", "residential", " ", "income"}], ",", " ", 
     "millions"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"bilateral", " ", "distances"}], "*)"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distancesOnlyTrading", "=", 
     RowBox[{
     "Import", "[", "\"\<simulation inputs\\\\distances_onlytrading.csv\>\"", 
      "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "when", " ", "two", " ", "counties", " ", "do", " ", "not", " ", 
      "trade"}], ",", " ", 
     RowBox[{
      RowBox[{"distance", " ", "is", " ", 
       SuperscriptBox["10", "9"]}], ";", " ", 
      RowBox[{
      "a", " ", "row", " ", "is", " ", "an", " ", "origin", " ", "county"}]}],
      ",", " ", 
     RowBox[{
      RowBox[{"selling", " ", "to", " ", "all", " ", "destination"}], "-", 
      RowBox[{"columns", " ", "counties", " ", 
       RowBox[{"(", 
        RowBox[{"see", " ", "below", " ", "as", " ", "well"}], ")"}]}]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distancesAllPairs", "=", 
     RowBox[{
     "Import", "[", "\"\<simulation inputs\\\\distances_allpairs.csv\>\"", 
      "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "distances", " ", "when", " ", "all", " ", "counties", " ", "are", " ", 
      "allowed", " ", "to", " ", "trade"}], " ", "-", " ", 
     RowBox[{"all", " ", "bilateral", " ", "distances"}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "commuters", " ", "residing", " ", "in", " ", "a", " ", "row", " ", 
     "location", " ", "and", " ", "working", " ", "in", " ", "a", " ", 
     "column", " ", "location"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Lambda]", "=", 
     RowBox[{
     "Import", "[", "\"\<simulation inputs\\\\commuting_flows.csv\>\"", 
      "]"}]}], ";"}], "  ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"land", " ", "area"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"landArea", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\land_area.csv\>\"", "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "other", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"countyNames", "=", 
     RowBox[{
     "Import", "[", "\"\<simulation inputs\\\\county_names.csv\>\"", "]"}]}], 
    ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ncounties", "=", 
     RowBox[{"Length", "[", "workplaceEmp", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mfgShares", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", "\"\<simulation inputs\\\\mfg_shares.csv\>\"", "]"}], 
      "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6177881719959393`*^9, 3.6177882201907587`*^9}, 
   3.617788406342372*^9, {3.6177890158853197`*^9, 3.6177890375534863`*^9}, {
   3.6177936336394286`*^9, 3.6177936349114285`*^9}, {3.6177963289794283`*^9, 
   3.6177963358044286`*^9}, {3.617796370294429*^9, 3.6177963833694286`*^9}, {
   3.6177964197014284`*^9, 3.6177964318214283`*^9}, {3.6177966706158404`*^9, 
   3.617796676045096*^9}, 3.6177970485219574`*^9, {3.617798650890148*^9, 
   3.617798668119871*^9}, {3.6178062109435244`*^9, 3.6178062233747673`*^9}, {
   3.6178062594453745`*^9, 3.617806259892419*^9}, {3.6178213930644207`*^9, 
   3.6178213997280865`*^9}, {3.617821443194433*^9, 3.617821455244638*^9}, {
   3.6178217049844637`*^9, 3.6178217196329575`*^9}, {3.6178225093845887`*^9, 
   3.617822578820634*^9}, {3.617822728378793*^9, 3.617822748736923*^9}, {
   3.617822832852662*^9, 3.617822839825907*^9}, {3.617823328452239*^9, 
   3.6178233568600216`*^9}, {3.6178234169828067`*^9, 3.617823454423047*^9}, 
   3.617825669543646*^9, {3.6181417619428263`*^9, 3.618141762445877*^9}, {
   3.6181417986865005`*^9, 3.6181418365752892`*^9}, {3.618142544895114*^9, 
   3.6181426288385077`*^9}, {3.618652986131262*^9, 3.6186529989857445`*^9}, {
   3.6212518590014205`*^9, 3.6212518740489254`*^9}, {3.621253057387247*^9, 
   3.6212530832598343`*^9}, {3.621333830792133*^9, 3.62133385556061*^9}, {
   3.62133392397145*^9, 3.6213339403310857`*^9}, {3.6213341930753574`*^9, 
   3.621334194578508*^9}, {3.6213342481168613`*^9, 3.621334274397489*^9}, {
   3.621334419057954*^9, 3.62133444002605*^9}, {3.621334664497495*^9, 
   3.6213346901610613`*^9}, 3.6213347360746517`*^9, {3.6213355408234262`*^9, 
   3.6213356032163153`*^9}, {3.6214524607687106`*^9, 
   3.6214524609597297`*^9}, {3.621685693910078*^9, 3.621685731530078*^9}, {
   3.624214380275366*^9, 3.6242143805943975`*^9}, {3.624277186068924*^9, 
   3.6242771874610634`*^9}, {3.6277617993305416`*^9, 
   3.6277618314797564`*^9}, {3.627762089783584*^9, 3.6277621162692327`*^9}, 
   3.6277627396599817`*^9, {3.627762815194067*^9, 3.6277628154592686`*^9}, {
   3.640346465612957*^9, 3.640346467420138*^9}, {3.640455538417756*^9, 
   3.6404555414420586`*^9}, {3.6404564378993964`*^9, 3.640456450947701*^9}, {
   3.64045777969711*^9, 3.6404577854956903`*^9}, {3.640457833058446*^9, 
   3.6404578351216516`*^9}, 3.6405154090130634`*^9, {3.6405204345808125`*^9, 
   3.6405204377788124`*^9}, {3.6405273102980127`*^9, 
   3.6405273329060125`*^9}, {3.6405297551010127`*^9, 
   3.6405297715300126`*^9}, {3.640529908164013*^9, 3.640529909157013*^9}, {
   3.6405299905580125`*^9, 3.640529990881013*^9}, {3.6405303004840126`*^9, 
   3.6405303433900127`*^9}, {3.6409629264903307`*^9, 3.640962986868368*^9}, {
   3.640963030277708*^9, 3.640963038423523*^9}, {3.64103378989268*^9, 
   3.641033821806689*^9}, {3.6410346077175713`*^9, 3.6410346118368006`*^9}, {
   3.641556516773964*^9, 3.6415565373269644`*^9}, {3.6528743072904377`*^9, 
   3.6528743346814766`*^9}, {3.654261918701966*^9, 3.654261955351019*^9}, 
   3.6542620190921154`*^9, {3.7344585815301743`*^9, 3.734458595417884*^9}, {
   3.734458726671452*^9, 3.734458771879547*^9}, {3.734458834992896*^9, 
   3.7344588444067373`*^9}, {3.7345023936693926`*^9, 
   3.7345023987202435`*^9}, {3.734502510928145*^9, 3.734502515277094*^9}, {
   3.734530430212669*^9, 3.7345304304626694`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"21d312f9-916d-4c2c-be3e-5fc3fc539b71"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"saiz", " ", "implied", " ", "population", " ", "elasticities"}], 
   "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Eta]zero", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"0.", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   " ", 
   RowBox[{"(*", 
    RowBox[{"baseline", " ", "model", " ", "elasticity"}], "*)"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Eta]exf", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{
      "Import", "[", 
       "\"\<simulation inputs\\\\saiz_price_elasticities.csv\>\"", "]"}], 
      "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "elasticities", " ", "for", " ", "main", " ", "exercise", " ", "with", 
     " ", "positive", " ", "land", " ", "supply"}], "*)"}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6766073861077433`*^9, 3.6766074105171185`*^9}, {
   3.6766093696132283`*^9, 3.676609398937679*^9}, {3.676642122186155*^9, 
   3.6766421316736717`*^9}, {3.6766421670337315`*^9, 
   3.6766421741087437`*^9}, {3.6767965287801247`*^9, 3.676796567855682*^9}, {
   3.6769003736865463`*^9, 3.676900389266568*^9}, {3.677264406485406*^9, 
   3.6772644163554196`*^9}, {3.6777291866042852`*^9, 
   3.6777292879944267`*^9}, {3.6805181666811323`*^9, 
   3.6805181985561886`*^9}, {3.6805184619618344`*^9, 3.680518513494928*^9}, {
   3.6805204181805043`*^9, 3.6805204406285553`*^9}, {3.680520477054632*^9, 
   3.6805204923966637`*^9}, {3.680525683461238*^9, 3.680525690536249*^9}, {
   3.7038630178676624`*^9, 3.7038630287236786`*^9}, {3.7044554331317167`*^9, 
   3.7044554393880744`*^9}, {3.708253645351043*^9, 3.7082536944663324`*^9}, {
   3.7339308082844195`*^9, 3.733930819052438*^9}, {3.7344588609198112`*^9, 
   3.7344588780281935`*^9}, {3.73446241105604*^9, 3.7344624285732594`*^9}, 
   3.734502966156869*^9, 3.7345304403576856`*^9, {3.7345318877479396`*^9, 
   3.734531935990011*^9}, {3.734603695378641*^9, 3.7346037031260843`*^9}, 
   3.734603801430707*^9, {3.7346039649820614`*^9, 
   3.734603968732276*^9}},ExpressionUUID->"76ce94c8-a7c8-4cce-892e-\
c70143c3d515"]
}, Closed]],

Cell[CellGroupData[{

Cell["Importing other data", "Subsection",
 CellChangeTimes->{{3.6409712322908278`*^9, 
  3.6409712476423626`*^9}},ExpressionUUID->"682b2737-5939-4050-8dc5-\
ae308f47378e"],

Cell["\<\
Correspondence between counties and cfs area. It is used in recovering the \
bilateral productivity estimates. 
The first column is a CFS identifier, the second is a county identifier \
(different from the fips code) from 1 to 3,111. Counties are always ordered \
by fips code, so the first row (or the first column) in the costMeasure and \
shares data is county number 1 in this data.\
\>", "Text",
 CellChangeTimes->{{3.640971251864785*^9, 3.6409713154891467`*^9}, {
  3.6409714364612427`*^9, 3.6409714659601927`*^9}, {3.7344591061603165`*^9, 
  3.7344591075578537`*^9}},ExpressionUUID->"76cc4b2f-a428-448f-8ce5-\
da3ee023af1b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"beaCfs", "=", 
   RowBox[{
   "Import", "[", "\"\<simulation inputs\\\\bea_cfs_list.csv\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "beaCfs", "]"}], "\[IndentingNewLine]", 
 RowBox[{"beaCfs", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6409713888664837`*^9, 3.640971402449842*^9}, 
   3.6415565472939644`*^9, {3.7344589315226536`*^9, 3.7344589340217075`*^9}},
 CellLabel->"",ExpressionUUID->"fa70b280-8e06-4e58-b216-52df1d53eb6e"]
}, Closed]],

Cell[CellGroupData[{

Cell["Parameters", "Subsection",
 CellChangeTimes->{{3.618239065250084*^9, 
  3.618239068690428*^9}},ExpressionUUID->"ca590e48-0a19-488c-8fa9-\
0f69ea4a2e8c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Sigma]", "=", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Psi]", "=", 
    RowBox[{
     RowBox[{"-", "1.2922"}], "/", 
     RowBox[{"(", 
      RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"this", " ", "\[Psi]", 
     RowBox[{"(", 
      RowBox[{"1", "-", "\[Sigma]"}], ")"}], " ", "comes", " ", "from", " ", 
     "the", " ", "estimated", " ", "gravity", " ", "coefficient", " ", "on", 
     " ", "CFS"}], "-", 
    RowBox[{"level", " ", "regressions"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Alpha]", "=", "0.6"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Epsilon]", "=", "3.3035"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Phi]", " ", "=", 
   RowBox[{"4.4295", "/", "\[Epsilon]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6177965042380733`*^9, 3.617796510217659*^9}, {
   3.617796567282878*^9, 3.6177965674940042`*^9}, {3.617823074779013*^9, 
   3.6178230773686295`*^9}, {3.617882128995874*^9, 3.617882137887931*^9}, {
   3.6180521242935715`*^9, 3.618052124900632*^9}, {3.618056437528852*^9, 
   3.618056445591658*^9}, 3.6186529798600216`*^9, {3.621251787759297*^9, 
   3.6212518092074413`*^9}, {3.6309303834833765`*^9, 3.630930405115595*^9}, 
   3.6318759455000553`*^9, {3.6325982003655105`*^9, 3.6325982004845223`*^9}, {
   3.6326528614973965`*^9, 3.632652863049552*^9}, {3.632655634117631*^9, 
   3.6326556346936884`*^9}, {3.632835534205928*^9, 3.6328355344549522`*^9}, 
   3.6330205458614388`*^9, 3.640971214529052*^9, {3.641032926489582*^9, 
   3.6410329295004015`*^9}, {3.641033038215126*^9, 3.6410330480419917`*^9}, {
   3.6410330800557985`*^9, 3.641033092987486*^9}, {3.641118280339758*^9, 
   3.6411182878425083`*^9}, 3.6412131182516165`*^9, {3.652692646119949*^9, 
   3.6526926888620253`*^9}, {3.6526927229250946`*^9, 3.652692727194103*^9}, {
   3.6526928214092646`*^9, 3.6526928914653797`*^9}, {3.6529659895840282`*^9, 
   3.652966018157071*^9}, {3.6532119937106876`*^9, 3.6532120180617332`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"c2ebdfc1-1415-4fcd-868d-753e6f2a8c73"]
}, Closed]],

Cell[CellGroupData[{

Cell["Fixed variable values", "Subsection",
 CellChangeTimes->{{3.641060449008478*^9, 3.64106045530832*^9}, {
  3.6410619038144484`*^9, 3.6410619040484715`*^9}, {3.6412131365384445`*^9, 
  3.6412131447792687`*^9}},ExpressionUUID->"e26f546b-d2f7-4e66-9dd0-\
be3800db9dc3"],

Cell["\<\
These variables are used in the counterfactual exercises (compiled function \
and the iteration modules), and never change across simulations.\
\>", "Text",
 CellChangeTimes->{{3.621452502457879*^9, 3.621452519735607*^9}, {
  3.621590894146161*^9, 3.621590946798161*^9}, {3.641060462638768*^9, 
  3.641060474400251*^9}, {3.6410605810613613`*^9, 3.6410605833625765`*^9}, {
  3.6410619132893953`*^9, 
  3.6410619219062567`*^9}},ExpressionUUID->"fe79731a-2287-4072-8187-\
70e5455fbf94"],

Cell["\<\
Matrix with indicators for whether a pair is a commuting possibility; the \
matrix with commuting flows (persons rather than shares) is \[Lambda]:\
\>", "Text",
 CellChangeTimes->{{3.6410605858539934`*^9, 
  3.641060591246029*^9}},ExpressionUUID->"cca4cd86-3746-4efe-aba6-\
f253f8109ab1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"isCommuting", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Lambda]", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "j"}], "]"}], "]"}], "\[Equal]", "0"}], ",", "0", 
       ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCommutingSp", "=", 
   RowBox[{"SparseArray", "[", "isCommuting", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isNoCommuting", "=", 
   RowBox[{"DiagonalMatrix", "[", 
    RowBox[{"Table", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isNoCommutingSp", "=", 
   RowBox[{"SparseArray", "[", "isNoCommuting", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6212635495163555`*^9, 3.621263582227626*^9}, {
  3.6212652257629633`*^9, 3.621265252155602*^9}, {3.6213363342877297`*^9, 
  3.6213363545377045`*^9}, {3.6213367854146957`*^9, 3.6213367956386957`*^9}, {
  3.6213483716623*^9, 3.6213484134794817`*^9}, {3.6213484472008533`*^9, 
  3.621348459777111*^9}, {3.6214483181134863`*^9, 3.621448328487524*^9}, {
  3.621452418031437*^9, 3.6214524538470182`*^9}, {3.6214526411547475`*^9, 
  3.6214526422748594`*^9}, {3.6276659859585114`*^9, 3.627666079427113*^9}, {
  3.627666219117037*^9, 3.6276662195402393`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"325eba45-50f8-4dc5-9b72-012de28d1b0c"],

Cell["Total population (number of jobs)", "Text",
 CellChangeTimes->{{3.621452673706002*^9, 3.6214527011307445`*^9}, 
   3.6215909326641607`*^9, 3.6410605957312584`*^9, {3.7345320073531218`*^9, 
   3.7345320078231225`*^9}},ExpressionUUID->"c101762b-60ec-464a-bb36-\
069ffdc189f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"population", "=", 
   RowBox[{"Total", "[", "workplaceEmp", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.641060575538524*^9, 3.6410605760397277`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"6747d05b-e0f4-4149-ad0c-925dd56c0e3a"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Functions", "Chapter",
 CellChangeTimes->{{3.6409717280634003`*^9, 3.640971740310625*^9}, 
   3.6412131541002007`*^9},ExpressionUUID->"d3d62128-4802-4906-b7da-\
839350415bfd"],

Cell[CellGroupData[{

Cell["Productivity Estimates", "Subchapter",
 CellChangeTimes->{{3.640973160356666*^9, 
  3.640973165221845*^9}},ExpressionUUID->"1d0d61fa-8346-4fb6-9d96-\
874fd1a44fd7"],

Cell["\<\
Compiled function to compute new guess of labor income on a local labor \
market (this is the RHS of the iteration below, productivities)\
\>", "Text",
 CellChangeTimes->{{3.618142258895517*^9, 3.6181422795275803`*^9}, {
  3.6410390493407545`*^9, 3.6410390641904793`*^9}, {3.6410393834702835`*^9, 
  3.641039387348895*^9}},ExpressionUUID->"95410092-ace7-4ea0-9c5a-\
d95773337cce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rhsProductivities", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"prod", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"num", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"expenditure", ",", "_Real", ",", "1"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "bilatRes", ",", "multResistance", ",", "effDemand", ",", "leh"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"bilatRes", "=", 
         RowBox[{"num", " ", "prod"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"proportional", " ", "to", " ", "bilateral", " ", "cost"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"multResistance", "=", 
         RowBox[{"Total", "[", "bilatRes", "]"}]}], ";", " ", 
        RowBox[{"(*", 
         RowBox[{"denominator", " ", "in", " ", "RHS"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"effDemand", "=", 
         RowBox[{"expenditure", "/", "multResistance"}]}], ";", " ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"income", "/", "denominator"}], " ", "in", " ", "RHS"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"leh", "=", " ", 
         RowBox[{"bilatRes", ".", "effDemand"}]}], ";", " ", 
        "\[IndentingNewLine]", "leh"}]}], "\[IndentingNewLine]", "]"}]}], 
    RowBox[{"(*", 
     RowBox[{
     "RHS", " ", "with", " ", "current", " ", "guess", " ", "of", " ", 
      "productivity"}], "*)"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.618142004332063*^9, 3.618142006277258*^9}, {
   3.618250294262586*^9, 3.6182503233884983`*^9}, {3.6410315196409187`*^9, 
   3.641031520135968*^9}, 3.6410316953664894`*^9, {3.641034468265854*^9, 
   3.6410344726586943`*^9}, {3.641034529403062*^9, 3.641034529574663*^9}, {
   3.641039019031889*^9, 3.6410390223848786`*^9}, {3.6411180171654434`*^9, 
   3.641118018324559*^9}, {3.641118186097335*^9, 3.6411181909478197`*^9}, {
   3.641118377182441*^9, 3.6411183778385067`*^9}, {3.6411184458333054`*^9, 
   3.6411184472344456`*^9}, {3.641120121127818*^9, 3.64112012144785*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"1b950291-d7c3-4e20-b4a7-ab88bd4b1434"],

Cell["\<\
Loop to compute productivities. This function receives 1) workplace \
employment (in persons), 2) workplace wage per person (in dollars), 3) total \
residential expenditure (in millions) and 4) a bilateral distance matrix (all \
pairs, or only county trading in the cfs data); residential expenditure \
allows for deficits.
It returns productivity levels that exactly rationalize the data on workplace \
income and residential expenditure. It uses the rhsProductivities function \
above to compute new rhs during the iterations.\
\>", "Text",
 CellChangeTimes->{{3.6181422854471717`*^9, 3.618142313167944*^9}, {
   3.641033853222706*^9, 3.641034030436455*^9}, {3.6410347598315625`*^9, 
   3.6410348324045706`*^9}, {3.64103932700793*^9, 3.641039373392291*^9}, 
   3.641060252495369*^9, {3.64112594862951*^9, 3.6411260990405498`*^9}, {
   3.6411261930769525`*^9, 3.64112624966261*^9}, {3.641126433202963*^9, 
   3.6411264689075327`*^9}, {3.7339307859563723`*^9, 3.733930787083375*^9}, {
   3.734532167105363*^9, 3.7345321777553787`*^9}, {3.7345322082034245`*^9, 
   3.734532208723425*^9}},ExpressionUUID->"54530509-4ad4-4e96-8af1-\
864dd4b123ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productivities", "[", 
    RowBox[{
    "workemp_", ",", "workwage_", ",", "resExp_", ",", "distmatrix_", ",", 
     "detailsYN_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "A0", ",", "\[Lambda]", ",", "tol", ",", "c", ",", "dist", ",", 
       "distmin", ",", "gap", ",", "labIncomeHat", ",", "A1", ",", "den", ",",
        "numerators", ",", "labIncome"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[Lambda]", "=", "0.7"}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"step", " ", "size"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"A0", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1.", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      " ", 
      RowBox[{"(*", 
       RowBox[{
       "initial", " ", "condition", " ", "for", " ", "productivities"}], 
       "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"tol", "=", 
       SuperscriptBox["10", 
        RowBox[{"-", "6"}]]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"tolerance", " ", "level"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"c", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dist", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"numerators", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"workemp", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["workwage", 
             SuperscriptBox["10", "4"]], ")"}], 
           RowBox[{"1", "-", "\[Sigma]"}]]}], " ", ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", "distmatrix", ")"}], 
         RowBox[{"\[Psi]", 
          RowBox[{"(", 
           RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"labIncome", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"workemp", " ", "workwage"}], ")"}], "/", 
        SuperscriptBox["10", "6"]}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "left", " ", "hand", " ", "side", " ", "of", " ", "trade", " ", 
        "flows", " ", "equation"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{
         "Note", " ", "that", " ", "the", " ", "iterations", " ", "solve", 
          " ", "for", " ", 
          SuperscriptBox["A", 
           RowBox[{"\[Sigma]", "-", "1"}]]}], ";", " ", 
         RowBox[{"before", " ", "returning", " ", "the", " ", "output"}]}], 
        ",", " ", 
        RowBox[{
        "these", " ", "guesses", " ", "are", " ", "rescaled", " ", "to", " ", 
         "the", " ", 
         RowBox[{"1", "/", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"\[Sigma]", "-", "1"}], ")"}], "."}]}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"dist", ">", "tol"}], " ", "&&", "  ", 
         RowBox[{"c", "<", "10000"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"c", "=", 
          RowBox[{"c", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"New", " ", "labor", " ", "Expenditure"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"labIncomeHat", "=", 
          RowBox[{"rhsProductivities", "[", 
           RowBox[{"A0", ",", "numerators", ",", "resExp"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         " ", 
         RowBox[{"(*", 
          RowBox[{
          "Relative", " ", "gap", " ", "in", " ", "labor", " ", 
           "expenditure"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"gap", "=", 
          RowBox[{"labIncome", " ", "/", "labIncomeHat"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dist", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{"gap", "-", "1"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"distmin", "=", 
          RowBox[{"Min", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{"gap", "-", "1"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
         RowBox[{"(*", 
          RowBox[{"new", " ", "guess", " ", "of", " ", "productivity"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"A1", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"\[Lambda]", " ", "+", " ", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "-", "\[Lambda]"}], ")"}], "gap"}]}], ")"}], 
           "A0"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"den", "=", 
          RowBox[{"Mean", "[", "A1", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"A0", "=", 
          RowBox[{"A1", "/", "den"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", "diagnostics", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"c", ",", "50"}], "]"}], "\[Equal]", "1"}], "  ", "&&", 
            " ", 
            RowBox[{"dist", ">", "0.01"}], " ", "&&", " ", 
            RowBox[{"detailsYN", "\[Equal]", "1"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Block", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<end of iteration \>\"", ",", "c", ",", " ", 
                 RowBox[{"\"\< at \>\"", " ", 
                  RowBox[{"DateString", "[", "]"}]}], ",", " ", 
                 "\"\<; min gap: \>\"", ",", " ", "distmin", ",", 
                 "\"\<; max gap: \>\"", ",", "dist", ",", " ", " ", 
                 "\"\< - \>\"", ",", 
                 RowBox[{"Min", "[", "A0", "]"}], ",", "\"\< \>\"", ",", 
                 RowBox[{"Max", "[", "A0", "]"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"detailsYN", "\[Equal]", "1"}], ",", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<end of iteration \>\"", ",", "c", ",", " ", 
             RowBox[{"\"\< at \>\"", " ", 
              RowBox[{"DateString", "[", "]"}]}], ",", " ", 
             "\"\<; max gap: \>\"", ",", "dist", ",", " ", "\"\< \>\"", ",", 
             RowBox[{"Min", "[", "A0", "]"}], ",", "\"\< \>\"", ",", 
             RowBox[{"Max", "[", "A0", "]"}]}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"A0", "=", 
       FractionBox[
        SuperscriptBox["A0", 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"\[Sigma]", "-", "1"}], ")"}]}]], 
        RowBox[{"Mean", "[", 
         SuperscriptBox["A0", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"\[Sigma]", "-", "1"}], ")"}]}]], "]"}]]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "Recovering", " ", "productivities", " ", "from", " ", "the", " ", 
        SuperscriptBox["A", 
         RowBox[{"\[Sigma]", "-", "1"}]], " ", "values", " ", "that", " ", 
        "fit", " ", "the", " ", "data"}], "*)"}], "\[IndentingNewLine]", 
      "A0"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.618142336775304*^9, 3.6181424881154366`*^9}, {
   3.6181426477794013`*^9, 3.6181426807416973`*^9}, {3.6181428462412453`*^9, 
   3.6181428563582573`*^9}, {3.618154248205328*^9, 3.618154267010208*^9}, {
   3.6182206246216536`*^9, 3.6182207209092817`*^9}, 3.6182211853317194`*^9, {
   3.618250337424902*^9, 3.618250351161276*^9}, {3.6410315230022545`*^9, 
   3.64103155255621*^9}, {3.6410316992638793`*^9, 3.641031703048258*^9}, {
   3.6410322686234736`*^9, 3.641032309691945*^9}, {3.6410324042304564`*^9, 
   3.641032488591636*^9}, {3.6410325251426926`*^9, 3.6410325303721275`*^9}, {
   3.641032587413123*^9, 3.6410326219435616`*^9}, {3.641033125720109*^9, 
   3.64103312742052*^9}, {3.6410340524449987`*^9, 3.641034070494314*^9}, {
   3.641034192502945*^9, 3.6410341938450785`*^9}, {3.641034233930087*^9, 
   3.6410342951382074`*^9}, {3.641034366843377*^9, 3.641034381187811*^9}, {
   3.6410344210461473`*^9, 3.6410344301566057`*^9}, {3.6410346367555623`*^9, 
   3.6410347113678474`*^9}, {3.6410348561529236`*^9, 
   3.6410348621347623`*^9}, {3.641037741529352*^9, 3.6410377561046486`*^9}, 
   3.6410390287165704`*^9, {3.64103939700593*^9, 3.641039424383628*^9}, {
   3.641118741733893*^9, 3.641118743076027*^9}, 3.641118865232241*^9, {
   3.641120695572257*^9, 3.641120754888188*^9}, {3.6411208074184403`*^9, 
   3.6411208083775363`*^9}, {3.6411242478624506`*^9, 3.641124330477711*^9}, {
   3.6411253316758213`*^9, 3.641125332745928*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"c306493e-c00f-4f79-b20b-0f952b3e9943"]
}, Closed]],

Cell[CellGroupData[{

Cell["Trade", "Subchapter",
 CellChangeTimes->{{3.6409732004973907`*^9, 
  3.6409732011864243`*^9}},ExpressionUUID->"a8bdf6b9-c05d-4ff5-9ef9-\
66497d24233d"],

Cell["\<\
Function to compute trade flows and trade shares given productivities, \
workplace employment and wage, residential expenditure, distance matrix.
The function returns 1) a matrix of trade shares - for each row origin, the \
shares of expenditure of each destination' s income on it, and 2) the \
corresponding trade flow values in millions of dollars.\
\>", "Text",
 CellChangeTimes->{{3.6409732104134884`*^9, 3.64097322129723*^9}, {
  3.641040608807227*^9, 3.641040634757822*^9}, {3.64104137389859*^9, 
  3.64104138161104*^9}},ExpressionUUID->"59c21e7e-6ca8-4b43-8846-\
51dea1b50891"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trade", "=", 
    RowBox[{"Compile", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"prod", ",", "_Real", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"workemp", ",", "_Real", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"workwage", ",", "_Real", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"expenditure", ",", "_Real", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"distmatrix", ",", "_Real", ",", "2"}], "}"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "num", ",", "bilatRes", ",", "multResistance", ",", "share", ",", 
          "trade"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"num", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"workemp", " ", 
             SuperscriptBox[
              RowBox[{"(", 
               FractionBox["workwage", 
                SuperscriptBox["10", "4"]], ")"}], 
              RowBox[{"1", "-", "\[Sigma]"}]]}], " ", ")"}], " ", 
           SuperscriptBox[
            RowBox[{"(", "distmatrix", ")"}], 
            RowBox[{"\[Psi]", 
             RowBox[{"(", 
              RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bilatRes", "=", 
          RowBox[{"num", " ", 
           SuperscriptBox["prod", 
            RowBox[{"\[Sigma]", "-", "1"}]]}]}], ";", 
         RowBox[{"(*", 
          RowBox[{"proportional", " ", "to", " ", "bilateral", " ", "cost"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"multResistance", "=", 
          RowBox[{"Total", "[", "bilatRes", "]"}]}], ";", " ", 
         RowBox[{"(*", 
          RowBox[{"denominator", " ", "in", " ", "RHS"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"share", "=", 
          RowBox[{"Transpose", "[", 
           FractionBox[
            RowBox[{"Transpose", "[", "bilatRes", "]"}], "multResistance"], 
           " ", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"trade", "=", 
          RowBox[{"Transpose", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", "share", "]"}], " ", "expenditure"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"share", ",", "trade"}], "}"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], 
     RowBox[{"(*", 
      RowBox[{
      "RHS", " ", "with", " ", "current", " ", "guess", " ", "of", " ", 
       "productivity"}], "*)"}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6181553097994766`*^9, 3.6181553385203485`*^9}, {
   3.6181554722897243`*^9, 3.618155487220217*^9}, {3.618155532581753*^9, 
   3.618155671880681*^9}, {3.618157001145419*^9, 3.61815702661714*^9}, {
   3.618157183395522*^9, 3.6181571890689793`*^9}, 3.618157241512991*^9, {
   3.6181572889330244`*^9, 3.6181572953338995`*^9}, {3.6181576101301303`*^9, 
   3.6181576438540244`*^9}, {3.618157697029706*^9, 3.618157716079801*^9}, {
   3.6182216321223936`*^9, 3.6182216351016912`*^9}, {3.618252070296172*^9, 
   3.6182520903991823`*^9}, {3.641039523381257*^9, 3.641039523693249*^9}, {
   3.6410396097864475`*^9, 3.641039629011155*^9}, {3.641039673229224*^9, 
   3.641039678503889*^9}, {3.6410397756961565`*^9, 3.641039909415701*^9}, 
   3.641040639999346*^9},
 CellLabel->
  "In[213]:=",ExpressionUUID->"c169e1c0-9a63-4d54-ac3f-e4930c922dd8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Counterfactual simulations", "Subchapter",
 CellChangeTimes->{{3.6214514924818916`*^9, 3.6214514946341066`*^9}, {
  3.621452590616694*^9, 3.621452594969129*^9}, {3.632855077025638*^9, 
  3.63285511874781*^9}, {3.6410601618069654`*^9, 3.64106017019322*^9}, {
  3.6412089705088835`*^9, 
  3.64120897057289*^9}},ExpressionUUID->"3b9935e7-2c6c-4e21-be71-\
15d44b0065e7"],

Cell[CellGroupData[{

Cell["Changes in any parameter", "Section",
 CellChangeTimes->{{3.6410601939463835`*^9, 3.641060196729202*^9}, 
   3.641061951546221*^9, {3.641139790902745*^9, 
   3.641139797142369*^9}},ExpressionUUID->"7640f9a3-d240-4819-92d3-\
a0c408e3482e"],

Cell[CellGroupData[{

Cell["Guess Update", "Subsubsection",
 CellChangeTimes->{{3.623577682322913*^9, 3.6235776952636943`*^9}, {
  3.633199154099571*^9, 3.6331992064278035`*^9}, {3.641060312731363*^9, 
  3.6410603148841767`*^9}, {3.64106062441985*^9, 
  3.6410606378003407`*^9}},ExpressionUUID->"3941ec9d-cce0-43b3-9501-\
77e924d3943e"],

Cell["\<\
This compiled function appears in iterations: it takes as input a current \
what and \[Lambda]hat proposals - given trade and commuting costs - and gives \
back new proposals.\
\>", "Text",
 CellChangeTimes->{{3.6214514983494787`*^9, 3.621451511561799*^9}, {
  3.621451563611004*^9, 
  3.621451629013543*^9}},ExpressionUUID->"0daaaa2f-237b-4342-9d13-\
27bbc881045f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allChangesGuess", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"inWhat", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"in\[Lambda]", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"khat", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"dhat", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"ahat", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"bhat", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Chi]", ",", "_Real", ",", "1"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"allChangesGuessMod", "=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "iterVbar", ",", "iterLM", ",", "iterLR", ",", "iterQ", ",", 
          "iter\[Pi]ni", ",", "iterP", ",", "iter\[Lambda]tilde", ",", 
          "iterWtilde", ",", "distWages", ",", "dist\[Lambda]", ",", "wout", 
          ",", "\[Lambda]out", ",", "diag", ",", "\[IndentingNewLine]", 
          "temp1", ",", "temp2", ",", "temp3", ",", "temp4", ",", "temp5", 
          ",", "temp6", ",", "denRes", ",", "numRes", ",", "den", ",", "num", 
          ",", "den2", ",", "temp7", ",", "temp8", ",", "outcome"}], "}"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"vbar", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp1", "=", "  ", 
          FractionBox[
           RowBox[{"\[Lambda]", " ", "bhat"}], 
           SuperscriptBox["khat", "\[Epsilon]"]]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"denRes", "=", 
          RowBox[{"temp1", ".", 
           SuperscriptBox["inWhat", "\[Epsilon]"]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"numRes", "=", 
          RowBox[{"temp1", ".", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["inWhat", 
              RowBox[{"\[Epsilon]", "+", "1"}]], " ", "workplaceWage"}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterVbar", "=", 
          FractionBox["numRes", 
           RowBox[{"resWage", " ", "denRes"}]]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"lm", " ", "hat", " ", "and", " ", "lr", " ", "hat"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"note", ":", " ", 
            RowBox[{"\[Lambda]", " ", "are", " ", "already", " ", "flows"}]}],
            ",", " ", 
           RowBox[{
            RowBox[{"i", ".", "e", ".", " ", "shares"}], " ", "times", " ", 
            "Lbar", " ", "in", " ", "the", " ", "equations"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"\[Lambda]", " ", "in\[Lambda]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterLM", "=", 
          FractionBox[
           RowBox[{"Total", "[", "temp1", "]"}], "workplaceEmp"]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterLR", "=", 
          FractionBox[
           RowBox[{"Total", "[", 
            RowBox[{"Transpose", "[", "temp1", "]"}], "]"}], "resEmp"]}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"q", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"iterQ", "=", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{
              RowBox[{"resIncome", " ", "iterVbar", " ", "iterLR"}], "+", 
              "deficit"}], 
             RowBox[{"resIncome", "+", "deficit"}]], " ", ")"}], 
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Chi]"}], ")"}]}]]}], ";", "  ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"\[Pi]ni", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"\[Pi]niOnlyTrading", " ", 
           SuperscriptBox["dhat", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Sigma]"}], ")"}]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp2", "=", 
          RowBox[{"iterLM", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["inWhat", "ahat"], ")"}], 
            RowBox[{"1", "-", "\[Sigma]"}]]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"den", "=", 
          RowBox[{"temp2", ".", "temp1"}]}], ";", " ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"note", " ", "that", " ", "left"}], "-", 
           RowBox[{
           "product", " ", "effectively", " ", "gives", " ", "the", " ", 
            "transpose", " ", "of", " ", "temp1", " ", "times", " ", 
            RowBox[{"temp2", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"num", "=", 
          RowBox[{
           SuperscriptBox["dhat", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Sigma]"}], ")"}]], " ", "temp2"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Pi]ni", "=", 
          RowBox[{"Transpose", "[", 
           FractionBox[
            RowBox[{"Transpose", "[", "num", "]"}], "den"], "  ", "]"}]}], 
         " ", ";", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "term", " ", "inside", " ", "divides", " ", "each", 
            " ", "column", " ", "by", " ", "the", " ", "correspondent", " ", 
            "element", " ", "of", " ", "the", " ", "denominator"}], ";", " ", 
           RowBox[{
           "it", " ", "then", " ", "brings", " ", "the", " ", "matrix", " ", 
            "in", " ", "the", " ", "original", " ", "form"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"P", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"diag", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"iter\[Pi]ni", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "i"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"iterP", "=", 
          RowBox[{
           FractionBox["inWhat", "ahat"], 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["iterLM", "diag"], ")"}], 
            RowBox[{"1", "/", 
             RowBox[{"(", 
              RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], "  ", ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"w", " ", "hat"}], ",", " ", 
           RowBox[{"next", " ", "iteration"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"\[Pi]niOnlyTrading", " ", "iter\[Pi]ni"}]}], ";", 
         "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
         RowBox[{"temp4", "=", 
          RowBox[{
           RowBox[{"iterVbar", " ", "iterLR", "  ", "resIncome"}], "+", 
           "deficit"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          FractionBox[
           RowBox[{"temp1", ".", "temp4"}], 
           RowBox[{"laborIncome", " ", "iterLM"}]]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          FractionBox["iterWtilde", 
           RowBox[{"Mean", "[", "iterWtilde", "]"}]]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"\[Lambda]", " ", "hat"}], ",", " ", 
           RowBox[{"next", " ", "iteration"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp7", "=", 
          RowBox[{
           SuperscriptBox["iterP", 
            RowBox[{"-", "\[Alpha]"}]], " ", 
           SuperscriptBox["iterQ", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "\[Alpha]"}]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp6", "=", 
          RowBox[{"bhat", " ", 
           FractionBox[
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"Outer", "[", 
               RowBox[{"Times", ",", "temp7", ",", "inWhat"}], "]"}], ")"}], 
             "\[Epsilon]"], 
            SuperscriptBox["khat", "\[Epsilon]"]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"den2", "=", 
          RowBox[{"Total", "[", 
           RowBox[{"Total", "[", 
            RowBox[{"\[Lambda]", " ", "temp6"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Lambda]tilde", "=", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{"temp6", " ", "population"}], ")"}], "den2"]}], " ", ";", 
         " ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "to", " ", "limit", " ", "accumulation", " ", "of", " ", 
              "numerical", " ", "errors"}], " ", "-", " ", 
             RowBox[{
             "unconditional", " ", "shares", " ", "of", " ", "commuting", " ",
               "\[IndentingNewLine]", "have", " ", "a", " ", "very", " ", 
              "small", " ", "order", " ", "of", " ", "magnitude"}], " ", "-", 
             " ", 
             RowBox[{
             "we", " ", "predict", " ", "new", " ", "commuting", " ", "flows",
               " ", "in", " ", "#", " ", "of", " ", "jobs"}]}], ";", " ", 
            "hence"}], ",", " ", 
           RowBox[{
            RowBox[{
            "the", " ", "numerator", " ", "is", " ", "multiplied", " ", "by", 
             " ", "the", " ", "population", " ", "level", " ", "before", " ", 
             "dividing", " ", "it", " ", "for", " ", "the", " ", "sum", 
             "\[IndentingNewLine]", "of", " ", "all", " ", "terms", " ", "at",
              " ", "the", " ", "denominator"}], ";", " ", 
            RowBox[{
            "note", " ", "that", " ", "the", " ", "denominator", " ", 
             "contains", " ", "\[Lambda]"}]}], ",", " ", 
           RowBox[{
           "which", " ", "is", " ", "in", " ", "fact", " ", "flows", " ", 
            "of", " ", "jobs"}], ",", " ", 
           RowBox[{"rather", " ", "than", " ", "shares"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"output", ":", " ", 
            RowBox[{
             RowBox[{"matrix", " ", "with", " ", "ncounties"}], "+", 
             RowBox[{"1", " ", "rows"}]}]}], ",", " ", 
           RowBox[{"and", " ", "ncounties", " ", "columns", " ", 
            RowBox[{"(", 
             RowBox[{
             "iterWtilde", " ", "is", " ", "added", " ", "as", " ", "a", " ", 
              "last", " ", "row"}], ")"}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"outcome", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"iter\[Lambda]tilde", ",", 
            RowBox[{"{", "iterWtilde", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "outcome"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.621363735204501*^9, 3.6213637956615458`*^9, {3.62136465358733*^9, 
   3.621364677140685*^9}, {3.6213648877907476`*^9, 3.6213648889178605`*^9}, {
   3.6213649257325416`*^9, 3.6213649969856663`*^9}, {3.621365030617029*^9, 
   3.621365124007367*^9}, {3.62136515443841*^9, 3.6213651622951956`*^9}, {
   3.621365291633128*^9, 3.62136535396036*^9}, {3.6213653883317966`*^9, 
   3.6213654131002736`*^9}, {3.6213654894549084`*^9, 3.621365491215084*^9}, {
   3.621365522487211*^9, 3.621365545507513*^9}, {3.6213655770576677`*^9, 
   3.621365618530814*^9}, {3.621365672656226*^9, 3.6213657217081313`*^9}, {
   3.621365753863346*^9, 3.6213657837363334`*^9}, {3.621365815878547*^9, 
   3.621365831634123*^9}, {3.6213658709220514`*^9, 3.6213659274987082`*^9}, {
   3.6213659704069986`*^9, 3.621365974532411*^9}, {3.6213660132342806`*^9, 
   3.6213660445734143`*^9}, {3.621366123584315*^9, 3.6213661335143075`*^9}, {
   3.6213661712700825`*^9, 3.621366180854041*^9}, {3.621366226499605*^9, 
   3.621366272786234*^9}, {3.6213663422221766`*^9, 3.621366368950849*^9}, {
   3.6213664014460983`*^9, 3.6213665300739594`*^9}, {3.6213665626982217`*^9, 
   3.621366624515403*^9}, {3.6213669422431726`*^9, 3.6213669760725555`*^9}, {
   3.621367178654811*^9, 3.621367209990945*^9}, 3.6213673026332083`*^9, 
   3.621367365699514*^9, 3.6214287562542753`*^9, {3.6214288819378424`*^9, 
   3.6214289442840767`*^9}, {3.6214435660483274`*^9, 
   3.6214436214418664`*^9}, {3.621443708700591*^9, 3.6214438692676463`*^9}, {
   3.6214444971024237`*^9, 3.621444524900203*^9}, {3.6214446259023027`*^9, 
   3.6214446262853403`*^9}, {3.621444777583469*^9, 3.62144477779749*^9}, 
   3.6214448243081408`*^9, {3.621444864740184*^9, 3.621444876875397*^9}, {
   3.6214449190076103`*^9, 3.621445116036311*^9}, {3.6214452817868843`*^9, 
   3.621445409476652*^9}, {3.621445498407544*^9, 3.621445505160219*^9}, {
   3.621445568643567*^9, 3.6214456089455967`*^9}, {3.6214456407947817`*^9, 
   3.621445646099312*^9}, {3.6214456802617273`*^9, 3.621445683117013*^9}, {
   3.621445721229824*^9, 3.621445757037404*^9}, {3.621445797064407*^9, 
   3.6214458451842184`*^9}, {3.621446049294627*^9, 3.62144609462516*^9}, {
   3.6214467756582565`*^9, 3.621446782456936*^9}, {3.6214472603917246`*^9, 
   3.62144727654134*^9}, {3.62144739825751*^9, 3.6214474274644303`*^9}, {
   3.621447458153499*^9, 3.6214474631770015`*^9}, {3.621447500113695*^9, 
   3.6214475723799205`*^9}, {3.6214479360672855`*^9, 
   3.6214479433380127`*^9}, {3.6214480116928473`*^9, 3.621448027810459*^9}, {
   3.6214488163043003`*^9, 3.6214488507237425`*^9}, {3.621449714950156*^9, 
   3.621449719141575*^9}, {3.6214502373893948`*^9, 3.6214502414377995`*^9}, {
   3.621450310677723*^9, 3.621450310940749*^9}, {3.6214504197126255`*^9, 
   3.621450520460699*^9}, {3.621450607407393*^9, 3.621450620230675*^9}, {
   3.621592199575161*^9, 3.621592210654161*^9}, {3.621594472396161*^9, 
   3.621594596618161*^9}, {3.6217962010304136`*^9, 3.6217963004704137`*^9}, {
   3.621797472014414*^9, 3.6217975053414135`*^9}, {3.621806833896414*^9, 
   3.6218068508194137`*^9}, {3.621849216215517*^9, 3.621849220915517*^9}, {
   3.6218522146745167`*^9, 3.6218522250515165`*^9}, {3.6235080404702044`*^9, 
   3.6235080785455885`*^9}, {3.6235084401442575`*^9, 3.623508456475421*^9}, {
   3.6235085214098496`*^9, 3.623508531672876*^9}, {3.6235089426469693`*^9, 
   3.6235089433810425`*^9}, {3.623578173278491*^9, 3.6235781759737606`*^9}, {
   3.6309312673362703`*^9, 3.630931274473984*^9}, {3.6322473232597647`*^9, 
   3.6322473234666405`*^9}, {3.632943639457246*^9, 3.6329436459608955`*^9}, {
   3.6329437211404133`*^9, 3.6329437271670156`*^9}, {3.641060657185272*^9, 
   3.6410606575752745`*^9}, {3.6410607187312727`*^9, 3.641060726424122*^9}, {
   3.641060788082331*^9, 3.6410607929219685`*^9}, {3.6410609777517776`*^9, 
   3.6410609887830486`*^9}, {3.6411267764682856`*^9, 
   3.6411267797066097`*^9}, {3.6411268800946474`*^9, 3.641126907111349*^9}, {
   3.6411275406186934`*^9, 3.641127556339265*^9}, {3.6411387759882636`*^9, 
   3.641138788987563*^9}, {3.641251844316097*^9, 3.641251867254097*^9}, {
   3.6418385500762243`*^9, 3.641838556527869*^9}, {3.641840036375839*^9, 
   3.641840097520953*^9}, {3.6526925277617526`*^9, 3.6526925322457595`*^9}, {
   3.652693964254572*^9, 3.652693967468577*^9}, {3.654247479432622*^9, 
   3.6542475415897207`*^9}, {3.6766071672268796`*^9, 3.67660716984442*^9}, {
   3.6767965985003986`*^9, 3.6767966121409183`*^9}, {3.676890775866412*^9, 
   3.676890820673975*^9}, 3.6768908746190605`*^9, {3.676896840812039*^9, 
   3.676896902235552*^9}, 3.7345324197077417`*^9, 
   3.7345400096982794`*^9},ExpressionUUID->"6951456b-2803-4520-a896-\
6d563976c135"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Iterations ( hatChanges[khat, dhat, ahat, bhat, landel,outputEvery] )\
\>", "Subsubsection",
 CellChangeTimes->{{3.6235785242302065`*^9, 3.6235785266902313`*^9}, {
   3.641060739169404*^9, 3.641060740559813*^9}, {3.64113969884454*^9, 
   3.64113971825148*^9}, 3.6526381560792203`*^9, {3.734459364549942*^9, 
   3.7344593660807962`*^9}},ExpressionUUID->"c0f3778c-77b0-4012-98ae-\
9ca1f1e4b518"],

Cell["\<\
This function iterates over what and \[Lambda]hat until convergence, and \
gives the equilibrium counterfactual changes. It takes in exogenous changes \
in commuting and trade costs. The last argument indicates every how many \
iterations we want output on the iteration progress (set 0 for no output at \
all during iterations; set -1 for no output at all).\
\>", "Text",
 CellChangeTimes->{{3.621451690845726*^9, 3.621451712725914*^9}, {
   3.6214517517668176`*^9, 3.6214517717908196`*^9}, {3.6214522762902646`*^9, 
   3.6214523426829033`*^9}, {3.6411266561462545`*^9, 3.641126656457286*^9}, {
   3.641127157657401*^9, 3.641127167999435*^9}, 
   3.7339312546542535`*^9},ExpressionUUID->"4ea9ca5b-ae1f-4aa2-9586-\
a1ca8a156d8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat_", ",", "dhat_", ",", "ahat_", ",", "bhat_", ",", "landel_", ",", 
     "outputEvery_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dist", ",", "c", ",", "what", ",", "\[Lambda]hat", ",", "inWhat", ",", 
       "in\[Lambda]", ",", "out", ",", "iter\[Lambda]tilde", ",", 
       "iterWtilde", ",", "distWages", ",", "dist\[Lambda]", ",", 
       "\[IndentingNewLine]", "temp1", ",", "denRes", ",", "numRes", ",", 
       "Vbarhat", ",", "LMhat", ",", "LRhat", ",", "Qhat", ",", "temp2", ",", 
       "den", ",", "num", ",", "\[Pi]nihat", ",", "diag", ",", "Phat", ",", 
       "pricehat", ",", "realinchat"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dist", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"what", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Lambda]hat", "=", "isCommuting"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"c", "<", "maxiter"}], " ", "&&", " ", 
         RowBox[{"dist", ">", "tol"}]}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"c", "=", 
          RowBox[{"c", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"inWhat", "=", "what"}], ";", "\[IndentingNewLine]", 
         RowBox[{"in\[Lambda]", "=", "\[Lambda]hat"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"out", "=", 
          RowBox[{"allChangesGuess", "[", 
           RowBox[{
           "inWhat", ",", "in\[Lambda]", ",", "khat", ",", "dhat", ",", 
            "ahat", ",", "bhat", ",", "landel"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"iter\[Lambda]tilde", "=", 
          RowBox[{
           RowBox[{"out", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"1", ";;", "ncounties"}], ",", "All"}], "]"}], "]"}], 
           " ", "isCommutingSp"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          RowBox[{"out", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"ncounties", "+", "1"}], ",", "All"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"distWages", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{
             FractionBox["iterWtilde", "inWhat"], "-", "1"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"using", " ", "the", " ", "sparse"}], "-", 
           RowBox[{
           "array", " ", "version", " ", "of", " ", "commuting", " ", 
            "allows", " ", "saving", " ", "time"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"dist\[Lambda]", "=", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{
              FractionBox["iter\[Lambda]tilde", 
               RowBox[{"in\[Lambda]", "+", "isCommutingSp", "-", "1"}]], " ", 
              "-", "1"}], "]"}], " ", "isCommutingSp"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "denominator", " ", "makes", " ", "sure", " ", "that", 
            " ", "the", " ", "division", " ", "by", " ", "zero", " ", "never",
             " ", "occurs"}], ",", " ", 
           RowBox[{
            RowBox[{
            "while", " ", "preserving", " ", "the", " ", "deviations", " ", 
             "for", " ", "observed", " ", "commuting", " ", "pairs"}], ";", 
            " ", "then"}], ",", " ", 
           RowBox[{
           "the", " ", "matrix", " ", "is", " ", "multiplied", " ", "by", " ",
             "commuting", " ", "indicators", " ", "to", " ", "restore", " ", 
            "zero", " ", "change", " ", "where", " ", "there", " ", "are", 
            " ", "no", " ", "commuting", " ", "flows"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"what", "=", 
          RowBox[{
           RowBox[{"inWhat", " ", "\[Zeta]"}], " ", "+", " ", 
           RowBox[{"iterWtilde", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Zeta]"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"\[Lambda]hat", "=", 
          RowBox[{
           RowBox[{"in\[Lambda]", "  ", "\[Zeta]"}], " ", "+", " ", 
           RowBox[{"iter\[Lambda]tilde", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Zeta]"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"dist", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"{", 
            RowBox[{"distWages", ",", "dist\[Lambda]"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"outputEvery", ">", "0"}], " ", "&&", 
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"c", ",", "outputEvery"}], "]"}], "\[Equal]", "1"}]}], 
           ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<Iteration \>\"", ",", "c", ",", "\"\<  concluded on \>\"", 
             ",", 
             RowBox[{"DateString", "[", "]"}], ",", " ", 
             "\"\<; distWages is \>\"", ",", "distWages", ",", 
             "\"\<; dist\[Lambda] is \>\"", ",", "dist\[Lambda]", ",", 
             "\"\<.\>\""}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dist", ">", "tol"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<WARNING: Max iterations reached witout satisfying the required \
tolerance. Current sup-norm distances: distWages: \>\"", ",", "distWages", 
          ",", "\"\<; dist\[Lambda]: \>\"", ",", "dist\[Lambda]", ",", 
          "\"\< ...\>\""}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"outputEvery", ">", 
           RowBox[{"-", "1"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<Convergence achieved in \>\"", ",", "c", ",", 
            "\"\< iterations on \>\"", ",", 
            RowBox[{"DateString", "[", "]"}], ",", "\"\<; distWages is \>\"", 
            ",", "distWages", ",", "\"\<; dist\[Lambda] is \>\"", ",", 
            "dist\[Lambda]", ",", "\"\< ...\>\""}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Computing", " ", "equilibrium", " ", "changes"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"vbar", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", " ", 
       FractionBox[
        RowBox[{"bhat", " ", "\[Lambda]"}], 
        SuperscriptBox["khat", "\[Epsilon]"]]}], " ", ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"denRes", "=", 
       RowBox[{"temp1", ".", 
        SuperscriptBox["what", "\[Epsilon]"]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"numRes", "=", 
       RowBox[{"temp1", ".", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["what", 
           RowBox[{"\[Epsilon]", "+", "1"}]], " ", "workplaceWage"}], 
         ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vbarhat", "=", 
       FractionBox["numRes", 
        RowBox[{"resWage", " ", "denRes"}]]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"lm", " ", "hat", " ", "and", " ", "lr", " ", "hat"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"note", ":", " ", 
         RowBox[{"\[Lambda]", " ", "are", " ", "already", " ", "flows"}]}], 
        ",", " ", 
        RowBox[{
         RowBox[{"i", ".", "e", ".", " ", "shares"}], " ", "times", " ", 
         "Lbar", " ", "in", " ", "the", " ", "equations"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", 
       RowBox[{"\[Lambda]", " ", "\[Lambda]hat"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"LMhat", "=", 
       FractionBox[
        RowBox[{"Total", "[", "temp1", "]"}], "workplaceEmp"]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"LRhat", "=", 
       FractionBox[
        RowBox[{"Total", "[", 
         RowBox[{"Transpose", "[", "temp1", "]"}], "]"}], "resEmp"]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"q", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Qhat", "=", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{
           RowBox[{"resIncome", " ", "Vbarhat", " ", "LRhat"}], "+", 
           "deficit"}], 
          RowBox[{"resIncome", "+", "deficit"}]], ")"}], 
        RowBox[{"1", "/", 
         RowBox[{"(", 
          RowBox[{"1", "+", "landel"}], ")"}]}]]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"\[Pi]ni", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", 
       RowBox[{"\[Pi]niOnlyTrading", " ", 
        SuperscriptBox["dhat", 
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Sigma]"}], ")"}]]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"temp2", "=", 
       RowBox[{"LMhat", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["what", "ahat"], ")"}], 
         RowBox[{"1", "-", "\[Sigma]"}]]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"den", "=", 
       RowBox[{"temp2", ".", "temp1"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"note", " ", "that", " ", "left"}], "-", 
        RowBox[{
        "product", " ", "effectively", " ", "gives", " ", "the", " ", 
         "transpose", " ", "of", " ", "temp1", " ", "times", " ", 
         RowBox[{"temp2", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"num", "=", 
       RowBox[{
        SuperscriptBox["dhat", 
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Sigma]"}], ")"}]], " ", "temp2"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Pi]nihat", "=", 
       RowBox[{"Transpose", "[", 
        FractionBox[
         RowBox[{"Transpose", "[", "num", "]"}], "den"], "  ", "]"}]}], " ", 
      ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "the", " ", "term", " ", "inside", " ", "divides", " ", "each", " ", 
         "column", " ", "by", " ", "the", " ", "correspondent", " ", 
         "element", " ", "of", " ", "the", " ", "denominator"}], ";", " ", 
        RowBox[{
        "it", " ", "then", " ", "brings", " ", "the", " ", "matrix", " ", 
         "in", " ", "the", " ", "original", " ", "form"}]}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"P", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"diag", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\[Pi]nihat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Phat", "=", 
       RowBox[{
        FractionBox["what", "ahat"], 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["LMhat", "diag"], ")"}], 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], "  ", ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"price", " ", "index", " ", "hat"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"pricehat", "=", 
       RowBox[{
        SuperscriptBox["Phat", "\[Alpha]"], 
        SuperscriptBox["Qhat", 
         RowBox[{"1", "-", "\[Alpha]"}]]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"real", " ", "income", " ", "of", " ", "residents"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"realinchat", "=", 
       FractionBox["Vbarhat", "pricehat"]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"outputEvery", ">", 
         RowBox[{"-", "1"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Counterfactuals completed on \>\"", ",", 
          RowBox[{"DateString", "[", "]"}], ",", "\"\<.\>\""}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "what", ",", "Vbarhat", ",", "realinchat", ",", "LMhat", ",", "LRhat", 
        ",", "Qhat", ",", "Phat", ",", "pricehat", ",", "\[Lambda]hat", ",", 
        "\[Pi]nihat", ",", "c", ",", "distWages", ",", "dist\[Lambda]"}], 
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6214517760782485`*^9, 3.621452092164854*^9}, 
   3.6214521577034073`*^9, {3.621452347571392*^9, 3.621452348404475*^9}, {
   3.621453679225544*^9, 3.621453706868308*^9}, {3.621595174018161*^9, 
   3.621595378443161*^9}, {3.6215954172481613`*^9, 3.621595418776161*^9}, {
   3.6215967798071613`*^9, 3.621597052551161*^9}, {3.621597169773161*^9, 
   3.621597203427161*^9}, {3.6215974704348173`*^9, 3.6215976135569816`*^9}, {
   3.621597663537888*^9, 3.6215976640531964`*^9}, {3.621597783993651*^9, 
   3.621597792486063*^9}, {3.6215978380934644`*^9, 3.621598026625425*^9}, 
   3.6215982836831484`*^9, {3.6215983718250275`*^9, 3.621598389847432*^9}, {
   3.6215987984846926`*^9, 3.6215988978756304`*^9}, {3.6217979006564136`*^9, 
   3.6217979144264135`*^9}, {3.6217979845894136`*^9, 
   3.6217979864754133`*^9}, {3.6218069545304136`*^9, 
   3.6218070047724133`*^9}, {3.6218491859375167`*^9, 
   3.6218491905625167`*^9}, {3.621852318370517*^9, 3.621852329229517*^9}, {
   3.623507226819772*^9, 3.6235072612642164`*^9}, {3.6235098170903783`*^9, 
   3.6235098286954985`*^9}, {3.62350986951591*^9, 3.6235098851195354`*^9}, {
   3.6235099302880516`*^9, 3.6235099352955523`*^9}, {3.623537696198702*^9, 
   3.6235377077708592`*^9}, {3.6235377459866805`*^9, 
   3.6235378213679943`*^9}, {3.630931379430478*^9, 3.6309313802615614`*^9}, {
   3.6322473639193544`*^9, 3.6322473641262302`*^9}, {3.632943778133112*^9, 
   3.632943797191017*^9}, {3.641060800378816*^9, 3.641060816009919*^9}, {
   3.641138832067871*^9, 3.6411388523639*^9}, 3.641251893875097*^9, {
   3.6418403598931875`*^9, 3.641840430600258*^9}, {3.652694165168885*^9, 
   3.652694165698886*^9}, {3.65424756869676*^9, 3.654247586026786*^9}, {
   3.6766072063389807`*^9, 3.6766072144651055`*^9}, {3.6767966913950343`*^9, 
   3.676796706058555*^9}, {3.6767967545553184`*^9, 3.676796758922826*^9}, {
   3.6767971862237806`*^9, 3.67679719301729*^9}, {3.676891243751071*^9, 
   3.6768912567728157`*^9}, {3.6768969328073006`*^9, 
   3.6768969544165363`*^9}, {3.7345154787522535`*^9, 3.734515479032254*^9}, 
   3.7345376529497175`*^9},ExpressionUUID->"3637dcf1-c1e6-4165-be23-\
97145fe12976"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Changes in any parameter, arbitrary initial conditions", "Section",
 CellChangeTimes->{{3.641060200344228*^9, 3.6410602116359043`*^9}, {
  3.641061952689335*^9, 3.6410619542024865`*^9}, {3.641139801078762*^9, 
  3.641139806646319*^9}},ExpressionUUID->"7ee6c1ee-6a43-4df4-b9b8-\
dfa4afb3cd78"],

Cell[CellGroupData[{

Cell["Guess update", "Subsubsection",
 CellChangeTimes->{{3.623577682322913*^9, 3.6235776952636943`*^9}, {
   3.632839206219261*^9, 3.632839217339373*^9}, {3.6410603379509287`*^9, 
   3.6410603399799414`*^9}, 
   3.6410613498376474`*^9},ExpressionUUID->"5215d1c1-44eb-4089-9b64-\
e424a2f049cf"],

Cell["\<\
This compiled function appears in iterations: it takes as input a current \
what and \[Lambda]hat proposals - given trade and commuting costs - and gives \
back new proposals.\
\>", "Text",
 CellChangeTimes->{{3.6214514983494787`*^9, 3.621451511561799*^9}, {
  3.621451563611004*^9, 
  3.621451629013543*^9}},ExpressionUUID->"6ac58665-987d-4659-a157-\
4d8c286adfd7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allChangesArbGuess", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"inWhat", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"in\[Lambda]", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"khat", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"dhat", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"ahat", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"bhat", ",", "_Real", ",", "2"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\[Lambda]Arb", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"workplaceWageArb", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"resWageArb", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"workplaceEmpArb", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"resEmpArb", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"tradeSharesArb", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"resIncomeArb", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"workIncomeArb", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Chi]", ",", "_Real", ",", "1"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"allChangesArbGuessMod", "=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "iterVbar", ",", "iterLM", ",", "iterLR", ",", "iterQ", ",", 
          "iter\[Pi]ni", ",", "iterP", ",", "iter\[Lambda]tilde", ",", 
          "iterWtilde", ",", "distWages", ",", "dist\[Lambda]", ",", "wout", 
          ",", "\[Lambda]out", ",", "diag", ",", "\[IndentingNewLine]", 
          "temp1", ",", "temp2", ",", "temp3", ",", "temp4", ",", "temp5", 
          ",", "temp6", ",", "denRes", ",", "numRes", ",", "den", ",", "num", 
          ",", "den2", ",", "temp7", ",", "temp8", ",", "outcome"}], "}"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"vbar", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp1", "=", "  ", 
          FractionBox[
           RowBox[{"\[Lambda]Arb", " ", "bhat"}], 
           SuperscriptBox["khat", "\[Epsilon]"]]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"denRes", "=", 
          RowBox[{"temp1", ".", 
           SuperscriptBox["inWhat", "\[Epsilon]"]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"numRes", "=", 
          RowBox[{"temp1", ".", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["inWhat", 
              RowBox[{"\[Epsilon]", "+", "1"}]], " ", "workplaceWageArb"}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterVbar", "=", 
          FractionBox["numRes", 
           RowBox[{"resWageArb", "  ", "denRes"}]]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"lm", " ", "hat", " ", "and", " ", "lr", " ", "hat"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"note", ":", " ", 
            RowBox[{"\[Lambda]", " ", "are", " ", "already", " ", "flows"}]}],
            ",", " ", 
           RowBox[{
            RowBox[{"i", ".", "e", ".", " ", "shares"}], " ", "times", " ", 
            "Lbar", " ", "in", " ", "the", " ", "equations"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"\[Lambda]Arb", " ", "in\[Lambda]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterLM", "=", 
          FractionBox[
           RowBox[{"Total", "[", "temp1", "]"}], "workplaceEmpArb"]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterLR", "=", 
          FractionBox[
           RowBox[{"Total", "[", 
            RowBox[{"Transpose", "[", "temp1", "]"}], "]"}], "resEmpArb"]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"q", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"iterQ", "=", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{
              RowBox[{"resIncomeArb", " ", "iterVbar", " ", "iterLR"}], "+", 
              "deficit"}], 
             RowBox[{"resIncomeArb", "+", "deficit"}]], ")"}], 
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Chi]"}], ")"}]}]]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"\[Pi]ni", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"tradeSharesArb", " ", 
           SuperscriptBox["dhat", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Sigma]"}], ")"}]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp2", "=", 
          RowBox[{"iterLM", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["inWhat", "ahat"], ")"}], 
            RowBox[{"1", "-", "\[Sigma]"}]]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"den", "=", 
          RowBox[{"temp2", ".", "temp1"}]}], ";", " ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"note", " ", "that", " ", "left"}], "-", 
           RowBox[{
           "product", " ", "effectively", " ", "gives", " ", "the", " ", 
            "transpose", " ", "of", " ", "temp1", " ", "times", " ", 
            RowBox[{"temp2", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"num", "=", 
          RowBox[{
           SuperscriptBox["dhat", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Sigma]"}], ")"}]], " ", "temp2"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Pi]ni", "=", 
          RowBox[{"Transpose", "[", 
           FractionBox[
            RowBox[{"Transpose", "[", "num", "]"}], "den"], "  ", "]"}]}], 
         " ", ";", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "term", " ", "inside", " ", "divides", " ", "each", 
            " ", "column", " ", "by", " ", "the", " ", "correspondent", " ", 
            "element", " ", "of", " ", "the", " ", "denominator"}], ";", " ", 
           RowBox[{
           "it", " ", "then", " ", "brings", " ", "the", " ", "matrix", " ", 
            "in", " ", "the", " ", "original", " ", "form"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"P", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"diag", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"iter\[Pi]ni", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "i"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"iterP", "=", 
          RowBox[{
           FractionBox["inWhat", "ahat"], 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["iterLM", "diag"], ")"}], 
            RowBox[{"1", "/", 
             RowBox[{"(", 
              RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], "  ", ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"w", " ", "hat"}], ",", " ", 
           RowBox[{"next", " ", "iteration"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"tradeSharesArb", " ", "iter\[Pi]ni"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"temp4", "=", 
          RowBox[{
           RowBox[{"resIncomeArb", " ", "iterVbar", " ", "iterLR"}], "+", 
           "deficit"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          FractionBox[
           RowBox[{"temp1", ".", "temp4"}], 
           RowBox[{"workIncomeArb", "  ", "iterLM"}]]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          FractionBox["iterWtilde", 
           RowBox[{"Mean", "[", "iterWtilde", "]"}]]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"\[Lambda]", " ", "hat"}], ",", " ", 
           RowBox[{"next", " ", "iteration"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp7", "=", 
          RowBox[{
           SuperscriptBox["iterP", 
            RowBox[{"-", "\[Alpha]"}]], " ", 
           SuperscriptBox["iterQ", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "\[Alpha]"}]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp6", "=", 
          RowBox[{"bhat", " ", 
           FractionBox[
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"Outer", "[", 
               RowBox[{"Times", ",", "temp7", ",", "inWhat"}], "]"}], ")"}], 
             "\[Epsilon]"], 
            SuperscriptBox["khat", "\[Epsilon]"]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"den2", "=", 
          RowBox[{"Total", "[", 
           RowBox[{"Total", "[", 
            RowBox[{"\[Lambda]Arb", " ", "temp6"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Lambda]tilde", "=", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{"temp6", " ", "population"}], ")"}], "den2"]}], " ", ";", 
         "  ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "to", " ", "limit", " ", "accumulation", " ", "of", " ", 
              "numerical", " ", "errors"}], " ", "-", " ", 
             RowBox[{
             "unconditional", " ", "shares", " ", "of", " ", "commuting", " ",
               "\[IndentingNewLine]", "have", " ", "a", " ", "very", " ", 
              "small", " ", "order", " ", "of", " ", "magnitude"}], " ", "-", 
             " ", 
             RowBox[{
             "we", " ", "predict", " ", "new", " ", "commuting", " ", "flows",
               " ", "in", " ", "#", " ", "of", " ", "jobs"}]}], ";", " ", 
            "hence"}], ",", " ", 
           RowBox[{
            RowBox[{
            "the", " ", "numerator", " ", "is", " ", "multiplied", " ", "by", 
             " ", "the", " ", "population", " ", "level", " ", "before", " ", 
             "dividing", " ", "it", " ", "for", " ", "the", " ", "sum", 
             "\[IndentingNewLine]", "of", " ", "all", " ", "terms", " ", "at",
              " ", "the", " ", "denominator"}], ";", " ", 
            RowBox[{
            "note", " ", "that", " ", "the", " ", "denominator", " ", 
             "contains", " ", "\[Lambda]"}]}], ",", " ", 
           RowBox[{
           "which", " ", "is", " ", "in", " ", "fact", " ", "flows", " ", 
            "of", " ", "jobs"}], ",", " ", 
           RowBox[{"rather", " ", "than", " ", "shares"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", "output", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"outcome", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"iter\[Lambda]tilde", ",", 
            RowBox[{"{", "iterWtilde", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "outcome"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.621363735204501*^9, 3.6213637956615458`*^9, {3.62136465358733*^9, 
   3.621364677140685*^9}, {3.6213648877907476`*^9, 3.6213648889178605`*^9}, {
   3.6213649257325416`*^9, 3.6213649969856663`*^9}, {3.621365030617029*^9, 
   3.621365124007367*^9}, {3.62136515443841*^9, 3.6213651622951956`*^9}, {
   3.621365291633128*^9, 3.62136535396036*^9}, {3.6213653883317966`*^9, 
   3.6213654131002736`*^9}, {3.6213654894549084`*^9, 3.621365491215084*^9}, {
   3.621365522487211*^9, 3.621365545507513*^9}, {3.6213655770576677`*^9, 
   3.621365618530814*^9}, {3.621365672656226*^9, 3.6213657217081313`*^9}, {
   3.621365753863346*^9, 3.6213657837363334`*^9}, {3.621365815878547*^9, 
   3.621365831634123*^9}, {3.6213658709220514`*^9, 3.6213659274987082`*^9}, {
   3.6213659704069986`*^9, 3.621365974532411*^9}, {3.6213660132342806`*^9, 
   3.6213660445734143`*^9}, {3.621366123584315*^9, 3.6213661335143075`*^9}, {
   3.6213661712700825`*^9, 3.621366180854041*^9}, {3.621366226499605*^9, 
   3.621366272786234*^9}, {3.6213663422221766`*^9, 3.621366368950849*^9}, {
   3.6213664014460983`*^9, 3.6213665300739594`*^9}, {3.6213665626982217`*^9, 
   3.621366624515403*^9}, {3.6213669422431726`*^9, 3.6213669760725555`*^9}, {
   3.621367178654811*^9, 3.621367209990945*^9}, 3.6213673026332083`*^9, 
   3.621367365699514*^9, 3.6214287562542753`*^9, {3.6214288819378424`*^9, 
   3.6214289442840767`*^9}, {3.6214435660483274`*^9, 
   3.6214436214418664`*^9}, {3.621443708700591*^9, 3.6214438692676463`*^9}, {
   3.6214444971024237`*^9, 3.621444524900203*^9}, {3.6214446259023027`*^9, 
   3.6214446262853403`*^9}, {3.621444777583469*^9, 3.62144477779749*^9}, 
   3.6214448243081408`*^9, {3.621444864740184*^9, 3.621444876875397*^9}, {
   3.6214449190076103`*^9, 3.621445116036311*^9}, {3.6214452817868843`*^9, 
   3.621445409476652*^9}, {3.621445498407544*^9, 3.621445505160219*^9}, {
   3.621445568643567*^9, 3.6214456089455967`*^9}, {3.6214456407947817`*^9, 
   3.621445646099312*^9}, {3.6214456802617273`*^9, 3.621445683117013*^9}, {
   3.621445721229824*^9, 3.621445757037404*^9}, {3.621445797064407*^9, 
   3.6214458451842184`*^9}, {3.621446049294627*^9, 3.62144609462516*^9}, {
   3.6214467756582565`*^9, 3.621446782456936*^9}, {3.6214472603917246`*^9, 
   3.62144727654134*^9}, {3.62144739825751*^9, 3.6214474274644303`*^9}, {
   3.621447458153499*^9, 3.6214474631770015`*^9}, {3.621447500113695*^9, 
   3.6214475723799205`*^9}, {3.6214479360672855`*^9, 
   3.6214479433380127`*^9}, {3.6214480116928473`*^9, 3.621448027810459*^9}, {
   3.6214488163043003`*^9, 3.6214488507237425`*^9}, {3.621449714950156*^9, 
   3.621449719141575*^9}, {3.6214502373893948`*^9, 3.6214502414377995`*^9}, {
   3.621450310677723*^9, 3.621450310940749*^9}, {3.6214504197126255`*^9, 
   3.621450520460699*^9}, {3.621450607407393*^9, 3.621450620230675*^9}, {
   3.621592199575161*^9, 3.621592210654161*^9}, {3.621594472396161*^9, 
   3.621594596618161*^9}, {3.6217962010304136`*^9, 3.6217963004704137`*^9}, {
   3.621797472014414*^9, 3.6217975053414135`*^9}, {3.621806833896414*^9, 
   3.6218068508194137`*^9}, {3.621849216215517*^9, 3.621849220915517*^9}, {
   3.6218522146745167`*^9, 3.6218522250515165`*^9}, {3.6235080404702044`*^9, 
   3.6235080785455885`*^9}, {3.6235084401442575`*^9, 3.623508456475421*^9}, {
   3.6235085214098496`*^9, 3.623508531672876*^9}, {3.6235089426469693`*^9, 
   3.6235089433810425`*^9}, {3.623578173278491*^9, 3.6235781759737606`*^9}, {
   3.6309312673362703`*^9, 3.630931274473984*^9}, {3.6322473232597647`*^9, 
   3.6322473234666405`*^9}, {3.632839231358775*^9, 3.6328392799106297`*^9}, {
   3.6328393872223597`*^9, 3.632839483299967*^9}, {3.632839553519988*^9, 
   3.6328397118628206`*^9}, {3.632844560950177*^9, 3.6328445628213644`*^9}, {
   3.632844664920573*^9, 3.6328446659526763`*^9}, {3.6328551385657916`*^9, 
   3.6328551509430294`*^9}, {3.641061048643049*^9, 3.6410610835204782`*^9}, {
   3.6411389189025536`*^9, 3.6411389269333563`*^9}, {3.6411391334210033`*^9, 
   3.641139135715233*^9}, {3.641840589881184*^9, 3.641840631853381*^9}, {
   3.641840662996495*^9, 3.6418406857607713`*^9}, {3.6526948842961817`*^9, 
   3.6526948856501856`*^9}, {3.6526949361402764`*^9, 
   3.6526949383492813`*^9}, {3.654248831349617*^9, 3.654248831939618*^9}, {
   3.65424901360289*^9, 3.6542490211730213`*^9}, {3.654249053632189*^9, 
   3.6542490542521896`*^9}, {3.6766072378384647`*^9, 3.6766072400059977`*^9}, 
   3.6767967900598707`*^9, {3.6768913519652605`*^9, 3.676891366309081*^9}, {
   3.6768969734016223`*^9, 3.676896990026573*^9}, {3.7344594659294057`*^9, 
   3.734459467057708*^9}, 
   3.734532592182005*^9},ExpressionUUID->"3f2f087e-3289-45a9-9282-\
89a60e561fb5"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Iterations ( hatChangesArb[khat, dhat ,ahat ,bhat, \[Lambda]Arb, \
workplaceWageArb, resWageArb, workplaceEmpArb, resEmpArb, tradeSharesArb, \
resIncomeArb, workIncomeArb, landel,outputEvery] )\
\>", "Subsubsection",
 CellChangeTimes->{{3.6235785242302065`*^9, 3.6235785266902313`*^9}, {
  3.6328398454061737`*^9, 3.632839853421975*^9}, {3.6410603429947615`*^9, 
  3.6410603442583694`*^9}, {3.641061357462497*^9, 3.64106136094532*^9}, {
  3.641139606305287*^9, 3.641139655507207*^9}, {3.734459525228907*^9, 
  3.734459526222886*^9}},ExpressionUUID->"403a9613-5042-404a-950c-\
9a888fc85d33"],

Cell["\<\
This function iterates over what and \[Lambda]hat until convergence, and \
gives the equilibrium counterfactual changes. It takes in exogenous changes \
in commuting and trade costs. The third argument indicates every how many \
iterations we want output on the iteration progress (set 0 for no output at \
all).\
\>", "Text",
 CellChangeTimes->{{3.621451690845726*^9, 3.621451712725914*^9}, {
   3.6214517517668176`*^9, 3.6214517717908196`*^9}, {3.6214522762902646`*^9, 
   3.6214523426829033`*^9}, 
   3.733931396442525*^9},ExpressionUUID->"7bf46258-8b20-4f99-abe7-\
5e9e8d3b8f33"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"hatChangesArb", "[", 
    RowBox[{
    "khat_", ",", "dhat_", ",", "ahat_", ",", "bhat_", ",", 
     "\[IndentingNewLine]", "\[Lambda]Arb_", ",", "workplaceWageArb_", ",", 
     "resWageArb_", ",", "workplaceEmpArb_", ",", "resEmpArb_", ",", 
     "tradeSharesArb_", ",", "resIncomeArb_", ",", "workIncomeArb_", ",", 
     "landel_", ",", "\[IndentingNewLine]", "outputEvery_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dist", ",", "c", ",", "what", ",", "\[Lambda]hat", ",", "inWhat", ",", 
       "in\[Lambda]", ",", "out", ",", "iter\[Lambda]tilde", ",", 
       "iterWtilde", ",", "distWages", ",", "dist\[Lambda]", ",", 
       "\[IndentingNewLine]", "temp1", ",", "denRes", ",", "numRes", ",", 
       "Vbarhat", ",", "LMhat", ",", "LRhat", ",", "Qhat", ",", "temp2", ",", 
       "den", ",", "num", ",", "\[Pi]nihat", ",", "diag", ",", "Phat", ",", 
       "pricehat", ",", "realinchat"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dist", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"what", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Lambda]hat", "=", "isCommuting"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"c", "<", "maxiter"}], " ", "&&", " ", 
         RowBox[{"dist", ">", "tol"}]}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"c", "=", 
          RowBox[{"c", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"inWhat", "=", "what"}], ";", "\[IndentingNewLine]", 
         RowBox[{"in\[Lambda]", "=", "\[Lambda]hat"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"out", "=", 
          RowBox[{"allChangesArbGuess", "[", 
           RowBox[{
           "inWhat", ",", "in\[Lambda]", ",", "khat", ",", "dhat", ",", 
            "ahat", ",", "bhat", ",", "\[Lambda]Arb", ",", "workplaceWageArb",
             ",", "resWageArb", ",", "workplaceEmpArb", ",", "resEmpArb", ",",
             "tradeSharesArb", ",", "resIncomeArb", ",", "workIncomeArb", ",",
             "landel"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"iter\[Lambda]tilde", "=", 
          RowBox[{
           RowBox[{"out", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"1", ";;", "ncounties"}], ",", "All"}], "]"}], "]"}], 
           " ", "isCommutingSp"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          RowBox[{"out", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"ncounties", "+", "1"}], ",", "All"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"distWages", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{
             FractionBox["iterWtilde", "inWhat"], "-", "1"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"using", " ", "the", " ", "sparse"}], "-", 
           RowBox[{
           "array", " ", "version", " ", "of", " ", "commuting", " ", 
            "allows", " ", "saving", " ", "time"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"dist\[Lambda]", "=", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{
              FractionBox["iter\[Lambda]tilde", 
               RowBox[{"in\[Lambda]", "+", "isCommutingSp", "-", "1"}]], " ", 
              "-", "1"}], "]"}], " ", "isCommutingSp"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "denominator", " ", "makes", " ", "sure", " ", "that", 
            " ", "the", " ", "division", " ", "by", " ", "zero", " ", "never",
             " ", "occurs"}], ",", " ", 
           RowBox[{
            RowBox[{
            "while", " ", "preserving", " ", "the", " ", "deviations", " ", 
             "for", " ", "observed", " ", "commuting", " ", "pairs"}], ";", 
            " ", "then"}], ",", " ", 
           RowBox[{
           "the", " ", "matrix", " ", "is", " ", "multiplied", " ", "by", " ",
             "commuting", " ", "indicators", " ", "to", " ", "restore", " ", 
            "zero", " ", "change", " ", "where", " ", "there", " ", "are", 
            " ", "no", " ", "commuting", " ", "flows"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"what", "=", 
          RowBox[{
           RowBox[{"inWhat", " ", "\[Zeta]"}], " ", "+", " ", 
           RowBox[{"iterWtilde", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Zeta]"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"\[Lambda]hat", "=", 
          RowBox[{
           RowBox[{"in\[Lambda]", "  ", "\[Zeta]"}], " ", "+", " ", 
           RowBox[{"iter\[Lambda]tilde", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Zeta]"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"dist", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"{", 
            RowBox[{"distWages", ",", "dist\[Lambda]"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"outputEvery", ">", "0"}], " ", "&&", 
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"c", ",", "outputEvery"}], "]"}], "\[Equal]", "1"}]}], 
           ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<Iteration \>\"", ",", "c", ",", "\"\<  concluded on \>\"", 
             ",", 
             RowBox[{"DateString", "[", "]"}], ",", " ", 
             "\"\<; distWages is \>\"", ",", "distWages", ",", 
             "\"\<; dist\[Lambda] is \>\"", ",", "dist\[Lambda]", ",", 
             "\"\<.\>\""}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dist", ">", "tol"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<WARNING: Max iterations reached without satisfying the required \
tolerance. Current sup-norm distances: distWages: \>\"", ",", "distWages", 
          ",", "\"\<; dist\[Lambda]: \>\"", ",", "dist\[Lambda]", ",", 
          "\"\< ...\>\""}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"outputEvery", ">", 
           RowBox[{"-", "1"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<Convergence achieved in \>\"", ",", "c", ",", 
            "\"\< iterations on \>\"", ",", 
            RowBox[{"DateString", "[", "]"}], ",", "\"\<; distWages is \>\"", 
            ",", "distWages", ",", "\"\<; dist\[Lambda] is \>\"", ",", 
            "dist\[Lambda]", ",", "\"\< ...\>\""}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Computing", " ", "equilibrium", " ", "changes"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"vbar", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", " ", 
       FractionBox[
        RowBox[{"bhat", " ", "\[Lambda]Arb", " "}], 
        SuperscriptBox["khat", "\[Epsilon]"]]}], "  ", ";", "  ", 
      "\[IndentingNewLine]", 
      RowBox[{"denRes", "=", 
       RowBox[{"temp1", ".", 
        SuperscriptBox["what", "\[Epsilon]"]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"numRes", "=", 
       RowBox[{"temp1", ".", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["what", 
           RowBox[{"\[Epsilon]", "+", "1"}]], " ", "workplaceWageArb"}], 
         ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vbarhat", "=", 
       FractionBox["numRes", 
        RowBox[{"resWageArb", "  ", "denRes"}]]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"lm", " ", "hat", " ", "and", " ", "lr", " ", "hat"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"note", ":", " ", 
         RowBox[{"\[Lambda]", " ", "are", " ", "already", " ", "flows"}]}], 
        ",", " ", 
        RowBox[{
         RowBox[{"i", ".", "e", ".", " ", "shares"}], " ", "times", " ", 
         "Lbar", " ", "in", " ", "the", " ", "equations"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", 
       RowBox[{"\[Lambda]Arb", " ", "\[Lambda]hat"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"LMhat", "=", 
       FractionBox[
        RowBox[{"Total", "[", "temp1", "]"}], "workplaceEmpArb"]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"LRhat", "=", 
       FractionBox[
        RowBox[{"Total", "[", 
         RowBox[{"Transpose", "[", "temp1", "]"}], "]"}], "resEmpArb"]}], ";",
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"q", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Qhat", "=", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{
           RowBox[{"resIncomeArb", " ", "Vbarhat", " ", "LRhat"}], "+", 
           "deficit"}], 
          RowBox[{"resIncomeArb", "+", "deficit"}]], ")"}], 
        RowBox[{"1", "/", 
         RowBox[{"(", 
          RowBox[{"1", "+", "landel"}], ")"}]}]]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"\[Pi]ni", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", 
       RowBox[{"tradeSharesArb", " ", 
        SuperscriptBox["dhat", 
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Sigma]"}], ")"}]]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"temp2", "=", 
       RowBox[{"LMhat", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["what", "ahat"], ")"}], 
         RowBox[{"1", "-", "\[Sigma]"}]]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"den", "=", 
       RowBox[{"temp2", ".", "temp1"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"note", " ", "that", " ", "left"}], "-", 
        RowBox[{
        "product", " ", "effectively", " ", "gives", " ", "the", " ", 
         "transpose", " ", "of", " ", "temp1", " ", "times", " ", 
         RowBox[{"temp2", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"num", "=", 
       RowBox[{
        SuperscriptBox["dhat", 
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Sigma]"}], ")"}]], " ", "temp2"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Pi]nihat", "=", 
       RowBox[{"Transpose", "[", 
        FractionBox[
         RowBox[{"Transpose", "[", "num", "]"}], "den"], "  ", "]"}]}], " ", 
      ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "the", " ", "term", " ", "inside", " ", "divides", " ", "each", " ", 
         "column", " ", "by", " ", "the", " ", "correspondent", " ", 
         "element", " ", "of", " ", "the", " ", "denominator"}], ";", " ", 
        RowBox[{
        "it", " ", "then", " ", "brings", " ", "the", " ", "matrix", " ", 
         "in", " ", "the", " ", "original", " ", "form"}]}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"P", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"diag", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\[Pi]nihat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Phat", "=", 
       RowBox[{
        FractionBox["what", "ahat"], 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["LMhat", "diag"], ")"}], 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], "  ", ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"price", " ", "index", " ", "hat"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"pricehat", "=", 
       RowBox[{
        SuperscriptBox["Phat", "\[Alpha]"], 
        SuperscriptBox["Qhat", 
         RowBox[{"1", "-", "\[Alpha]"}]]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"real", " ", "income", " ", "of", " ", "residents"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"realinchat", "=", 
       FractionBox["Vbarhat", "pricehat"]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"outputEvery", ">", 
         RowBox[{"-", "1"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Counterfactuals completed on \>\"", ",", 
          RowBox[{"DateString", "[", "]"}], ",", "\"\<.\>\""}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "what", ",", "Vbarhat", ",", "realinchat", ",", "LMhat", ",", "LRhat", 
        ",", "Qhat", ",", "Phat", ",", "pricehat", ",", "\[Lambda]hat", ",", 
        "\[Pi]nihat", ",", "c", ",", "distWages", ",", "dist\[Lambda]"}], 
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6214517760782485`*^9, 3.621452092164854*^9}, 
   3.6214521577034073`*^9, {3.621452347571392*^9, 3.621452348404475*^9}, {
   3.621453679225544*^9, 3.621453706868308*^9}, {3.621595174018161*^9, 
   3.621595378443161*^9}, {3.6215954172481613`*^9, 3.621595418776161*^9}, {
   3.6215967798071613`*^9, 3.621597052551161*^9}, {3.621597169773161*^9, 
   3.621597203427161*^9}, {3.6215974704348173`*^9, 3.6215976135569816`*^9}, {
   3.621597663537888*^9, 3.6215976640531964`*^9}, {3.621597783993651*^9, 
   3.621597792486063*^9}, {3.6215978380934644`*^9, 3.621598026625425*^9}, 
   3.6215982836831484`*^9, {3.6215983718250275`*^9, 3.621598389847432*^9}, {
   3.6215987984846926`*^9, 3.6215988978756304`*^9}, {3.6217979006564136`*^9, 
   3.6217979144264135`*^9}, {3.6217979845894136`*^9, 
   3.6217979864754133`*^9}, {3.6218069545304136`*^9, 
   3.6218070047724133`*^9}, {3.6218491859375167`*^9, 
   3.6218491905625167`*^9}, {3.621852318370517*^9, 3.621852329229517*^9}, {
   3.623507226819772*^9, 3.6235072612642164`*^9}, {3.6235098170903783`*^9, 
   3.6235098286954985`*^9}, {3.62350986951591*^9, 3.6235098851195354`*^9}, {
   3.6235099302880516`*^9, 3.6235099352955523`*^9}, {3.623537696198702*^9, 
   3.6235377077708592`*^9}, {3.6235377459866805`*^9, 
   3.6235378213679943`*^9}, {3.630931379430478*^9, 3.6309313802615614`*^9}, {
   3.6322473639193544`*^9, 3.6322473641262302`*^9}, {3.6328398608647194`*^9, 
   3.6328398616247954`*^9}, {3.632839899231556*^9, 3.632839905397172*^9}, {
   3.6328399611987514`*^9, 3.6328400023498664`*^9}, {3.6328400570903397`*^9, 
   3.632840172180848*^9}, {3.632845096092681*^9, 3.6328451079808693`*^9}, 
   3.6328465272327704`*^9, {3.6328549121151485`*^9, 3.6328549156174994`*^9}, {
   3.6328549501539526`*^9, 3.632854953490286*^9}, 3.6410610703555923`*^9, {
   3.6410611508367195`*^9, 3.641061151164322*^9}, {3.6411393127859383`*^9, 
   3.641139319586618*^9}, {3.641840899581151*^9, 3.6418409151887116`*^9}, {
   3.652694971581339*^9, 3.6526949781073537`*^9}, {3.6542493010926943`*^9, 
   3.6542493018126955`*^9}, {3.6542493384607506`*^9, 
   3.6542493433227577`*^9}, {3.676607301667946*^9, 3.676607308406549*^9}, {
   3.6767968563454757`*^9, 3.676796907094718*^9}, {3.6768914989704075`*^9, 
   3.6768915195325837`*^9}, {3.6768970403954544`*^9, 3.676897049974002*^9}, 
   3.734459551610603*^9, {3.7345154252921314`*^9, 3.7345154527531867`*^9}, 
   3.7345376656557355`*^9},ExpressionUUID->"117519e1-9fa9-4839-af93-\
43d95a2d01dc"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Only changes in productivity", "Section",
 CellChangeTimes->{{3.641060214793125*^9, 3.6410602198077574`*^9}, {
  3.6411398100946636`*^9, 
  3.641139810598714*^9}},ExpressionUUID->"dc788f63-a1f6-4853-9d19-\
b1df4b62999a"],

Cell[CellGroupData[{

Cell["Guess Update", "Subsubsection",
 CellChangeTimes->{{3.6235777030954776`*^9, 3.623577708929061*^9}, {
   3.632841013974019*^9, 3.632841034415063*^9}, 3.6328451638514557`*^9, {
   3.6410603779811935`*^9, 3.6410603800886087`*^9}, 3.641061339157375*^9, 
   3.641061373298402*^9},ExpressionUUID->"6503b0b0-0765-4fdf-8c2c-\
478ba486ba44"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prodChangesGuess", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"inWhat", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"in\[Lambda]", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"ahat", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"ones", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Chi]", ",", "_Real", ",", "1"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"prodChangesGuessMod", "=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "iterVbar", ",", "iterLM", ",", "iterLR", ",", "iterQ", ",", 
          "iter\[Pi]ni", ",", "iterP", ",", "iter\[Lambda]tilde", ",", 
          "iterWtilde", ",", "distWages", ",", "dist\[Lambda]", ",", "wout", 
          ",", "\[Lambda]out", ",", "diag", ",", "\[IndentingNewLine]", 
          "temp1", ",", "temp2", ",", "temp3", ",", "temp4", ",", "temp5", 
          ",", "temp6", ",", "denRes", ",", "numRes", ",", "den", ",", "num", 
          ",", "den2", ",", "temp7", ",", "temp8", ",", "outcome"}], "}"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"vbar", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"denRes", "=", 
          RowBox[{"\[Lambda]", ".", 
           SuperscriptBox["inWhat", "\[Epsilon]"]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"numRes", "=", 
          RowBox[{"\[Lambda]", ".", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["inWhat", 
              RowBox[{"\[Epsilon]", "+", "1"}]], " ", "workplaceWage"}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterVbar", "=", 
          FractionBox["numRes", 
           RowBox[{"resWage", " ", "denRes"}]]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"lm", " ", "hat", " ", "and", " ", "lr", " ", "hat"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"note", ":", " ", 
            RowBox[{"\[Lambda]", " ", "are", " ", "already", " ", "flows"}]}],
            ",", " ", 
           RowBox[{
            RowBox[{"i", ".", "e", ".", " ", "shares"}], " ", "times", " ", 
            "Lbar", " ", "in", " ", "the", " ", "equations"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"\[Lambda]", " ", "in\[Lambda]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterLM", "=", 
          FractionBox[
           RowBox[{"Total", "[", "temp1", "]"}], "workplaceEmp"]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterLR", "=", 
          FractionBox[
           RowBox[{"Total", "[", 
            RowBox[{"Transpose", "[", "temp1", "]"}], "]"}], "resEmp"]}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"q", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"iterQ", "=", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{
              RowBox[{"resIncome", " ", "iterVbar", " ", "iterLR"}], "+", 
              "deficit"}], 
             RowBox[{"resIncome", "+", "deficit"}]], " ", ")"}], 
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Chi]"}], ")"}]}]]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"\[Pi]ni", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"temp2", "=", 
          RowBox[{"iterLM", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["inWhat", "ahat"], ")"}], 
            RowBox[{"1", "-", "\[Sigma]"}]]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"den", "=", 
          RowBox[{"temp2", ".", "\[Pi]niOnlyTrading"}]}], ";", " ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"note", " ", "that", " ", "left"}], "-", 
           RowBox[{
           "product", " ", "effectively", " ", "gives", " ", "the", " ", 
            "transpose", " ", "of", " ", "temp1", " ", "times", " ", 
            RowBox[{"temp2", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"num", "=", 
          RowBox[{"Outer", "[", 
           RowBox[{"Times", ",", "temp2", ",", "ones"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Pi]ni", "=", 
          RowBox[{"Transpose", "[", 
           FractionBox[
            RowBox[{"Transpose", "[", "num", "]"}], "den"], "  ", "]"}]}], 
         " ", ";", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "term", " ", "inside", " ", "divides", " ", "each", 
            " ", "column", " ", "by", " ", "the", " ", "correspondent", " ", 
            "element", " ", "of", " ", "the", " ", "denominator"}], ";", " ", 
           RowBox[{
           "it", " ", "then", " ", "brings", " ", "the", " ", "matrix", " ", 
            "in", " ", "the", " ", "original", " ", "form"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"P", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"diag", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"iter\[Pi]ni", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "i"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"iterP", "=", 
          RowBox[{
           FractionBox["inWhat", "ahat"], 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["iterLM", "diag"], ")"}], 
            RowBox[{"1", "/", 
             RowBox[{"(", 
              RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], "  ", ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"w", " ", "hat"}], ",", " ", 
           RowBox[{"next", " ", "iteration"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", 
          RowBox[{"\[Pi]niOnlyTrading", " ", "iter\[Pi]ni"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"temp4", "=", 
          RowBox[{
           RowBox[{"iterVbar", " ", "iterLR", "  ", "resIncome"}], "+", 
           "deficit"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          FractionBox[
           RowBox[{"temp1", ".", "temp4"}], 
           RowBox[{"laborIncome", " ", "iterLM"}]]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          FractionBox["iterWtilde", 
           RowBox[{"Mean", "[", "iterWtilde", "]"}]]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"\[Lambda]", " ", "hat"}], ",", " ", 
           RowBox[{"next", " ", "iteration"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"temp7", "=", 
          RowBox[{
           SuperscriptBox["iterP", 
            RowBox[{"-", "\[Alpha]"}]], " ", 
           SuperscriptBox["iterQ", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "\[Alpha]"}]]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp6", "=", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"Outer", "[", 
             RowBox[{"Times", ",", "temp7", ",", "inWhat"}], "]"}], ")"}], 
           "\[Epsilon]"]}], ";", "\[IndentingNewLine]", 
         RowBox[{"den2", "=", 
          RowBox[{"Total", "[", 
           RowBox[{"Total", "[", 
            RowBox[{"\[Lambda]", " ", "temp6"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Lambda]tilde", "=", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{"temp6", " ", "population"}], ")"}], "den2"]}], " ", ";", 
         "  ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "to", " ", "limit", " ", "accumulation", " ", "of", " ", 
              "numerical", " ", "errors"}], " ", "-", " ", 
             RowBox[{
             "unconditional", " ", "shares", " ", "of", " ", "commuting", " ",
               "\[IndentingNewLine]", "have", " ", "a", " ", "very", " ", 
              "small", " ", "order", " ", "of", " ", "magnitude"}], " ", "-", 
             " ", 
             RowBox[{
             "we", " ", "predict", " ", "new", " ", "commuting", " ", "flows",
               " ", "in", " ", "#", " ", "of", " ", "jobs"}]}], ";", " ", 
            "hence"}], ",", " ", 
           RowBox[{
            RowBox[{
            "the", " ", "numerator", " ", "is", " ", "multiplied", " ", "by", 
             " ", "the", " ", "population", " ", "level", " ", "before", " ", 
             "dividing", " ", "it", " ", "for", " ", "the", " ", "sum", 
             "\[IndentingNewLine]", "of", " ", "all", " ", "terms", " ", "at",
              " ", "the", " ", "denominator"}], ";", " ", 
            RowBox[{
            "note", " ", "that", " ", "the", " ", "denominator", " ", 
             "contains", " ", "\[Lambda]"}]}], ",", " ", 
           RowBox[{
           "which", " ", "is", " ", "in", " ", "fact", " ", "flows", " ", 
            "of", " ", "jobs"}], ",", " ", 
           RowBox[{"rather", " ", "than", " ", "shares"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", "output", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"outcome", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"iter\[Lambda]tilde", ",", 
            RowBox[{"{", "iterWtilde", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "outcome"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6235777207472425`*^9, 3.623577830251192*^9}, {
   3.6235778652846947`*^9, 3.623577891929359*^9}, {3.623578180921255*^9, 
   3.623578182975461*^9}, {3.623578217861949*^9, 3.623578265031666*^9}, 
   3.623578567450639*^9, {3.6235787934228983`*^9, 3.623578798042945*^9}, {
   3.6235790896458607`*^9, 3.623579128866253*^9}, {3.6309313340729427`*^9, 
   3.6309313351410494`*^9}, {3.632247344433053*^9, 3.6322473447218795`*^9}, {
   3.641061163205803*^9, 3.6410611955044127`*^9}, {3.6410612892508445`*^9, 
   3.641061294670481*^9}, {3.6411391496346245`*^9, 3.6411391514198027`*^9}, {
   3.6411393808697453`*^9, 3.6411393831559744`*^9}, {3.6411394338550434`*^9, 
   3.641139435710229*^9}, {3.641252005584097*^9, 3.6412520112450967`*^9}, {
   3.6418394576219697`*^9, 3.641839483481555*^9}, {3.641839542573464*^9, 
   3.6418395581910257`*^9}, 3.6418396152257285`*^9, {3.6418397039746027`*^9, 
   3.6418397058277874`*^9}, {3.6418397690201063`*^9, 3.641839782102414*^9}, {
   3.676606987171113*^9, 3.67660701753008*^9}, 3.67679692156424*^9, {
   3.6768916308119483`*^9, 3.6768916561343966`*^9}, {3.6768971261806903`*^9, 
   3.6768971438453045`*^9}, {3.7344596187942033`*^9, 3.73445961970652*^9}, 
   3.734532602701021*^9},ExpressionUUID->"0c2099a5-6560-42d4-b745-\
e38041c5e384"]
}, Closed]],

Cell[CellGroupData[{

Cell["Iterations ( hatChangesA[ahat,landel, outputEvery] )", "Subsubsection",
 CellChangeTimes->{{3.62357854253039*^9, 3.62357854853045*^9}, {
  3.64106037428297*^9, 3.641060375656779*^9}, {3.6410613799128437`*^9, 
  3.641061381504054*^9}, {3.6411395719768543`*^9, 3.641139575952252*^9}, {
  3.641139678435499*^9, 3.6411396812757835`*^9}, {3.7344596850936947`*^9, 
  3.7344596876407557`*^9}},ExpressionUUID->"41cdfda8-bc6e-43b8-b9f0-\
5e6f5e9fe784"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"hatChangesA", "[", 
    RowBox[{"ahat_", ",", "landel_", ",", "outputEvery_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dist", ",", "c", ",", "what", ",", "\[Lambda]hat", ",", "inWhat", ",", 
       "in\[Lambda]", ",", "out", ",", "iter\[Lambda]tilde", ",", 
       "iterWtilde", ",", "distWages", ",", "dist\[Lambda]", ",", "ones", ",",
        "\[IndentingNewLine]", "temp1", ",", "denRes", ",", "numRes", ",", 
       "Vbarhat", ",", "LMhat", ",", "LRhat", ",", "Qhat", ",", "temp2", ",", 
       "den", ",", "num", ",", "\[Pi]nihat", ",", "diag", ",", "Phat", ",", 
       "pricehat", ",", "realinchat"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dist", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"what", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Lambda]hat", "=", "isCommuting"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ones", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"c", "<", "maxiter"}], " ", "&&", " ", 
         RowBox[{"dist", ">", "tol"}]}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"c", "=", 
          RowBox[{"c", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"inWhat", "=", "what"}], ";", "\[IndentingNewLine]", 
         RowBox[{"in\[Lambda]", "=", "\[Lambda]hat"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"out", "=", 
          RowBox[{"prodChangesGuess", "[", 
           RowBox[{
           "inWhat", ",", "in\[Lambda]", ",", "ahat", ",", "ones", ",", 
            "landel"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"iter\[Lambda]tilde", "=", 
          RowBox[{
           RowBox[{"out", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"1", ";;", "ncounties"}], ",", "All"}], "]"}], "]"}], 
           " ", "isCommutingSp"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iterWtilde", "=", 
          RowBox[{"out", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"ncounties", "+", "1"}], ",", "All"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"distWages", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{
             FractionBox["iterWtilde", "inWhat"], "-", "1"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"using", " ", "the", " ", "sparse"}], "-", 
           RowBox[{
           "array", " ", "version", " ", "of", " ", "commuting", " ", 
            "allows", " ", "saving", " ", "time"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"dist\[Lambda]", "=", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{
              FractionBox["iter\[Lambda]tilde", 
               RowBox[{"in\[Lambda]", "+", "isCommutingSp", "-", "1"}]], " ", 
              "-", "1"}], "]"}], " ", "isCommutingSp"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "denominator", " ", "makes", " ", "sure", " ", "that", 
            " ", "the", " ", "division", " ", "by", " ", "zero", " ", "never",
             " ", "occurs"}], ",", " ", 
           RowBox[{
            RowBox[{
            "while", " ", "preserving", " ", "the", " ", "deviations", " ", 
             "for", " ", "observed", " ", "commuting", " ", "pairs"}], ";", 
            " ", "then"}], ",", " ", 
           RowBox[{
           "the", " ", "matrix", " ", "is", " ", "multiplied", " ", "by", " ",
             "commuting", " ", "indicators", " ", "to", " ", "restore", " ", 
            "zero", " ", "change", " ", "where", " ", "there", " ", "are", 
            " ", "no", " ", "commuting", " ", "flows"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"what", "=", 
          RowBox[{
           RowBox[{"inWhat", " ", "\[Zeta]"}], " ", "+", " ", 
           RowBox[{"iterWtilde", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Zeta]"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"\[Lambda]hat", "=", 
          RowBox[{
           RowBox[{"in\[Lambda]", "  ", "\[Zeta]"}], " ", "+", " ", 
           RowBox[{"iter\[Lambda]tilde", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", "\[Zeta]"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"dist", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"{", 
            RowBox[{"distWages", ",", "dist\[Lambda]"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"outputEvery", ">", "0"}], " ", "&&", 
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"c", ",", "outputEvery"}], "]"}], "\[Equal]", "1"}]}], 
           ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<Iteration \>\"", ",", "c", ",", "\"\<  concluded on \>\"", 
             ",", 
             RowBox[{"DateString", "[", "]"}], ",", " ", 
             "\"\<; distWages is \>\"", ",", "distWages", ",", 
             "\"\<; dist\[Lambda] is \>\"", ",", "dist\[Lambda]", ",", 
             "\"\<.\>\""}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dist", ">", "tol"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<WARNING: Max iterations reached witout satisfying the required \
tolerance. Current sup-norm distances: distWages: \>\"", ",", "distWages", 
          ",", "\"\<; dist\[Lambda]: \>\"", ",", "dist\[Lambda]", ",", 
          "\"\< ...\>\""}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"outputEvery", ">", 
           RowBox[{"-", "1"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<Convergence achieved in \>\"", ",", "c", ",", 
            "\"\< iterations on \>\"", ",", 
            RowBox[{"DateString", "[", "]"}], ",", "\"\<; distWages is \>\"", 
            ",", "distWages", ",", "\"\<; dist\[Lambda] is \>\"", ",", 
            "dist\[Lambda]", ",", "\"\< ...\>\""}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Computing", " ", "equilibrium", " ", "changes"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"vbar", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"denRes", "=", 
       RowBox[{"\[Lambda]", ".", 
        SuperscriptBox["what", "\[Epsilon]"]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"numRes", "=", 
       RowBox[{"\[Lambda]", ".", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["what", 
           RowBox[{"\[Epsilon]", "+", "1"}]], " ", "workplaceWage"}], 
         ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vbarhat", "=", 
       FractionBox["numRes", 
        RowBox[{"resWage", " ", "denRes"}]]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"lm", " ", "hat", " ", "and", " ", "lr", " ", "hat"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"note", ":", " ", 
         RowBox[{"\[Lambda]", " ", "are", " ", "already", " ", "flows"}]}], 
        ",", " ", 
        RowBox[{
         RowBox[{"i", ".", "e", ".", " ", "shares"}], " ", "times", " ", 
         "Lbar", " ", "in", " ", "the", " ", "equations"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"temp1", "=", 
       RowBox[{"\[Lambda]", " ", "\[Lambda]hat"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"LMhat", "=", 
       FractionBox[
        RowBox[{"Total", "[", "temp1", "]"}], "workplaceEmp"]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"LRhat", "=", 
       FractionBox[
        RowBox[{"Total", "[", 
         RowBox[{"Transpose", "[", "temp1", "]"}], "]"}], "resEmp"]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"q", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Qhat", "=", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{
           RowBox[{"resIncome", " ", "Vbarhat", " ", "LRhat"}], "+", 
           "deficit"}], 
          RowBox[{"resIncome", "+", "deficit"}]], " ", ")"}], 
        RowBox[{"1", "/", 
         RowBox[{"(", 
          RowBox[{"1", "+", "landel"}], ")"}]}]]}], ";", "  ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"\[Pi]ni", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"temp2", "=", 
       RowBox[{"LMhat", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["what", "ahat"], ")"}], 
         RowBox[{"1", "-", "\[Sigma]"}]]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"den", "=", 
       RowBox[{"temp2", ".", "\[Pi]niOnlyTrading"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"note", " ", "that", " ", "left"}], "-", 
        RowBox[{
        "product", " ", "effectively", " ", "gives", " ", "the", " ", 
         "transpose", " ", "of", " ", "temp1", " ", "times", " ", 
         RowBox[{"temp2", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"num", "=", 
       RowBox[{"Outer", "[", 
        RowBox[{"Times", ",", " ", "temp2", ",", "ones"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Pi]nihat", "=", 
       RowBox[{"Transpose", "[", 
        FractionBox[
         RowBox[{"Transpose", "[", "num", "]"}], "den"], "  ", "]"}]}], " ", 
      ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "the", " ", "term", " ", "inside", " ", "divides", " ", "each", " ", 
         "column", " ", "by", " ", "the", " ", "correspondent", " ", 
         "element", " ", "of", " ", "the", " ", "denominator"}], ";", " ", 
        RowBox[{
        "it", " ", "then", " ", "brings", " ", "the", " ", "matrix", " ", 
         "in", " ", "the", " ", "original", " ", "form"}]}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"P", " ", "hat"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"diag", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\[Pi]nihat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Phat", "=", 
       RowBox[{
        FractionBox["what", "ahat"], 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["LMhat", "diag"], ")"}], 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", "\[Sigma]"}], ")"}]}]]}]}], "  ", ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"price", " ", "index", " ", "hat"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"pricehat", "=", 
       RowBox[{
        SuperscriptBox["Phat", "\[Alpha]"], 
        SuperscriptBox["Qhat", 
         RowBox[{"1", "-", "\[Alpha]"}]]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"real", " ", "income", " ", "of", " ", "residents"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"realinchat", "=", 
       FractionBox["Vbarhat", "pricehat"]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"outputEvery", ">", 
         RowBox[{"-", "1"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Counterfactuals completed on \>\"", ",", 
          RowBox[{"DateString", "[", "]"}], ",", "\"\<.\>\""}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "what", ",", "Vbarhat", ",", "realinchat", ",", "LMhat", ",", "LRhat", 
        ",", "Qhat", ",", "Phat", ",", "pricehat", ",", "\[Lambda]hat", ",", 
        "\[Pi]nihat", ",", "c", ",", "distWages", ",", "dist\[Lambda]"}], 
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.623578551170476*^9, {3.623579278267747*^9, 3.623579451349478*^9}, {
   3.6235795944809093`*^9, 3.6235795982309465`*^9}, {3.6243034236329203`*^9, 
   3.624303493881981*^9}, {3.6309314262891636`*^9, 3.6309314267712116`*^9}, {
   3.6322473759821124`*^9, 3.6322473762369595`*^9}, {3.6410612219673867`*^9, 
   3.6410612556328115`*^9}, {3.6411395082744846`*^9, 3.6411395100656643`*^9}, 
   3.6411425074073677`*^9, 3.641252027283097*^9, {3.641839914705673*^9, 
   3.641839938707073*^9}, {3.676607105682934*^9, 3.676607122598694*^9}, {
   3.67679703368085*^9, 3.676797036291854*^9}, {3.676797066674898*^9, 
   3.6767970691149015`*^9}, {3.6767971085574584`*^9, 3.676797112583465*^9}, {
   3.676891847734356*^9, 3.676891866408424*^9}, {3.6768971783995233`*^9, 
   3.676897194487121*^9}, {3.7341708646592207`*^9, 3.73417091509231*^9}, 
   3.7345153365729604`*^9, 
   3.734537678712756*^9},ExpressionUUID->"ba5c34a3-51ec-4a4e-9703-\
3e3fcee5435f"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Other functions", "Subchapter",
 CellChangeTimes->{{3.641208791287963*^9, 
  3.641208793288163*^9}},ExpressionUUID->"a0025f62-e8cb-4cb0-a3cc-\
59668d39735b"],

Cell[CellGroupData[{

Cell["Productivity shocks to a set of counties", "Section",
 CellChangeTimes->{{3.641208796167451*^9, 
  3.6412088220960436`*^9}},ExpressionUUID->"8c654a82-b63e-44e9-81c9-\
4034f9c6df08"],

Cell["\<\
This function is used to simulate productivity shocks to one county (or a set \
of counties) inside a loop. It saves outcomes for all the economy with a \
given set of shocks, plus statistics on convergence used to check that all \
iterations concluded correctly.
It is used in 5% productivity shocks to counties and commuting zones, for \
example.\
\>", "Text",
 CellChangeTimes->{{3.6412088355293865`*^9, 
  3.641208953564189*^9}},ExpressionUUID->"a9d07b4b-22de-407c-93e6-\
cdeaf38cc06e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"countyProdShock", "[", 
    RowBox[{"rep_", ",", "prodChange_", ",", "landel_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "outcome", ",", "out", ",", "filename", ",", "caseN", ",", "repN", ",", 
       "dataOutTreat", ",", "dataOutControl", ",", "measuredProdhat", ",", 
       "shipmentsHat", ",", "allData", ",", "treatment", ",", "countyline", 
       ",", "\[IndentingNewLine]", "whatOut", ",", "VbarhatOut", ",", 
       "realinchatOut", ",", "LMhatOut", ",", "LRhatOut", ",", "QhatOut", ",",
        "PhatOut", ",", "pricehatOut", ",", "\[Lambda]hatOut", ",", 
       "\[Pi]nihatOut", ",", "\[Pi]nnhat", ",", "c", ",", "distWages", ",", 
       "dist\[Lambda]", ",", "replication"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"computing", " ", "outcome"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"outcome", "=", 
       RowBox[{"hatChangesA", "[", 
        RowBox[{"prodChange", ",", "landel", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"ALL", " ", "COUNTIES", " ", "OUTCOMES"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"(*", 
       RowBox[{"storing", " ", "all", " ", "counties", " ", "outcome"}], 
       "*)"}], "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
         ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
         ",", "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", 
         "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
       RowBox[{"outcome", "-", "1"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "}"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
      RowBox[{"\[Lambda]hatOut", "=", 
       RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"own", " ", "commuting", " ", "change"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"\[Pi]nihatOut", "=", 
       RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"own", " ", "trade", " ", "share", " ", "change"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"measuredProdhat", "=", 
       RowBox[{
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"LMhatOut", "+", "1"}], 
            RowBox[{"\[Pi]nihatOut", "+", "1"}]], ")"}], 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"\[Sigma]", "-", "1"}], ")"}]}]], "prodChange"}], "-", 
        "1"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "measured", " ", "productivity", " ", "from", " ", "cpi", " ", 
        "index"}], "*)"}], "\[IndentingNewLine]", "\t", 
      RowBox[{"shipmentsHat", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"LMhatOut", "+", "1"}], ")"}], 
         RowBox[{"(", 
          RowBox[{"whatOut", "+", "1"}], ")"}]}], "-", "1"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"countyline", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"replication", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"rep", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"(*", 
       RowBox[{"data", " ", "to", " ", "export"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"allData", "=", 
       RowBox[{"{", 
        RowBox[{
        "replication", ",", "countyline", ",", "whatOut", ",", "VbarhatOut", 
         ",", "realinchatOut", ",", "LMhatOut", ",", "LRhatOut", ",", 
         "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
         "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", 
         RowBox[{"prodChange", "-", "1"}], ",", "measuredProdhat", ",", 
         "shipmentsHat"}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"Clear", "[", "out", "]"}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"out", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"varnames", ",", "allData", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"out", "=", 
       RowBox[{"Transpose", "[", "out", "]"}]}], ";", "\[IndentingNewLine]", 
      "\t", 
      RowBox[{"out", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
      "\[IndentingNewLine]", "\t", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\< Replication \>\"", ",", " ", "rep", ",", " ", 
        "\"\< concluded at \>\"", ",", 
        RowBox[{"DateString", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "the", " ", "third", " ", "column", " ", "is", " ", "1", " ", "for", 
         " ", "treatment"}], ",", " ", 
        RowBox[{"0", " ", "for", " ", "control", " ", "outcome"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"out", ",", "c", ",", "distWages", ",", "dist\[Lambda]"}], 
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6412088296097946`*^9, 3.6412088324320774`*^9}, {
  3.6767979864829245`*^9, 3.67679799535599*^9}, {3.734459764987912*^9, 
  3.734459774535451*^9}, {3.7345060646936083`*^9, 3.734506110098699*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"7299a700-cace-468f-a489-c8829d75ea04"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Productivity shocks to a set of counties, with arbitrary initial conditions\
\>", "Section",
 CellChangeTimes->{{3.68485860899587*^9, 
  3.68485865375543*^9}},ExpressionUUID->"edab34f6-9597-430e-bd1e-\
f4cec9582b09"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"countyProdShockArb", "[", 
    RowBox[{
    "rep_", ",", "khat_", ",", " ", "dhat_", " ", ",", "prodChange_", " ", 
     ",", "bhat_", ",", " ", "\[Lambda]Arb_", ",", " ", "workplaceWageArb_", 
     ",", " ", "resWageArb_", ",", " ", "workplaceEmpArb_", ",", " ", 
     "resEmpArb_", ",", " ", "tradeSharesArb_", ",", " ", "resIncomeArb_", 
     ",", " ", "workIncomeArb_", ",", " ", "landel_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "outcome", ",", "out", ",", "filename", ",", "caseN", ",", "repN", ",", 
       "dataOutTreat", ",", "dataOutControl", ",", "measuredProdhat", ",", 
       "shipmentsHat", ",", "allData", ",", "treatment", ",", "countyline", 
       ",", "\[IndentingNewLine]", "whatOut", ",", "VbarhatOut", ",", 
       "realinchatOut", ",", "LMhatOut", ",", "LRhatOut", ",", "QhatOut", ",",
        "PhatOut", ",", "pricehatOut", ",", "\[Lambda]hatOut", ",", 
       "\[Pi]nihatOut", ",", "\[Pi]nnhat", ",", "c", ",", "distWages", ",", 
       "dist\[Lambda]", ",", "replication"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"computing", " ", "outcome"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"outcome", "=", 
       RowBox[{"hatChangesArb", "[", 
        RowBox[{
        "khat", ",", " ", "dhat", " ", ",", "prodChange", " ", ",", "bhat", 
         ",", " ", "\[Lambda]Arb", ",", " ", "workplaceWageArb", ",", " ", 
         "resWageArb", ",", " ", "workplaceEmpArb", ",", " ", "resEmpArb", 
         ",", " ", "tradeSharesArb", ",", " ", "resIncomeArb", ",", " ", 
         "workIncomeArb", ",", " ", "landel", ",", " ", 
         RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"ALL", " ", "COUNTIES", " ", "OUTCOMES"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"(*", 
       RowBox[{"storing", " ", "all", " ", "counties", " ", "outcome"}], 
       "*)"}], "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
         ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
         ",", "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", 
         "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
       RowBox[{"outcome", "-", "1"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "}"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
      RowBox[{"\[Lambda]hatOut", "=", 
       RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"own", " ", "commuting", " ", "change"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"\[Pi]nihatOut", "=", 
       RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"own", " ", "trade", " ", "share", " ", "change"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"measuredProdhat", "=", 
       RowBox[{
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"LMhatOut", "+", "1"}], 
            RowBox[{"\[Pi]nihatOut", "+", "1"}]], ")"}], 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"\[Sigma]", "-", "1"}], ")"}]}]], "prodChange"}], "-", 
        "1"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "measured", " ", "productivity", " ", "from", " ", "cpi", " ", 
        "index"}], "*)"}], "\[IndentingNewLine]", "\t", 
      RowBox[{"shipmentsHat", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"LMhatOut", "+", "1"}], ")"}], 
         RowBox[{"(", 
          RowBox[{"whatOut", "+", "1"}], ")"}]}], "-", "1"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"countyline", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"replication", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"rep", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"(*", 
       RowBox[{"data", " ", "to", " ", "export"}], "*)"}], 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"allData", "=", 
       RowBox[{"{", 
        RowBox[{
        "replication", ",", "countyline", ",", "whatOut", ",", "VbarhatOut", 
         ",", "realinchatOut", ",", "LMhatOut", ",", "LRhatOut", ",", 
         "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
         "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", 
         RowBox[{"prodChange", "-", "1"}], ",", "measuredProdhat", ",", 
         "shipmentsHat"}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"Clear", "[", "out", "]"}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"out", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"varnames", ",", "allData", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"out", "=", 
       RowBox[{"Transpose", "[", "out", "]"}]}], ";", "\[IndentingNewLine]", 
      "\t", 
      RowBox[{"out", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
      "\[IndentingNewLine]", "\t", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\< Replication \>\"", ",", " ", "rep", ",", " ", 
        "\"\< concluded at \>\"", ",", 
        RowBox[{"DateString", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "the", " ", "third", " ", "column", " ", "is", " ", "1", " ", "for", 
         " ", "treatment"}], ",", " ", 
        RowBox[{"0", " ", "for", " ", "control", " ", "outcome"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"out", ",", "c", ",", "distWages", ",", "dist\[Lambda]"}], 
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6412088296097946`*^9, 3.6412088324320774`*^9}, {
   3.6767979864829245`*^9, 3.67679799535599*^9}, {3.684858703487275*^9, 
   3.6848587694620485`*^9}, {3.68485880113486*^9, 3.6848588016378884`*^9}, {
   3.684866343144238*^9, 3.6848663488045616`*^9}, {3.684866482332199*^9, 
   3.6848664986991353`*^9}, {3.6848665904023805`*^9, 3.6848665926655097`*^9}, 
   3.734459866810114*^9},
 CellLabel->
  "In[221]:=",ExpressionUUID->"f8c9b7b3-d132-4624-8904-9b3ac26c563f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.685872405449872*^9, 3.685872406149873*^9}},
 CellLabel->
  "In[222]:=",ExpressionUUID->"e1e1802a-1131-4228-9d00-bb78dec43af4"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6858724138608856`*^9, 3.685872429269911*^9}},
 CellLabel->
  "In[223]:=",ExpressionUUID->"3f4bf081-65a9-40a8-b787-80d5bdbbebdd"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Data Preparation", "Chapter",
 CellChangeTimes->{{3.640971746903284*^9, 3.640971747926386*^9}, {
  3.6420602456303873`*^9, 3.6420602468843875`*^9}, {3.6420603188743877`*^9, 
  3.6420603271293874`*^9}, {3.73452697715866*^9, 
  3.734526981130666*^9}},ExpressionUUID->"9ca915e1-2461-4e01-86eb-\
68d12e1f4ecb"],

Cell[CellGroupData[{

Cell["Productivities and Associated Trade Flows", "Subchapter",
 CellChangeTimes->{{3.6183055870000877`*^9, 3.6183055904700875`*^9}, {
   3.64103925091654*^9, 3.6410392535312786`*^9}, {3.6410408967442007`*^9, 
   3.641040903246245*^9}, 
   3.6410412252492156`*^9},ExpressionUUID->"4b7fd149-694a-48ae-bf3c-\
8378f55130bd"],

Cell[CellGroupData[{

Cell["Assigning deficits ", "Section",
 CellChangeTimes->{{3.618238956471207*^9, 3.618238957751335*^9}, {
   3.6416378467382174`*^9, 3.641637849466217*^9}, {3.641839516752882*^9, 
   3.6418395237685833`*^9}, {3.6418395964988556`*^9, 3.641839604659672*^9}, 
   3.641852170600978*^9},ExpressionUUID->"639f3dae-f34b-4d27-be77-\
15650f409c4f"],

Cell[CellGroupData[{

Cell["Importing CFS data", "Subsection",
 CellChangeTimes->{{3.641852243859517*^9, 
  3.6418522504584017`*^9}},ExpressionUUID->"18a59eda-59a3-4aa3-a32b-\
b3c74321c543"],

Cell["\<\
The n-th row in the beaCfs data (n=1 to 3111) has two elements: the CFS \
number F and the county number C. Here I generate a list of 123 elements; the \
k-th element contains the list of counties belonging to the k-th CFS area: \
the set of instructions in the \[OpenCurlyDoubleQuote]table\
\[CloseCurlyDoubleQuote] command below say: 1) \[OpenCurlyDoubleQuote]assign \
the county number C (in the second element) to the list number F (in the \
first element); 2) record in which position in this list the county C is \
placed (the first, the second.... in the corresponding CFS); this index is \
necessary to go back from the beaCfs correspondence to the beaCfs file.\
\>", "Text",
 CellChangeTimes->{{3.6181655698925858`*^9, 3.6181656188134775`*^9}, 
   3.6181657207836733`*^9, {3.6181658368572793`*^9, 3.618166006709263*^9}, {
   3.6182232154033065`*^9, 3.618223251398307*^9}, {3.618244112342828*^9, 
   3.6182441947836523`*^9}},ExpressionUUID->"d71a481a-460c-47f9-b3ed-\
9a3452c75b7a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"beaCfsCorr", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "123"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"beaCfsIndex", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"beaCfsCorr", "[", 
         RowBox[{"[", " ", 
          RowBox[{"beaCfs", "[", 
           RowBox[{"[", 
            RowBox[{"n", ",", "1"}], "]"}], "]"}], " ", "]"}], "]"}], "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"beaCfsCorr", "[", 
           RowBox[{"[", " ", 
            RowBox[{"beaCfs", "[", 
             RowBox[{"[", 
              RowBox[{"n", ",", "1"}], "]"}], "]"}], " ", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"beaCfs", "[", 
            RowBox[{"[", 
             RowBox[{"n", ",", "2"}], "]"}], "]"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"beaCfsIndex", "=", 
        RowBox[{"Join", "[", 
         RowBox[{"beaCfsIndex", ",", 
          RowBox[{"{", 
           RowBox[{"Length", "[", 
            RowBox[{"beaCfsCorr", "[", 
             RowBox[{"[", " ", 
              RowBox[{"beaCfs", "[", 
               RowBox[{"[", 
                RowBox[{"n", ",", "1"}], "]"}], "]"}], " ", "]"}], "]"}], 
            "]"}], "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6181647898385878`*^9, 3.6181648347630796`*^9}, {
   3.6181653209856977`*^9, 3.6181653421688156`*^9}, 3.618165477540351*^9, {
   3.6181656354151373`*^9, 3.6181656540399995`*^9}, 3.618165725210116*^9, 
   3.6182441029327335`*^9},
 CellLabel->"In[61]:=",ExpressionUUID->"6924aef2-2045-401f-941f-6016696b42ab"],

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"beaCfsCorr", "[", 
      RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "123"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.618165331621761*^9, 3.6181653557281713`*^9}, {
   3.618165410969695*^9, 3.6181654508506823`*^9}, {3.618165673583954*^9, 
   3.6181657171683116`*^9}, 3.6182233553763065`*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"bc012d3c-2e54-4541-8119-dd6f52b976de"],

Cell["\<\
Importing CFS trade data: sales from a CFS origin (row) to any CFS \
destination (column)\
\>", "Text",
 CellChangeTimes->{{3.618168879319495*^9, 3.618168888399403*^9}, {
  3.6182390319057503`*^9, 
  3.6182390480423636`*^9}},ExpressionUUID->"d77dbc6a-3e46-4364-86da-\
17cc54896aa8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cfsData", "=", 
   RowBox[{
   "Import", "[", "\"\<simulation inputs\\\\bilateral_cfs_trade.csv\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "cfsData", "]"}]}], "Input",
 CellChangeTimes->{{3.61816890526709*^9, 3.6181689309456573`*^9}, {
  3.6181689722927914`*^9, 3.6181689789054527`*^9}, {3.641637857426217*^9, 
  3.641637858043217*^9}, {3.641812231850866*^9, 3.641812234297866*^9}, {
  3.6418390216293745`*^9, 3.6418390221494265`*^9}, {3.7344599918747063`*^9, 
  3.7344599943616953`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"4dc575e7-708d-4249-b15b-42665184a1c7"],

Cell["Statistics on CFS deficits as a share of expenditure;", "Text",
 CellChangeTimes->{{3.6183097640800877`*^9, 3.6183097760300875`*^9}, {
  3.6193715808665047`*^9, 3.619371608634281*^9}, {3.619371748717288*^9, 
  3.619371750588475*^9}},ExpressionUUID->"2e3e2131-9d9f-4b00-b89f-\
e8a125435de4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"defExpenditure", "=", 
   FractionBox[
    RowBox[{
     RowBox[{"Total", "[", "cfsData", "]"}], "-", 
     RowBox[{"Total", "[", 
      RowBox[{"cfsData", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]}], 
    RowBox[{"Total", "[", "cfsData", "]"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"defExpenditure", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", "defExpenditure", "]"}], ",", 
     RowBox[{"Quantile", "[", 
      RowBox[{"defExpenditure", ",", "0.999"}], "]"}], ",", 
     FractionBox[
      RowBox[{"Quantile", "[", 
       RowBox[{"defExpenditure", ",", "0.999"}], "]"}], "10"]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Distribution of CFS deficits as share of total expenditure\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Mean: \>\"", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Mean", "[", "defExpenditure", "]"}], ",", "0.001"}], "]"}], 
    ",", "\"\<; Min: \>\"", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Min", "[", "defExpenditure", "]"}], ",", "0.001"}], "]"}], 
    ",", "\"\<; Max: \>\"", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Max", "[", "defExpenditure", "]"}], ",", "0.001"}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"\"\<quantile\>\"", ",", "\"\<CFS deficit\>\""}], "}"}], "}"}], 
    ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"q", ",", 
        RowBox[{"Quantile", "[", 
         RowBox[{
          RowBox[{"Round", "[", 
           RowBox[{"defExpenditure", ",", "0.001"}], "]"}], ",", "q"}], 
         "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"q", ",", 
        RowBox[{"{", 
         RowBox[{
         "0.01", ",", "0.05", ",", "0.10", ",", "0.50", ",", "0.90", ",", 
          "0.95", ",", "0.99"}], "}"}]}], "}"}]}], "]"}]}], "]"}], "//", 
  "TableForm"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6183097788900876`*^9, 3.6183099350600877`*^9}, {
  3.619371667967214*^9, 3.619371684637881*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"e71a7c63-4d3e-4abc-9a52-c5ad7a333d1d"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.5319999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.5319999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-1.1450712957222566`, 0}, {-1.0498392021238547`, 1.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{21.350480384307474`, 36.85157216682438}, {
          91.87439210847265, 100.96535391600987`}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-1.0498392021238547`, 0}, {-0.9546071085254527, 1.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{36.35157216682438, 51.85266394934129}, {
          91.87439210847265, 100.96535391600987`}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{-0.5736787341318448, 0}, {-0.4784466405334428, 2.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{111.357031079409, 126.85812286192592`}, {
          83.28343030093541, 100.96535391600987`}}],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.4784466405334428, 0}, {-0.3832145469350408, 3.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{126.35812286192592`, 141.85921464444283`}, {
          74.69246849339818, 100.96535391600987`}}],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.3832145469350408, 0}, {-0.28798245333663886`, 4.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{141.35921464444283`, 156.86030642695977`}, {
          66.10150668586095, 100.96535391600987`}}],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.28798245333663886`, 0}, {-0.19275035973823687`, 
           7.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{156.36030642695977`, 171.86139820947668`}, {
          40.32862126324926, 100.96535391600987`}}],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.19275035973823687`, 0}, {-0.0975182661398349, 17.},
            "RoundingRadius" -> 0]},
         ImageSizeCache->{{171.36139820947668`, 
          186.8624899919936}, {-45.58099681212305, 100.96535391600987`}}],
        StatusArea[#, 17]& ,
        TagBoxNote->"17"],
       StyleBox["17", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[17, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.0975182661398349, 0}, {-0.0022861725414329227`, 
           20.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{186.3624899919936, 
          201.86358177451052`}, {-71.35388223473471, 100.96535391600987`}}],
        StatusArea[#, 20]& ,
        TagBoxNote->"20"],
       StyleBox["20", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[20, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.0022861725414329227`, 0}, {0.09294592105696906, 
           23.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{201.36358177451052`, 
          216.86467355702746`}, {-97.1267676573464, 100.96535391600987`}}],
        StatusArea[#, 23]& ,
        TagBoxNote->"23"],
       StyleBox["23", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[23, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.09294592105696906, 0}, {0.18817801465537104`, 16.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{216.36467355702746`, 
          231.86576533954437`}, {-36.990035004585806`, 100.96535391600987`}}],
        StatusArea[#, 16]& ,
        TagBoxNote->"16"],
       StyleBox["16", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[16, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.18817801465537104`, 0}, {0.283410108253773, 5.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{231.36576533954437`, 246.86685712206128`}, {
          57.51054487832373, 100.96535391600987`}}],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.283410108253773, 0}, {0.378642201852175, 10.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{246.36685712206128`, 261.8679489045782}, {
          14.555735840637581`, 100.96535391600987`}}],
        StatusArea[#, 10]& ,
        TagBoxNote->"10"],
       StyleBox["10", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[10, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.378642201852175, 0}, {0.47387429545057697`, 6.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{261.3679489045782, 276.86904068709515`}, {
          48.919583070786494`, 100.96535391600987`}}],
        StatusArea[#, 6]& ,
        TagBoxNote->"6"],
       StyleBox["6", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[6, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.47387429545057697`, 0}, {0.5691063890489789, 3.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{276.36904068709515`, 291.87013246961203`}, {
          74.69246849339818, 100.96535391600987`}}],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.5691063890489789, 0}, {0.6643384826473809, 3.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{291.37013246961203`, 306.87122425212897`}, {
          74.69246849339818, 100.96535391600987`}}],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.6643384826473809, 0}, {0.759570576245783, 1.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{306.37122425212897`, 321.8723160346459}, {
          91.87439210847265, 100.96535391600987`}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-1.1869734169055535`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox[
   "\"Distribution of CFS deficits as share of total expenditure\"", 
    TraditionalForm],
  PlotRange->{{-1.1450712957222566`, 0.9500347634425869}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.734503252662399*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"faae7866-3a82-495c-b2c3-836309ddc6d1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean: \"\>", "\[InvisibleSpace]", "0.033`", 
   "\[InvisibleSpace]", "\<\"; Min: \"\>", "\[InvisibleSpace]", 
   RowBox[{"-", "1.145`"}], "\[InvisibleSpace]", "\<\"; Max: \"\>", 
   "\[InvisibleSpace]", "0.9520000000000001`"}],
  SequenceForm[
  "Mean: ", 0.033, "; Min: ", -1.145, "; Max: ", 0.9520000000000001],
  Editable->False]], "Print",
 CellChangeTimes->{3.7345032526723986`*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"46b705b9-9c1d-462d-89d8-c2b1dc57e7b3"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"quantile\"\>", "\<\"CFS deficit\"\>"},
    {"0.01`", 
     RowBox[{"-", "0.984`"}]},
    {"0.05`", 
     RowBox[{"-", "0.395`"}]},
    {"0.1`", 
     RowBox[{"-", "0.275`"}]},
    {"0.5`", "0.019`"},
    {"0.9`", "0.395`"},
    {"0.95`", "0.47800000000000004`"},
    {"0.99`", "0.737`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.734503252682399*^9},
 CellLabel->
  "Out[70]//TableForm=",ExpressionUUID->"de946488-23ca-4e47-8cdf-\
3710910be70d"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["CFS trade deficits and allocation to counties", "Subsection",
 CellChangeTimes->{{3.618239187614319*^9, 3.6182392195755153`*^9}, 
   3.641852223875661*^9},ExpressionUUID->"2e83d430-8f54-46f6-b0e7-\
f77abf51d356"],

Cell["\<\
To allow for county level trade deficits, we compute the deficit at CFS level \
and then we impute this deficit at county-level in proportion to the \
residential income of each county. In general, it is not guaranteed that \
total expenditure is always positive for locations which are running a \
surplus. Hence, we rescale the CFS trade flows to match labor payments.\
\>", "Text",
 CellChangeTimes->{{3.618239226807238*^9, 3.618239283060863*^9}, {
  3.6182393743079867`*^9, 3.6182393970362597`*^9}, {3.618239662555809*^9, 
  3.6182396763721905`*^9}, {3.6182397353990927`*^9, 3.6182397520707593`*^9}, {
  3.618247634246611*^9, 
  3.618247763529538*^9}},ExpressionUUID->"05caad6b-3697-4ec1-bfb3-\
82c860dd2064"],

Cell["\<\
Creating a vector of labor payments to CFS workers (and checking they sum up \
to the total labor payment in the economy)\
\>", "Text",
 CellChangeTimes->{{3.6182483379779773`*^9, 
  3.618248362866466*^9}},ExpressionUUID->"adf1a3bd-d7d4-4d6c-9e75-\
c83ad702c9ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cfsLabExp", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "123"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"cfsLabExp", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"laborIncome", "[", 
        RowBox[{"[", "j", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"beaCfsCorr", "[", 
          RowBox[{"[", "k", "]"}], "]"}]}], "}"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "123"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cfsLabExp", "=", 
   RowBox[{"Total", "[", 
    RowBox[{"cfsLabExp", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Total", "[", "cfsLabExp", "]"}], "-", 
  RowBox[{"Total", "[", "laborIncome", "]"}]}]}], "Input",
 CellChangeTimes->{{3.618248182407422*^9, 3.618248201541335*^9}, {
   3.618248254608641*^9, 3.6182482860807877`*^9}, {3.6182483682940083`*^9, 
   3.618248368573036*^9}, {3.6182497128764534`*^9, 3.6182497289710627`*^9}, {
   3.6418414330174894`*^9, 3.641841434616649*^9}, 3.6418415926244483`*^9},
 CellLabel->"In[71]:=",ExpressionUUID->"53436e92-bd6f-4e40-9ed1-fcdb8dcb3645"],

Cell["\<\
Creating a rescaled CFS trade matrix, where 1) total sales of any (row) \
origin match up to these cfs labor expenditure, keeping the destination \
composition of each origin fixed. The rationale is that total sales of a CFS, \
in a labor-only world, match to total labor payments to workers in the CFS \
(irrespective of their residence). We create a trade structure that matches \
the destination composition and the level of labor payments.\
\>", "Text",
 CellChangeTimes->{{3.618248383147494*^9, 3.618248446588837*^9}, {
  3.618249772522417*^9, 3.618249858669031*^9}, {3.6183068307770877`*^9, 
  3.6183068325870876`*^9}},ExpressionUUID->"18ad39a3-b2bf-4f1d-8d2b-\
35f32dea47e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rescaledCfs", "=", 
   RowBox[{
    FractionBox["cfsData", 
     RowBox[{"Total", "[", 
      RowBox[{"cfsData", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]], "  ", "cfsLabExp"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.618247786062791*^9, 3.618247815227708*^9}, {
  3.6182478536615505`*^9, 3.618247960435227*^9}, {3.618248433189498*^9, 
  3.6182484357267513`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"4e46dce4-374c-4dfb-87ab-537fc306e7dc"],

Cell["\<\
The sum across rows of a given column gives a bea-consistent measure of \
expenditure of the CFS; hence, we can compute the cfs deficit as\
\>", "Text",
 CellChangeTimes->{{3.6182484564688253`*^9, 
  3.6182484944226203`*^9}},ExpressionUUID->"b2c77fea-aa7e-464f-86a0-\
8e45b6efc8e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cfsDeficit", "=", 
   RowBox[{
    RowBox[{"Total", "[", "rescaledCfs", "]"}], "-", 
    RowBox[{"Total", "[", 
     RowBox[{"rescaledCfs", ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6182392883793945`*^9, 3.6182392924097977`*^9}, {
   3.61823935313987*^9, 3.618239363908947*^9}, {3.6182396815087037`*^9, 
   3.618239690853638*^9}, 3.6182397591834707`*^9, 3.61823978928148*^9, 
   3.6182398534899*^9, {3.618248566209798*^9, 3.61824857453063*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"ea94a7ff-4945-4c14-b5bf-642b13082f7b"],

Cell["\<\
This deficit is allocated across all counties that belong to the same CFS in \
proportion to their residential income. 
The table cfsResIncome contains for each CFS, a list of the residential \
incomes of all the counties; the table Increments contains, for each cfs k, a \
list of the addition to the residential income of all the counties in that \
cfs, as implied by the CFS deficit.\
\>", "Text",
 CellChangeTimes->{{3.618239870762627*^9, 3.6182399038829393`*^9}, {
  3.6182421212256513`*^9, 3.6182421549230204`*^9}, {3.6182427224907713`*^9, 
  3.6182427634928713`*^9}, {3.6182428027667985`*^9, 
  3.61824281738226*^9}},ExpressionUUID->"5a3fd6ba-fa85-496c-a8f5-\
33cdcf07adfe"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6418437116143265`*^9, 
  3.6418437546316276`*^9}},ExpressionUUID->"2f788477-b6cc-4a1b-b366-\
1f3185ac1421"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cfsResIncome", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "123"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"cfsResIncome", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"resIncome", "[", 
        RowBox[{"[", "j", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"beaCfsCorr", "[", 
          RowBox[{"[", "k", "]"}], "]"}]}], "}"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "123"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"increments", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"cfsResIncome", "[", 
        RowBox[{"[", "k", "]"}], "]"}], 
       RowBox[{"Total", "[", 
        RowBox[{"cfsResIncome", "[", 
         RowBox[{"[", "k", "]"}], "]"}], "]"}]], 
      RowBox[{"cfsDeficit", "[", 
       RowBox[{"[", "k", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", "123"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resExpenditure", "=", "resIncome"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"resExpenditure", "[", 
      RowBox[{"[", "i", "]"}], "]"}], "=", 
     RowBox[{
      RowBox[{"resExpenditure", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "+", " ", 
      RowBox[{"increments", "[", 
       RowBox[{"[", " ", 
        RowBox[{
         RowBox[{"beaCfs", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
         RowBox[{"beaCfsIndex", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], " ", "]"}], "]"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.618241162368775*^9, 3.6182411865301905`*^9}, {
   3.6182412276182995`*^9, 3.6182412347700143`*^9}, 3.6182412675632935`*^9, 
   3.618242107486277*^9, {3.618242270687596*^9, 3.6182423073242593`*^9}, {
   3.6182423821867447`*^9, 3.618242487494274*^9}, {3.618242521790704*^9, 
   3.6182425734418683`*^9}, {3.618242619385462*^9, 3.6182426411386375`*^9}, {
   3.6182427073572583`*^9, 3.618242712700793*^9}, {3.618242880272548*^9, 
   3.6182429509636164`*^9}, {3.618244214073845*^9, 3.6182443787154913`*^9}, {
   3.6182444245359497`*^9, 3.6182444460061646`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"785a0571-5fa6-49bf-b09b-7456742c5796"],

Cell["\<\
Statistics on county-level deficits, as a share of county residential income\
\>", "Text",
 CellChangeTimes->{{3.618249295268697*^9, 
  3.6182493236785374`*^9}},ExpressionUUID->"bbd204d4-279d-440c-97b4-\
850c3a833ef6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"countyDeficit", "=", 
    RowBox[{
     FractionBox["resExpenditure", "resIncome"], "-", "1"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"countyDeficit", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", "countyDeficit", "]"}], ",", 
     RowBox[{"Quantile", "[", 
      RowBox[{"countyDeficit", ",", "0.999"}], "]"}], ",", 
     FractionBox[
      RowBox[{"Quantile", "[", 
       RowBox[{"countyDeficit", ",", "0.999"}], "]"}], "10"]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Distribution of county deficits as share of residential \
income\>\""}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Mean: \>\"", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Mean", "[", "countyDeficit", "]"}], ",", "0.001"}], "]"}], 
    ",", "\"\<; Min: \>\"", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Min", "[", "countyDeficit", "]"}], ",", "0.001"}], "]"}], ",", 
    "\"\<; Max: \>\"", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Max", "[", "countyDeficit", "]"}], ",", "0.001"}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"\"\<quantile\>\"", ",", "\"\<county deficit\>\""}], "}"}], 
     "}"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"q", ",", 
        RowBox[{"Quantile", "[", 
         RowBox[{
          RowBox[{"Round", "[", 
           RowBox[{"countyDeficit", ",", "0.001"}], "]"}], ",", "q"}], 
         "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"q", ",", 
        RowBox[{"{", 
         RowBox[{
         "0.01", ",", "0.05", ",", "0.10", ",", "0.50", ",", "0.90", ",", 
          "0.95", ",", "0.99"}], "}"}]}], "}"}]}], "]"}]}], "]"}], "//", 
  "TableForm"}]}], "Input",
 CellChangeTimes->{{3.6182444782464867`*^9, 3.6182444841365457`*^9}, {
  3.618244577667481*^9, 3.6182446428781333`*^9}, {3.618248661756352*^9, 
  3.6182486663638124`*^9}, {3.6182487172939053`*^9, 3.618248815369712*^9}, {
  3.618249159450116*^9, 3.6182492071168823`*^9}, {3.618249266886859*^9, 
  3.618249289247095*^9}, {3.6182493797851477`*^9, 3.6182495325904264`*^9}, {
  3.6182495791440816`*^9, 3.618249612465413*^9}, {3.6183085416500874`*^9, 
  3.6183085518600874`*^9}, {3.641839149235134*^9, 3.6418391531065207`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"2cc45bd5-a966-4381-9fc7-636dc54a9277"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.588], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.588], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.4179546052941546, 0}, {-0.3311488271675456, 1.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{27.216444435724043`, 50.81088884902418}, {
          99.01307444718799, 99.73712493162962}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.3311488271675456, 0}, {-0.2443430490409366, 61.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{50.31088884902418, 73.90533326232432}, {
          85.57004538069029, 99.73712493162962}}],
        StatusArea[#, 61]& ,
        TagBoxNote->"61"],
       StyleBox["61", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[61, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.2443430490409366, 0}, {-0.15753727091432757`, 
           155.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{73.40533326232432, 96.99977767562447}, {
          64.50929984317723, 99.73712493162962}}],
        StatusArea[#, 155]& ,
        TagBoxNote->"155"],
       StyleBox["155", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[155, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.15753727091432757`, 0}, {-0.07073149278771856, 
           196.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{96.49977767562447, 120.09422208892461`}, {
          55.32322998107047, 99.73712493162962}}],
        StatusArea[#, 196]& ,
        TagBoxNote->"196"],
       StyleBox["196", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[196, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{-0.07073149278771856, 0}, {0.016074285338890437`, 
           498.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{119.59422208892461`, 
          143.18866650222475`}, {-12.340016320301288`, 99.73712493162962}}],
        StatusArea[#, 498]& ,
        TagBoxNote->"498"],
       StyleBox["498", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[498, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.016074285338890437`, 0}, {0.1028800634654995, 864.},
            "RoundingRadius" -> 0]},
         ImageSizeCache->{{142.68866650222475`, 
          166.2831109155249}, {-94.34249362593725, 99.73712493162962}}],
        StatusArea[#, 864]& ,
        TagBoxNote->"864"],
       StyleBox["864", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[864, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.1028800634654995, 0}, {0.18968584159210844`, 453.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{165.7831109155249, 
          189.37755532882503`}, {-2.2577445204280195`, 99.73712493162962}}],
        StatusArea[#, 453]& ,
        TagBoxNote->"453"],
       StyleBox["453", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[453, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.18968584159210844`, 0}, {0.2764916197187175, 471.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{188.87755532882503`, 
          212.47199974212518`}, {-6.290653240377324, 99.73712493162962}}],
        StatusArea[#, 471]& ,
        TagBoxNote->"471"],
       StyleBox["471", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[471, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.2764916197187175, 0}, {0.36329739784532655`, 331.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{211.97199974212518`, 235.56644415542533`}, {
          25.07641458145065, 99.73712493162962}}],
        StatusArea[#, 331]& ,
        TagBoxNote->"331"],
       StyleBox["331", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[331, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.36329739784532655`, 0}, {0.4501031759719355, 56.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{235.06644415542533`, 258.66088856872545`}, {
          86.69029780289844, 99.73712493162962}}],
        StatusArea[#, 56]& ,
        TagBoxNote->"56"],
       StyleBox["56", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[56, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.4501031759719355, 0}, {0.5369089540985446, 1.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{258.16088856872545`, 281.7553329820256}, {
          99.01307444718799, 99.73712493162962}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.5369089540985446, 0}, {0.6237147322251536, 8.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{281.2553329820256, 304.84977739532576`}, {
          97.4447210560966, 99.73712493162962}}],
        StatusArea[#, 8]& ,
        TagBoxNote->"8"],
       StyleBox["8", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[8, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          
          RectangleBox[{0.7105205103517626, 0}, {0.7973262884783715, 12.}, 
           "RoundingRadius" -> 0]},
         ImageSizeCache->{{327.4442218086259, 351.038666221926}, {
          96.54851911833008, 99.73712493162962}}],
        StatusArea[#, 12]& ,
        TagBoxNote->"12"],
       StyleBox["12", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[12, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.44226022316960517`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox[
   "\"Distribution of county deficits as share of residential income\"", 
    TraditionalForm],
  PlotRange->{{-0.4179546052941546, 0.7973262884783715}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.734503323846554*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"a8588ad6-78c9-450f-aecd-2cf15bf73a0c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean: \"\>", "\[InvisibleSpace]", "0.092`", 
   "\[InvisibleSpace]", "\<\"; Min: \"\>", "\[InvisibleSpace]", 
   RowBox[{"-", "0.418`"}], "\[InvisibleSpace]", "\<\"; Max: \"\>", 
   "\[InvisibleSpace]", "7.1000000000000005`"}],
  SequenceForm[
  "Mean: ", 0.092, "; Min: ", -0.418, "; Max: ", 7.1000000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.7345033238565536`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"6f9a445f-14e6-4821-80af-3b70187a9080"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"quantile\"\>", "\<\"county deficit\"\>"},
    {"0.01`", 
     RowBox[{"-", "0.273`"}]},
    {"0.05`", 
     RowBox[{"-", "0.223`"}]},
    {"0.1`", 
     RowBox[{"-", "0.098`"}]},
    {"0.5`", "0.076`"},
    {"0.9`", "0.28`"},
    {"0.95`", "0.28200000000000003`"},
    {"0.99`", "0.368`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7345033238665533`*^9},
 CellLabel->
  "Out[85]//TableForm=",ExpressionUUID->"dee0b7ff-092e-4a2b-820b-\
36b7f81f2dc1"]
}, Closed]],

Cell["\<\
Comparing the distributions of deficits at cfs and county level\
\>", "Text",
 CellChangeTimes->{{3.618327926321042*^9, 
  3.618327975800042*^9}},ExpressionUUID->"17b1ca8b-f5e4-4475-97ef-\
8881cbb93c9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"QuantilePlot", "[", 
    RowBox[{"defExpenditure", ",", "countyDeficit", ",", 
     RowBox[{"ReferenceLineStyle", "\[Rule]", "Red"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<County deficit quantiles\>\"", ",", 
        "\"\<CFS deficit quantiles\>\""}], "}"}]}], ",", 
     RowBox[{
     "PlotLabel", "\[Rule]", "\"\<Q-Q plot of county vs cfs deficits\>\""}], 
     ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1.2"}], ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1.2"}], ",", "1.2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ParametricPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "x"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1.2"}], ",", "1.2"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"Directive", "[", 
       RowBox[{"Black", ",", "Dashed", ",", "Thin"}], "]"}]}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6183264982040415`*^9, 3.6183265044000416`*^9}, {
   3.6183265566830416`*^9, 3.6183265674110417`*^9}, {3.6183265984260416`*^9, 
   3.618326599489042*^9}, {3.618326646527042*^9, 3.6183267271280417`*^9}, {
   3.618326791021042*^9, 3.618326798732042*^9}, {3.618326868752042*^9, 
   3.6183269694540415`*^9}, {3.6183270004450417`*^9, 3.618327136764042*^9}, {
   3.618327635410042*^9, 3.618327640800042*^9}, {3.618653383309808*^9, 
   3.618653513742244*^9}, 3.6193716989183087`*^9},
 CellLabel->"In[86]:=",ExpressionUUID->"d65b538e-40a2-4e1d-8fb0-2349c6ad4f78"],

Cell[BoxData[
 GraphicsBox[{{{}, {{
      {RGBColor[1, 0, 0], PointSize[0.009166666666666668], AbsoluteThickness[
       1.6], Dashing[Small], 
       LineBox[{{-0.8763664090530131, -1.2}, {-0.7812816178667588, -1.2}}]}, 
      {RGBColor[1, 0, 0], PointSize[0.009166666666666668], AbsoluteThickness[
       1.6], Dashing[Small], 
       LineBox[{{0.9485861426323423, 1.2}, {1.7826384605165098`, 1.2}}]}, {}, 
      {RGBColor[1, 0, 0], PointSize[0.009166666666666668], AbsoluteThickness[
       1.6], Dashing[{0, Small}], 
       LineBox[{{-0.7812816178667588, -1.2}, {0.9485861426323423, 
        1.2}}]}}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
tRU5sqWjEPdZoNj/3DT8CUxxDOU=
        "]]}, {}, {}}}, {}, {}, {}, {}}, {{}, {}, 
    TagBox[
     {GrayLevel[0], Thickness[Tiny], Opacity[1.], Dashing[{Small, Small}], 
      FaceForm[Opacity[0.3]], LineBox[CompressedData["
1:eJxF1P0zE3AcB/B5rJV+yW43xkRGDzRbJ4VLmTvlqaRLmduy1CjKGaZn6lKb
0Nyt1dEUijpXMVYet67SnYbGNOnGmmg7edjkQvR4+Xzfd+973+sfeLuyT+07
aonBYCL/9O8uZfO/TMuXHIftY1J8kC8NZQk2eiO/y2/6tNYTOeXzzhs4InKl
aO/4jCUyfja16nmPGTzXUk3cno5MVcz9WnXPBBbmWEqbtFPgvC9d9EAS8oei
8bs2dybAMx01sREO48izbrbOmWNg14w1aeJ+I7g0uYD3NtYAno+uzeLLRsFV
9SH2FtQRcE4i64SbdBgcuIza3InTg0Pd06tpxTpwapLakT6oBVe49TIyqgbA
PNVTDaFaA7Y/thCs4qjBkZMexgWmClzScmExe4MSvLtbiS9reA3m3KwNj2XJ
wQxyrqdiTx3YiUhr1vBugZWNMplDnDhoyYURaXbSrjowjfBMvtrYBo73qIgT
WrWDzfmRHDNXCSZbO1+U+avAgnjyR9Y5NThaEbUgytOAX/CTH2TnDoCPp+IT
Qlu14IBN6Wmqwzqwlla+NdNKD/ZpZR9hCYbBB+dLesqwI+DSEFLYgYejYCGO
6h7jbQCXm67btquM4Gu5Cd5FJ8fALuJ2mWTyK7inMWOXu3AC7Fh7iJS9cgos
Yzb48zuQdcW+jL7bJrAe+7MmhGEGXx3EcyqZyF5Siqs1G5kXnyB6mYRs9+TV
+eAs5C3786N2CJEFEsJUwBtkCpf6qKQDWR0alvijE9nFdLa/SY1cTx9SbNMj
DxruC/0WkS+3toWLMdPgdcUam+9WyNwA7BnZCuTlhSlsXwLyY/YVJxEROcZP
8v4bCVmi6w6rJyPTGwzWuPXIBr6FnOuFXMh0PN1LQf7/X0G/AZFzQmE=
       "]]},
     Annotation[#, "Charting`Private`Tag$10152#1"]& ], 
    TagBox[
     {GrayLevel[0], Thickness[Tiny], Opacity[1.], Dashing[{Small, Small}], 
      FaceForm[Opacity[0.3]], LineBox[CompressedData["
1:eJxF1P0zE3AcB/B5rJV+yW43xkRGDzRbJ4XrwdwpTyVdytyWpUZRzjA9U5fa
1DR3a3U0haLOVYyVx62rdKehMU26sSbaTh42uRA9nj7f99373vf6B97u7JN7
j1hjMJioP/27G/9lSoFZTDy2l0nxQ744mC1Y74v8rqDx02pv5NTPO27giMgV
4j1j09bI+Jm0yufdFvBscxVxawYyVTn7a8U9M1iUay1r1E2C87900oNJyB8K
x+7a3RkHT7dXx0U6jSHPeNi7Zo2C3TNXpUv6TOCSlOu8t3FG8FxMTTZfPgKu
rAt1tKIOg3OTWMc9ZEPg4CXUpg6cARzmmVFFK9KD05I1zvQBHbjco4eRWdkP
5qmfaglVWrDj0fkQNUcDjprwMs0z1eDi5vMLOetU4F1dKnxp/Wsw52ZNRBxL
AWaQ87yVu2vBLkRak5Z3C6xqkMud4iXb/lsYme4g66wF0wjPFCtNreAEr/J4
kU0b2FIQxbFwVWCyresFeaAaLEggf2Sd1YBjlNHz4nwt+AU/5UFOXj/4WBo+
MaxFBw7akJGuPqQH62hlm7NsDGC/FvZhlmAIfGCuuLsUOwwuCSWF7384Ahbh
qJ6xvkZwmfmafZvaBL6al+hbeGIU7CZpk0snvoK7GzJ3eorGwc41B0k5yyfB
cmZ9IL8dWV/kz+i9bQYbsD+rQxkW8JUBPKeCiewjo7jbspF5CYnil8nIDk9e
nQvJRt60ryB6uwhZICVMBr1BpnCpj4rbkTVh4Uk/OpDdzGf6GjXIdfRB5RYD
8oDxvihgAflSS2uEBDMFXlOktftug8wNwp6WL0NeKkxl+xOQH7Mvu4iJyLEB
0vffSMhSfVd4HRmZXm+0xa1FNvKtFFwfZCHT+VQPBXnxv8C/AZTBQmE=
       "]]},
     Annotation[#, "Charting`Private`Tag$10152#2"]& ]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Epilog->{{}, 
    StyleBox[
     LineBox[{{-0.8763664090530131, -1.33191962071203}, {1.7826384605165098`, 
      2.3571552511877925`}}], 
     Directive[
      Dashing[{0, Small}], 
      AbsoluteThickness[1.6], 
      RGBColor[1, 0, 0]], StripOnInput -> False]},
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"CFS deficit quantiles\"", TraditionalForm], None}, {
     FormBox["\"County deficit quantiles\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox[
   "\"Q-Q plot of county vs cfs deficits\"", TraditionalForm],
  PlotRange->{{-1.2, 1.2}, {-1.2, 1.2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7345033535796175`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"0172089a-5f25-422c-a27b-7624ee358c36"]
}, Closed]],

Cell["Variable including the excess of expenditure over income", "Text",
 CellChangeTimes->{{3.6418391607912893`*^9, 
  3.6418391733125415`*^9}},ExpressionUUID->"47bed05b-e89f-4ae3-ae6f-\
5dbcea4e968f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deficit", "=", 
   RowBox[{"resExpenditure", "-", "resIncome"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6418391891621265`*^9, 3.6418392020344133`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"8acf1f17-e00f-48a6-9fc8-4a90a651f986"],

Cell[BoxData[
 RowBox[{"Min", "[", 
  RowBox[{"resIncome", "+", "deficit"}], "]"}]], "Input",
 CellChangeTimes->{{3.6418439745076127`*^9, 3.6418440783930006`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"e61492ac-8d1c-4942-bb48-74bf5345c4d8"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Estimating productivities and county-level trade flows", "Section",
 CellChangeTimes->{{3.641040980093943*^9, 3.6410409886723995`*^9}, {
  3.641041216670153*^9, 3.641041219909981*^9}, {3.6410615017912493`*^9, 
  3.6410615142154922`*^9}},ExpressionUUID->"eff2d284-177e-4763-b829-\
a60ad1e48554"],

Cell["Computing productivities given data", "Text",
 CellChangeTimes->{{3.7345332362089725`*^9, 
  3.7345332464759874`*^9}},ExpressionUUID->"562d7c6e-267e-4a0c-8f45-\
823e3145658b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prodOnlyTrading", "=", 
   RowBox[{"productivities", "[", 
    RowBox[{
    "workplaceEmp", ",", "workplaceWage", ",", "resExpenditure", ",", 
     "distancesOnlyTrading", ",", "0"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6177972087769513`*^9, 3.617797233078381*^9}, {
   3.6177974243125024`*^9, 3.617797502883359*^9}, {3.6177977053916073`*^9, 
   3.617797735832651*^9}, {3.6177977804621143`*^9, 3.617797793782446*^9}, {
   3.6177978313432016`*^9, 3.617797983592425*^9}, {3.6178237474241247`*^9, 
   3.617823753913767*^9}, {3.617823858216035*^9, 3.617823901896315*^9}, {
   3.61782403518357*^9, 3.6178240386155915`*^9}, {3.617824084027483*^9, 
   3.6178240873971043`*^9}, {3.617824198703818*^9, 3.6178242810255456`*^9}, 
   3.6178244757147937`*^9, {3.6178249649339294`*^9, 3.617825011968231*^9}, 
   3.617825106660838*^9, {3.61782530975854*^9, 3.6178253550612307`*^9}, {
   3.617825488972489*^9, 3.6178255232303085`*^9}, {3.6178257362808743`*^9, 
   3.6178258983035126`*^9}, 3.6178260851459103`*^9, {3.61782621138192*^9, 
   3.6178262381516914`*^9}, {3.617826288025211*^9, 3.6178263067297306`*^9}, {
   3.617826405696765*^9, 3.617826423465279*^9}, {3.617826464665143*^9, 
   3.6178265343975897`*^9}, {3.6178265682966075`*^9, 
   3.6178265712606263`*^9}, {3.617826686826167*^9, 3.6178267212243876`*^9}, {
   3.617826905024766*^9, 3.6178269227620797`*^9}, {3.617827001292983*^9, 
   3.6178270647385893`*^9}, {3.6178274457242317`*^9, 
   3.6178275712426367`*^9}, {3.61782764035108*^9, 3.6178276733608913`*^9}, {
   3.617827726635233*^9, 3.6178278841494427`*^9}, {3.617827915677244*^9, 
   3.617827919078066*^9}, {3.617827988623312*^9, 3.6178279966729636`*^9}, {
   3.617828052443321*^9, 3.617828120319356*^9}, {3.617828182048952*^9, 
   3.617828185683775*^9}, {3.61782822388842*^9, 3.617828293480466*^9}, {
   3.617828450526673*^9, 3.6178284788408546`*^9}, {3.617828522552335*^9, 
   3.617828548479701*^9}, {3.617828686868188*^9, 3.617828697367055*^9}, {
   3.61782885407006*^9, 3.6178289476862597`*^9}, {3.6178289843464947`*^9, 
   3.617829017122305*^9}, {3.6178290596621346`*^9, 3.617829137526971*^9}, {
   3.6178291740188026`*^9, 3.6178291772469263`*^9}, {3.6178292103858767`*^9, 
   3.617829359972374*^9}, 3.6178294078698373`*^9, {3.617829560360586*^9, 
   3.6178295605205708`*^9}, {3.617871077845395*^9, 3.6178711214320745`*^9}, {
   3.6178711588567142`*^9, 3.6178711873268967`*^9}, {3.617872198899781*^9, 
   3.6178722153734865`*^9}, {3.6178722526577263`*^9, 
   3.6178723060412683`*^9}, {3.6178724953796816`*^9, 3.6178725512748404`*^9}, 
   3.6178726327229624`*^9, {3.6178727917503815`*^9, 3.617872809737297*^9}, {
   3.6178728528715734`*^9, 3.617872878065735*^9}, {3.617877553580145*^9, 
   3.6178775592117805`*^9}, {3.617880315250248*^9, 3.617880375217032*^9}, {
   3.61788043106539*^9, 3.6178804408154526`*^9}, {3.6178806754721565`*^9, 
   3.6178806762677617`*^9}, 3.617881285155265*^9, {3.6178815245543995`*^9, 
   3.6178815521353765`*^9}, {3.617881822157507*^9, 3.6178818642465773`*^9}, 
   3.617881960967197*^9, 3.6178820641462584`*^9, {3.6178821627700906`*^9, 
   3.6178822084471836`*^9}, {3.6180524178059196`*^9, 
   3.6180524443885775`*^9}, {3.6180526019123287`*^9, 
   3.6180526057207093`*^9}, {3.6180528493110657`*^9, 
   3.6180529111842527`*^9}, {3.618052946002734*^9, 3.6180529469528294`*^9}, {
   3.618053031029236*^9, 3.618053045691702*^9}, {3.6180533926953993`*^9, 
   3.618053444849614*^9}, {3.618053477026831*^9, 3.6180534794080696`*^9}, {
   3.6180536325183787`*^9, 3.6180536423243594`*^9}, {3.6180539361567397`*^9, 
   3.6180539445575795`*^9}, 3.618054093824505*^9, {3.6180542098081017`*^9, 
   3.61805421088721*^9}, {3.618054357625882*^9, 3.6180544433504543`*^9}, {
   3.6180544875988784`*^9, 3.6180544936134796`*^9}, 3.6180545946515827`*^9, {
   3.618054645081625*^9, 3.6180546470668235`*^9}, {3.6180546925703735`*^9, 
   3.618054742409357*^9}, {3.6180547806281786`*^9, 3.6180547812592416`*^9}, {
   3.618054832390354*^9, 3.618054845677683*^9}, {3.6180548816722817`*^9, 
   3.6180548895040646`*^9}, {3.6180549208401985`*^9, 3.61805492766088*^9}, {
   3.618054969433057*^9, 3.6180549700551195`*^9}, {3.6180552805081615`*^9, 
   3.618055320558166*^9}, {3.618056836927788*^9, 3.6180568377878737`*^9}, {
   3.6180568964197364`*^9, 3.6180569119802923`*^9}, {3.6180570542375164`*^9, 
   3.618057103318424*^9}, {3.618057242961387*^9, 3.6180572947725677`*^9}, {
   3.6180574082059097`*^9, 3.6180574106751566`*^9}, {3.618057552895377*^9, 
   3.6180575592880163`*^9}, {3.6180578621803026`*^9, 3.618057865492634*^9}, {
   3.618058012375321*^9, 3.618058073833466*^9}, {3.6180583746315427`*^9, 
   3.6180583802201014`*^9}, {3.6180590043044405`*^9, 
   3.6180590093414326`*^9}, {3.618059077891183*^9, 3.618059177891183*^9}, {
   3.6180656290869865`*^9, 3.618065660112088*^9}, 3.6180658919682717`*^9, {
   3.6180659960796824`*^9, 3.6180659977428484`*^9}, 3.618068358435894*^9, {
   3.6180685965947075`*^9, 3.618068599258974*^9}, {3.618068658597907*^9, 
   3.618068709181965*^9}, {3.6180687553985863`*^9, 3.6180687563126774`*^9}, {
   3.6180688382068663`*^9, 3.618068906487694*^9}, {3.618068940380082*^9, 
   3.6180689699130354`*^9}, {3.618069040850128*^9, 3.6180690887629194`*^9}, {
   3.6180692005430965`*^9, 3.6180692417102127`*^9}, {3.6180693235033913`*^9, 
   3.6180693239984407`*^9}, {3.6180695524592843`*^9, 3.618069588178856*^9}, 
   3.6180697067337103`*^9, {3.618069737763813*^9, 3.6180697542594624`*^9}, {
   3.618070284011432*^9, 3.61807029259229*^9}, {3.61807042719975*^9, 
   3.6180704560316324`*^9}, 3.61814191528716*^9, {3.6181420193665667`*^9, 
   3.618142024590089*^9}, {3.6181421374593744`*^9, 3.618142184038032*^9}, 
   3.6181423288665133`*^9, {3.618142693880011*^9, 3.6181427103766603`*^9}, {
   3.6181427544420667`*^9, 3.6181427546730895`*^9}, {3.6181540248179913`*^9, 
   3.6181540473192415`*^9}, {3.6181541653930473`*^9, 
   3.6181542200575137`*^9}, {3.6181544454340487`*^9, 
   3.6181544897444797`*^9}, {3.6182208944676356`*^9, 
   3.6182208972739162`*^9}, {3.6182504317303314`*^9, 
   3.6182504420793667`*^9}, {3.6182505172258806`*^9, 
   3.6182505191770754`*^9}, {3.618250636463803*^9, 3.6182506381079674`*^9}, 
   3.6183055095200877`*^9, {3.6410305813442807`*^9, 3.641030581857332*^9}, {
   3.641031512927247*^9, 3.641031546176572*^9}, {3.6410315882187757`*^9, 
   3.641031599337888*^9}, {3.6410316585238056`*^9, 3.641031690228976*^9}, {
   3.641032670816886*^9, 3.641032711342551*^9}, {3.6410340748623424`*^9, 
   3.6410340760363503`*^9}, {3.641034872766431*^9, 3.641034880490481*^9}, {
   3.641037680928957*^9, 3.6410376849627833`*^9}, {3.6411183893346567`*^9, 
   3.641118398462569*^9}, {3.6411184545671787`*^9, 3.641118456591381*^9}, {
   3.641118691734893*^9, 3.6411186935260725`*^9}, {3.641120135376243*^9, 
   3.6411201361283183`*^9}, {3.6411201848571906`*^9, 
   3.6411201913368387`*^9}, {3.6411202826439686`*^9, 
   3.6411202835080547`*^9}, {3.64112063069477*^9, 3.641120631053806*^9}, {
   3.641120763482047*^9, 3.641120763921091*^9}, {3.641120842027901*^9, 
   3.6411208729989977`*^9}, {3.6411209576394615`*^9, 3.641120959190616*^9}, {
   3.641122570460727*^9, 3.641122589645645*^9}, {3.6411234977604475`*^9, 
   3.641123498272499*^9}, 3.641124378130476*^9, {3.6411244207637386`*^9, 
   3.641124422513914*^9}, {3.641126386778321*^9, 3.6411264164442873`*^9}, 
   3.6412520569510965`*^9, {3.641635517220217*^9, 3.641635519626217*^9}, {
   3.642056798118387*^9, 3.6420568062423873`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"872cca61-fcfb-4b73-9afe-625c7391f112"],

Cell["Trade flows based on those productivities", "Text",
 CellChangeTimes->{{3.6410406474310894`*^9, 
  3.641040655110857*^9}},ExpressionUUID->"17f023e2-fa2e-458d-a59c-\
db90a156d9d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Pi]niOnlyTrading", ",", "tradeOnlyTrading"}], "}"}], "=", 
    RowBox[{"trade", "[", 
     RowBox[{
     "prodOnlyTrading", ",", "workplaceEmp", ",", "workplaceWage", ",", 
      "resExpenditure", ",", "distancesOnlyTrading"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.641635530945217*^9, 3.6416355331212173`*^9}, 
   3.6420568017663875`*^9},
 CellLabel->"In[90]:=",ExpressionUUID->"66022cea-6bb0-453f-bb0f-9a696b8ae66f"],

Cell["\<\
Testing trade shares sum to 1 by column and markets are clearing\
\>", "Text",
 CellChangeTimes->{{3.6410412384725013`*^9, 3.6410412526195946`*^9}, {
  3.641041283300195*^9, 3.6410412878282247`*^9}, {3.6412131918359737`*^9, 
  3.6412131940111914`*^9}},ExpressionUUID->"37ad96e7-959d-4a01-bbf3-\
1d87709d69e2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", 
    RowBox[{"Total", "[", "\[Pi]niOnlyTrading", "]"}], "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Total", "[", "\[Pi]niOnlyTrading", "]"}], "]"}]}], 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", 
    FractionBox[
     RowBox[{"Total", "[", "tradeOnlyTrading", "]"}], "resExpenditure"], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    FractionBox[
     RowBox[{"Total", "[", "tradeOnlyTrading", "]"}], "resExpenditure"], 
    "]"}]}], "}"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.641041260634447*^9, 3.6410413273032813`*^9}, {
  3.6416414441072173`*^9, 3.641641451649217*^9}, {3.6420568150723877`*^9, 
  3.6420568173673873`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"46562443-8a89-4535-a748-c5a7c6ec9b03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9999999999999915`", ",", "1.0000000000000075`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6410413491534224`*^9, 3.6411485022835183`*^9, 
  3.641229817500374*^9, 3.641252377316097*^9, 3.641253093900097*^9, 
  3.641638657020217*^9, 3.6418126411298656`*^9, 3.6418527728466988`*^9, 
  3.6418939120406666`*^9, 3.641922277652076*^9, 3.6420568501903877`*^9, 
  3.6421550011533422`*^9, 3.6527019729047337`*^9, 3.6527022651691628`*^9, 
  3.6529662982244873`*^9, 3.6532121860290155`*^9, 3.6538142328846846`*^9, 
  3.65424970471047*^9, 3.6544532041863213`*^9, 3.6766426546236057`*^9, 
  3.6766530217623687`*^9, 3.6766538153434796`*^9, 3.676655042298237*^9, 
  3.6769006776069717`*^9, 3.67706719137741*^9, 3.6805183496705914`*^9, 
  3.6805261096753535`*^9, 3.680526417972931*^9, 3.681669094015277*^9, 
  3.703863275783052*^9, 3.7038648289274054`*^9, 3.704455574840822*^9, 
  3.708254200437041*^9, 3.73450343689678*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"25d8f95f-946f-4ba2-b898-38c6a716374c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9999999999999889`", ",", "1.0000000000000078`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6410413491534224`*^9, 3.6411485022835183`*^9, 
  3.641229817500374*^9, 3.641252377316097*^9, 3.641253093900097*^9, 
  3.641638657020217*^9, 3.6418126411298656`*^9, 3.6418527728466988`*^9, 
  3.6418939120406666`*^9, 3.641922277652076*^9, 3.6420568501903877`*^9, 
  3.6421550011533422`*^9, 3.6527019729047337`*^9, 3.6527022651691628`*^9, 
  3.6529662982244873`*^9, 3.6532121860290155`*^9, 3.6538142328846846`*^9, 
  3.65424970471047*^9, 3.6544532041863213`*^9, 3.6766426546236057`*^9, 
  3.6766530217623687`*^9, 3.6766538153434796`*^9, 3.676655042298237*^9, 
  3.6769006776069717`*^9, 3.67706719137741*^9, 3.6805183496705914`*^9, 
  3.6805261096753535`*^9, 3.680526417972931*^9, 3.681669094015277*^9, 
  3.703863275783052*^9, 3.7038648289274054`*^9, 3.704455574840822*^9, 
  3.708254200437041*^9, 3.7345034371367803`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"9bbba99d-ff2b-4bff-933a-e87d048fff41"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Comparing model-generated and CFS data", "Section",
 CellChangeTimes->{{3.6410487999602337`*^9, 3.6410488026965075`*^9}, {
  3.641055867014124*^9, 
  3.6410558874632564`*^9}},ExpressionUUID->"ed517d28-cafe-409b-b476-\
79e9ed7ba39a"],

Cell[CellGroupData[{

Cell["Computing model-generated trade flows and shares", "Subsection",
 CellChangeTimes->{{3.618254443096428*^9, 3.6182544455286713`*^9}, {
  3.6410561871120067`*^9, 
  3.64105620836876*^9}},ExpressionUUID->"9eccd7a3-d383-487b-960b-\
d791001d28ac"],

Cell["\<\
Computing sales of any origin county to any CFS, using the onlyTrading \
settings.\
\>", "Text",
 CellChangeTimes->{{3.618167136025183*^9, 3.6181671493695173`*^9}, {
  3.6182233869493065`*^9, 3.6182233871893063`*^9}, {3.6410572840519667`*^9, 
  3.641057305255503*^9}},ExpressionUUID->"62d4e2d6-e704-4404-ae2e-\
e3e541d05bf0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"countyToCfsSales", "=", 
   RowBox[{"Parallelize", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", " ", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{
        "for", " ", "each", " ", "row", " ", "origin", " ", "county", " ", 
         "i"}], "=", "1"}], ",", "ncounties"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", " ", 
       RowBox[{"(*", 
        RowBox[{
        "for", " ", "each", " ", "cfs", " ", "k", " ", "in", " ", "the", " ", 
         "correspondence", " ", "list"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"tradeOnlyTrading", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", 
             RowBox[{"beaCfsCorr", "[", 
              RowBox[{"[", "k", "]"}], "]"}]}], "}"}]}], "]"}], "]"}], ",", 
        " ", 
        RowBox[{"(*", 
         RowBox[{"sum", " ", "of", " ", "county", " ", 
          RowBox[{"i", "'"}], "s", " ", "sales", " ", "to", " ", "counties", 
          " ", "in", " ", "CFS", " ", "k"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"k", ",", "1", ",", "123"}], "}"}]}], "]"}], " ", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "countyToCfsSales", "]"}]}], "Input",
 CellChangeTimes->{{3.618166864974081*^9, 3.618166998529435*^9}, {
  3.6181670879103723`*^9, 3.6181670882514067`*^9}, {3.618167161604741*^9, 
  3.6181671670982904`*^9}, {3.6182233973823066`*^9, 3.6182234084373064`*^9}, {
  3.6182541481309347`*^9, 3.6182541580749288`*^9}, {3.6410562282790937`*^9, 
  3.6410562291994996`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"5cae43fa-9c02-470b-9594-5760a0cf4a7d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3111", ",", "123"}], "}"}]], "Output",
 CellChangeTimes->CompressedData["
1:eJwVz2tIUwEYxvHjzGbMzDTLFLUNkwrTEre1Ya13TYmlUWJrlaiImtBKtDKZ
XTBKpfASfnDedStTmFpWaqWwHEIYw4NCRBcIkiXndZpYCW7N3vPh4ffx4S/O
K84o8GEYJp0WoFYeiPjDwZuHrrcyUufsGEwhtfv0rRdWObiz8F7l4+agZLk+
K4nc/mJRkUsaq8vGGQ8HcdbwTgmpvr8JeXukNQt7vRwcejeqSiG1mtpFXiZW
GHl5nYOX9vkzvPrpSx4z2XY29oGFLJI2xzwm5Q3xP3iDFGXfn5DWgyu1PWTY
PZQ+JW3axsl+stB5w8WrEQ2nDZDKJOXgIGmeHNn9jGyJOOnnJSdS+gwVDEJq
c2ukgyyZCsmZJq8NnahlSWO+JiFYgNDANpaHkoGFUcKdZHylIMNASgfmO4x+
CEE/E7TOjQg6TVOOTIiQ2NbUdJiMMti7r25GMFd88R7bglBaXcn+JXUTbqY7
COERmzzFa0q7WzFGlqd/+zhOblvn+kO3IhQqZj2810vXvK4QBN/iuUX5DoTk
oWVdXDjC58CaKvsuhJmLme2/yE+/M0+HiRH2WJx1xyUIqir/GCt55Oh55ivZ
tfRKsiajniXHilGOIJl1+K6QucHP3WEKhA3ZXe0uMita4j6lRFjrreu35COw
H4bHeskimym6jxzqXBrlnZw51ycuQOgZsa6WkomvTeH+BoTb9uw5EakvE4gC
yK68W/8UV+ivpd1bZ0LYb1Tb6knWc1PIzCL8B9mNP5E=
  "],
 CellLabel->"Out[94]=",ExpressionUUID->"87b3e542-18c7-48da-8a2a-c915db899386"]
}, Closed]],

Cell["\<\
Aggregating sales across all origin counties belonging to the same CFS\
\>", "Text",
 CellChangeTimes->{{3.6181672025938396`*^9, 
  3.6181672272583055`*^9}},ExpressionUUID->"a4428f22-7974-4c64-aa9c-\
f9e646ea034e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cfsToCfsSales", "=", 
    RowBox[{"Parallelize", "[", 
     RowBox[{"Table", "[", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"for", " ", "each", " ", "origin", " ", "cfs", " ", "k"}], 
        ","}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", " ", 
        RowBox[{"(*", 
         RowBox[{
         "for", " ", "each", " ", "destination", " ", "cfs", " ", "n"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"countyToCfsSales", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "n"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"beaCfsCorr", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], "}"}]}], "]"}], "]"}], " ", 
         ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "sum", " ", "of", " ", "sales", " ", "from", " ", "all", " ", 
            "the", " ", "counties", " ", "in", " ", "origin", " ", "CFS", " ",
             "area", " ", "k", " ", "to", " ", "dest", " ", "CFS", " ", "n"}],
            ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", "123"}], "}"}]}], "]"}], " ", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "123"}], "}"}]}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "cfsToCfsSales", "]"}]}], "Input",
 CellChangeTimes->{{3.6181672369792776`*^9, 3.618167272420821*^9}, {
   3.618167330933672*^9, 3.6181674840409813`*^9}, {3.6181675831238885`*^9, 
   3.618167742343809*^9}, {3.618167804801054*^9, 3.6181678339699707`*^9}, {
   3.6181680514817195`*^9, 3.618168054095981*^9}, {3.6182541685619774`*^9, 
   3.6182541817873*^9}, 3.641056346716462*^9},
 CellLabel->"In[95]:=",ExpressionUUID->"a8747d50-3cc7-4c58-bb3e-01d573c83bd0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"123", ",", "123"}], "}"}]], "Output",
 CellChangeTimes->{{3.6181674804636235`*^9, 3.618167484577035*^9}, 
   3.6181678358771615`*^9, 3.618168058223394*^9, 3.6182235877303066`*^9, {
   3.6182541908122025`*^9, 3.618254207413862*^9}, 3.619347675653162*^9, 
   3.621259779621403*^9, 3.6213644533743105`*^9, 3.6214542883394494`*^9, 
   3.621783020489038*^9, 3.6218524096905165`*^9, 3.621853017043517*^9, 
   3.6229159410785484`*^9, 3.6229719026375866`*^9, 3.6229733012575865`*^9, 
   3.623577833183485*^9, 3.6235782881869807`*^9, 3.6236881649012136`*^9, 
   3.6236893059692826`*^9, 3.6236905336868596`*^9, 3.6236920615751457`*^9, 
   3.623694088366933*^9, 3.62369547691859*^9, 3.623696820780875*^9, 
   3.623710256361875*^9, 3.623710572136875*^9, 3.623711334566875*^9, 
   3.623714176282875*^9, 3.623715122912875*^9, 3.623874607198869*^9, 
   3.624131433140765*^9, 3.6242987376214905`*^9, 3.6243033534296675`*^9, 
   3.624305777967184*^9, 3.6249644749223433`*^9, 3.624971205508415*^9, 
   3.624978494338993*^9, 3.6251490777138324`*^9, 3.6267512285440993`*^9, 
   3.627496018359869*^9, 3.6276600295608416`*^9, 3.6276748180186806`*^9, 
   3.6309312198465214`*^9, 3.631882236177374*^9, 3.6322484578887835`*^9, 
   3.6325970051910048`*^9, 3.632598615693039*^9, 3.632653281605403*^9, 
   3.632656060363251*^9, 3.6328359568341866`*^9, 3.63283658823632*^9, 
   3.634327549092472*^9, 3.6360518369361305`*^9, 3.637600958430695*^9, 
   3.641056409202673*^9, 3.6411486545276685`*^9, 3.641229967984421*^9, 
   3.641853053478697*^9, 3.6420569929263873`*^9, 3.642155011276342*^9, 
   3.652702487015503*^9, 3.652966303715495*^9, 3.6532121916530247`*^9, 
   3.653814238734695*^9, 3.6542497102124777`*^9, 3.6544532103063297`*^9, 
   3.676642669280628*^9, 3.6766530311823816`*^9, 3.676653822183489*^9, 
   3.676655048968246*^9, 3.6769006842469807`*^9, 3.67706719887742*^9, 
   3.680518358134609*^9, 3.680526116242366*^9, 3.6805264253319488`*^9, 
   3.681669101116291*^9, 3.703863286435067*^9, 3.703864835347416*^9, 
   3.734503489273872*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"3fef97bd-1ea0-48a4-9417-5f0e72e5d087"]
}, Closed]],

Cell["\<\
Explore different portions of the data (left matrix) and model predictions \
(right matrix), to check zeros (Note: data needs to be loaded or it shows \
errors).\
\>", "Text",
 CellChangeTimes->{{3.6181693790954676`*^9, 3.6181694014247007`*^9}, {
  3.6183047224440875`*^9, 3.6183047242140875`*^9}, {3.7339325111640005`*^9, 
  3.733932531952035*^9}, {3.734503465599829*^9, 3.7345034672108316`*^9}, {
  3.7345035358299503`*^9, 
  3.7345035619299946`*^9}},ExpressionUUID->"fe8d563b-5b0e-4598-9309-\
b17866d1a3ce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"cfsData", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"min", ";;", "max"}], ",", 
         RowBox[{"min", ";;", "max"}]}], "]"}], "]"}], "//", "MatrixForm"}], 
     ",", 
     RowBox[{
      RowBox[{"Round", "[", 
       RowBox[{
        RowBox[{"cfsToCfsSales", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"min", ";;", "max"}], ",", 
           RowBox[{"min", ";;", "max"}]}], "]"}], "]"}], ",", "1"}], "]"}], "//",
       "MatrixForm"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"min", ",", "1"}], "}"}], ",", "1", ",", "123", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"max", ",", "2"}], "}"}], ",", "min", ",", "123", ",", "1"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.618168984088971*^9, 3.6181691441689777`*^9}, {
  3.618169219232483*^9, 3.618169289368496*^9}, {3.618170348422391*^9, 
  3.618170352541803*^9}},ExpressionUUID->"693d5d2e-bd4c-40be-a42e-\
d045d52e6437"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`max$$ = 1, $CellContext`min$$ = 1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`min$$], 1}, 1, 123, 1}, {{
       Hold[$CellContext`max$$], 2}, 
      Dynamic[$CellContext`min$$], 123, 1}}, Typeset`size$$ = {
    434., {2., 9.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`min$4537$$ = 
    0, $CellContext`max$4538$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`max$$ = 2, $CellContext`min$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`min$$, $CellContext`min$4537$$, 0], 
        Hold[$CellContext`max$$, $CellContext`max$4538$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> {
        MatrixForm[
         Part[$CellContext`cfsData, 
          Span[$CellContext`min$$, $CellContext`max$$], 
          Span[$CellContext`min$$, $CellContext`max$$]]], 
        MatrixForm[
         Round[
          Part[$CellContext`cfsToCfsSales, 
           Span[$CellContext`min$$, $CellContext`max$$], 
           Span[$CellContext`min$$, $CellContext`max$$]], 1]]}, 
      "Specifications" :> {{{$CellContext`min$$, 1}, 1, 123, 
         1}, {{$CellContext`max$$, 2}, 
         Dynamic[$CellContext`min$$], 123, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{485., {66., 72.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->CompressedData["
1:eJwVz1tIk3EYBvBvY1PZtLIYOanphqwMtQi3pWTrnRm2TjIiZy0N0SKaFhUh
q0UXHbBohmRJbo62+Zni5hpRFlsMjBhihwnlTVCh5fj+bQXWhrlD73fx8OO5
eC4eaesZXTuHoigthtdV9aTuLwPvRBcHjiYYkCkqgLPMwA3KbahE55XC6uOo
QHs3QCUZqNSr7DK0+YuUsM6pnT9L0wzs0HxS16H14tEYa4Nfvr4jw0BqPOsw
q+3gYNKB2lfsvu1EZ83PSlzoVs7TOVZLY963IdQ3NmihUeuuh8phNJbMfeNG
JfzrUdacspl9HjR9SOAdR/+Ym+Ve9KVhgZ9G9xjkHZcoAq5WheQt6lBXtLxH
eyN6ywf0VvzY5tVcAv7X3i4Relo/nS1GudsmdEaUjvTaTXwC8Y97tT+yCNyn
fS3KbOxNmv4adJPZ7DifRyARvpmpXUlgKlgTjqN9fcOcR6sInPUkplg3Diku
+1Fu6Z3ZAJpvtHpE+QSird0p1ldXXJnoGgJHvtp/qdYS2Fk701hWSGD6++i9
yWICsV5i+43SD9bpCqQEth943lMvI7ClSVIyhp60nqI+o6LyiOyfkoDvwtKi
SUVATAt5i2g8vrhcUEWgZCJki6IRQdtyQzX+0fjczjbcW3iBx6gxGCoaQdsW
il+wevbTI9J2AqZrS4lzKMUPFeYYcZ/unheiA1fLhblo8MRkqqqTQF1ROG3p
J7DB2RnsQf8DlVUzhQ==
  "],ExpressionUUID->"cb46ea3f-9a71-49dd-80d0-209316c83456"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"cfsData\\\"}]\\).\"",
   2,1,1,22873014769776572295,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734535918769064*^9},
 CellLabel->"",ExpressionUUID->"98f4eac9-4b4a-4947-9aff-25197e3c530e"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"cfsToCfsSales\\\"}]\\).\"",2,1,2,22873014769776572295,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734535918829064*^9},
 CellLabel->"",ExpressionUUID->"732d272e-0d2e-4531-8d27-73e3c52c36ab"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"cfsData\\\"}]\\).\"",
   2,19,1,22873458546168945925,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734603913644125*^9},
 CellLabel->"",ExpressionUUID->"fe1b9941-f883-42fe-b251-584efdf43ce7"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"cfsToCfsSales\\\"}]\\).\"",2,19,2,22873458546168945925,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734603913691128*^9},
 CellLabel->"",ExpressionUUID->"f4dfc011-9447-4f4e-b762-0e7a75a0446d"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"cfsData\\\"}]\\).\"",
   2,1,1,22873462053314920637,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734604206067851*^9},
 CellLabel->"",ExpressionUUID->"010d20eb-b774-4879-8e88-995e289df386"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"cfsToCfsSales\\\"}]\\).\"",2,1,2,22873462053314920637,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734604206134855*^9},
 CellLabel->"",ExpressionUUID->"40ba729b-7407-440e-bea5-5d24881c7291"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"cfsData\\\"}]\\).\"",
   2,1,1,20239002166763232360,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7346486959775705`*^9},
 CellLabel->"",ExpressionUUID->"d410d6c7-30e2-4702-b66e-e820b49d4395"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"1\\\"}]\\) through \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"cfsToCfsSales\\\"}]\\).\"",2,1,2,20239002166763232360,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.734648696117277*^9},
 CellLabel->"",ExpressionUUID->"441637c8-f392-42cb-bd08-08db4ae6580c"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Comparisons using rescaled CFS data", "Subsection",
 CellChangeTimes->{{3.6182544607921977`*^9, 3.6182544658727055`*^9}, {
  3.6182546672068367`*^9, 
  3.618254668230939*^9}},ExpressionUUID->"d4f3c416-efcd-4732-95a6-\
98f298bbdd87"],

Cell["\<\
Scatter plot of data vs model-predicted shares, using the rescaled CFS data\
\>", "Text",
 CellChangeTimes->{{3.618170329723521*^9, 3.6181703426448135`*^9}, {
  3.618254399479067*^9, 3.618254403919511*^9}, {3.618254744377553*^9, 
  3.6182547453446503`*^9}},ExpressionUUID->"bf607831-e4ef-46c4-a846-\
05376804ab83"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Log", "[", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Flatten", "[", "rescaledCfs", "]"}], ",", 
       RowBox[{"Flatten", "[", "cfsToCfsSales", "]"}]}], "}"}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"_", ",", "Indeterminate"}], "}"}]}], "]"}]}], ";", " ", 
  RowBox[{"data", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "_"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<cfs data\>\"", ",", "\"\<model predictions\>\""}], "}"}]}], 
   ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Predicted vs. actual CFS bilateral trade: trade balance\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.618169430632621*^9, 3.61816947632619*^9}, {
   3.6181695195075073`*^9, 3.618169624525008*^9}, {3.618169658255381*^9, 
   3.6181697368472395`*^9}, {3.618169782386793*^9, 3.618169790017556*^9}, {
   3.6181699061261654`*^9, 3.6181699168762407`*^9}, {3.6181700693944907`*^9, 
   3.618170083569908*^9}, {3.6181701939249425`*^9, 3.6181701988434343`*^9}, {
   3.61817024790234*^9, 3.6181702490844584`*^9}, {3.618170359305479*^9, 
   3.6181703626308117`*^9}, {3.6182237299593067`*^9, 
   3.6182238557723064`*^9}, {3.6182239236333065`*^9, 
   3.6182239494623065`*^9}, {3.618224117769079*^9, 3.618224179705272*^9}, {
   3.6182242175810595`*^9, 3.618224221843486*^9}, {3.6182542426993904`*^9, 
   3.6182542708532057`*^9}, {3.6182543046075807`*^9, 
   3.6182543141855383`*^9}, {3.61825439061018*^9, 3.6182543925063696`*^9}, {
   3.6182546728323994`*^9, 3.6182546765137672`*^9}, {3.618254729274043*^9, 
   3.6182547341945353`*^9}, {3.618257413097068*^9, 3.6182574684270678`*^9}, 
   3.618257540444068*^9, {3.618257584436068*^9, 3.618257584780068*^9}, {
   3.6182578116840677`*^9, 3.6182578429070683`*^9}, {3.6343868862712193`*^9, 
   3.6343868865339828`*^9}, {3.6343869953719406`*^9, 
   3.6343870225054984`*^9}, {3.6343871221287565`*^9, 
   3.6343871243737345`*^9}, {3.6343871623556733`*^9, 
   3.6343871676890726`*^9}, {3.634387232225706*^9, 3.634387233120437*^9}, 
   3.6344080252837563`*^9, {3.6344080612593536`*^9, 3.6344080636905966`*^9}, {
   3.634411789157106*^9, 3.634411791068297*^9}, {3.634412376237808*^9, 
   3.634412377645949*^9}, {3.64105860659223*^9, 3.641058607277298*^9}, 
   3.6410586378293533`*^9, {3.641059095693014*^9, 3.6410590974950266`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"8403877c-4d26-4d19-8ae5-cf03cd3d3c49"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
zNTzzR+Pd2hk9AkrExpDS+cR+l8ZOf+R3wxI8ZTLfCRV4bG8R9hJcOj/nt+9
znZOhEf/1P19R654bLaamFqP+MQdXLJwWLj0zcu4nwNDQitpE7UJy//b36xa
F/fL6ySmzlegous1jTUN/CH1E1KSophpZJzh8lYUXspnzTzaJBH2JTR+S57U
1PUf9O9ZLHv4f/s/r7/ATdf6/+5/SVijO+PA4NR+XiQEBl9/9X/x0PamzN/a
Q3DO/9/fbheL9pcXZaeub1W/x+q7Lj+1vm3mYlNeITa1bg802qYuQ5pan9HN
eeN1RQ6OD6+5HeqkIWdumVN+HBkS4eXy8lXjwqLMurva9qIwvxaJBSZkmHy4
cvPiGzlEzx8K/6EiihlW4TJp6ZJQ8DQ99SO3T8gumKlbWjAqvLRAYbdMHzG3
TBwYLsuJedimWjHBmI5HlWH+V/jTp+6v6hmd36AmPnV9p9W6yx0nh4X/WyfV
XiyQ0hSderzgc5Jjr+bE1OM9rfNaszzHhRN1StXM7eKoIbceuHJzbOpxyqux
NV1Hxaaud9w2edD+ksTU+t99a4vis/+3/xfrAla0B0qhTeon62qYAvRXZ3g+
2k5CdMbRY+f9OPhkqxNkE8HBHJ/YQ/9CxBBC6hmeNYeOVN/Rz4dCaKh+sOzn
mQgWNK6tfjafQ0HmzpcKogSP0/eOSM3JFKCoIfLRki8C9J0Rb3ZWYsLc9Htj
vQobCzi3CzpXM9DPO2V5fz0TiW0hWsGGHPjmd+lJV/IRaVL+/tk0Nkpt3n18
GcGGVPitCG4hHYdr99pozeHgytJ6G9e35cLtv7j/fjRMCO1r7DcGHKbhg9nP
HfIlDATMYnQKZlFh7RIfxNhL6Ip38+gKBxJcusw0Is5TUJsqesh1NwV1sZ+3
xSYw0BSx1l9Th+CVNN6RewQPet3OOPzi/ajwEVmGItCUg/k6rXAfLwoOxurd
7/lGw9oT26nO7j+EoWrp+uRsGjyD7ayvOKhh/48XHxtOTMdLR4qymAIHGXVN
r60Cmci+0L5f3VcO5zL3cMWsFCE37iGds5KJG87aYrcEDHT83trzVEhFg9bp
7w5BdFz97bZ7UpeG/E9fv4pVMbH+0c/EyNvE6wyfHyhZyESvqoeu0FURhQ8t
HQ/E05DOVrDxGGdgXV7iRHsNMZ+c/I+sySNB7UZM0/wCGk7Jsra8ARkaJ2M+
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
MoiWMc/pzaLBUOKbxXI5wvcdK5SZ81wWl9Z0j1YRejD4x39hZgobCn70++JL
VXDmk/D2dwVlhFRTX3/J5KAsjd9tac5DQauGUth5OsJ847o2Z5Lxs9NjmUkT
BYnHKlyV3rDgPF7O52nTYJ7fejZzDgtL7h8RaKTK47DtJrMHAWTo/di0itMq
AzllfrPaIxrexzSyHxF5srn/Z2dIJnPqfPG1k/HhZvJT8XluVNmVJCWJJyIm
yn83SmO04EmatZYC9r9qOGvxrVvo8VfE/cUXMeCWW0EOwUcfLz8Oyx+g45/V
Hc0wgrOZF7dEbJMhY8+0Fy3378qC8v7qc5lGGmLu7vHo+UrGo72rQndtoKJV
ale8+yIiXu2GD6POUtH1QkVqzhgZ2p0zeudepaPldov5MQfivI+jBV2LCF50
U3HOfaiErc+dwzaZKOHdvYiqlQQP5doyKQNH2FP7v/d5mrAWCpA4elDa15+M
J8Orvin8oUzlL6Rk5vXiUdmp8+Rdu+Bw1FgSy5X21Petp4D3Rv3bmk1kyAuz
p/stFIHzcJGYZbzU1P07fh8ul3lCgvNrnYlg/wnhF1OHuTLdJHTUnX4684Ec
TPu2M1ImSBjQ/H3ZqvKL8JaulLrWMmmoRKzoSLCTQEhTzwkqjwxWzC33eRRR
tF1NisgrJU89P8a0dtefBYpYG5KlM1e5UfgrK2Kj2gdZOHnSW59QJSElzC8/
MYMKD+eZ24sIfhcNCXuVlk9BW1OdXhnB354b2O2Vo+SpenQKvJPAqqCgN/hf
euUbCRwvOT82nKGI1BvyRZqyEkTf3nCtXKSIlSm2JiujJeHavjQ2n0ZF4c51
3TnjJNQyJv9eFadN9ZPgaOTdn36yU+f5XZlrLiZKmaqnORHH7C1KFLHoch1L
rksaL42PNtCqaHg98DrJ+bIcunUlPi9MpuHasprvdllEXy+vkdSZxZiKr2sN
dJVCFafyE/5iU7nfOykoylLKrIg+j0o9enIhUW99NwdszUMHhb2H1+3/UCmN
xUVpSSlEHigNAyzf8yRM6izMdq2cRuQzpUhLm4Qu1d2GtyVIePfL7Kb6F8ZU
vNq5008ovpMFBvv0SL/IEGZqzdvxRRI/rCQ2LrrQVSaRelOKqSSB2aHaYzip
AIu9O1/r+8jj1ibTXzMzRfC+iHyh84XCVL8sbzh3dPYl8lQ/HvU4rPtxDQVB
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
jX0lvY3wX4PzZhdbki8Xrg7xk2Fhh31ORpMRC1aqXRbvtjMwr3ztvU1vGFh7
77uHyGoK1j6bZ/YfZWLntxsJw7ZSWNor33pZQgnDF+NSqVNqKJrfv2j8WVUM
qKZMm/NKA87cuJf2tho4u0Z9a7u3OtK5e4o+zVTDfW/bF2IBbMQ/f7v60B2i
f9U7iiN4DHTEDN6f+4KNrj/K0v7bWeh/s2iKbBsLeWJHpriashC7WnDr1R2S
G2sG/JpCmWiRW6G0O/S/eg/svxRe30fh1LaQHX7lsph+7FSNPqn3/453TfPZ
YnomE+52webNmsp4a4Jy0XE0iH6ppwneKmNr+7Knxwj3ZIfJijwRUURdyY97
rkR3JMsS3k+7wYbh+Lxx8t4U1jr0uvIeKmABpqz3H6DD3smw/HANDcuW5eZ8
LCc6e/mT7H4/ksPb1UZnbWDjecAJET0uB2aT76xpEKWwSSFvKMVRAV6HPz4N
cGWg3cS7814NC6eEi5YrdJN9bnjTH/uDgcA4bPEvYaJsSXpdbT8NxhUdFX5x
DER7rwkqzFSEvlSy61ziI1fLqn+eJzxRychbtMCDGrseIXNi5KlwBmqaV0up
rmQjSqlaNiSFgnvTmRNxhDsVHhj+5Ipy0f2ua/PmLA6GoujCCdYcVP00bkz+
y0LvCb0rB61YmFMvvl1clI+uz3M9irQF+FpWvy7kLsnRnzrnTEpURpPW6hm2
u+h4/an/YFgnDZ1T065176ChXF7U+0GDIl7/jt7npvnvPnSsqXrVylB8lu5+
sJCNOYdFChJJHRfEBhxq3c9CzqQz6ZEJFG4/e+z4hcbHu2Ree81eLmYrBsXa
bRTBrcsl7ga75EETHr9/RFkBvLTNo8rED27NGldYdI8Bd90veRbb6OCt+Oxi
4qMMK5HgwuQnTMSOzo8cPqgM6fWyBSPujLH9faw48bYVmdfR1JiJKUWEA6aU
OwVcZsJ89xWbPRwKO7d+d3r7k+jvmuYvasN04hu3pvQdoWG97siqcQlcbHpy
4khMI4XpTzZPE+9ThIF/xvWDbQp4/LPxgFcEA2+2rBw3cS4bTiEObc0RLGx2
nJFtSPZpV2ew3upABcQWK1yvZ9MxTpKVK5lJgdr3JLfGgANTwYKYS0zCeRFM
bakJtDH9Nm//ZGA+UwHJ0jfErdfJwlzZ4O36VmVoNuyuCS2kQ7jVcu7lZYyx
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
svSxek3e4qH5u/i/z6vpaT7V0JSH8j05j3Z/OQw8YRRK3qGP7f/nZbLdkZtp
Y+//2m0Ttk5Baez4SdsOuZVYM3BFe4eBzmU2JqXa0cs62WP7Pce1oSCV5M6W
qHFr++PlUTc1VPtbLA2+X647XBCRR+zh7gcHDjDH5lXymk/T9RxyvmuOwXv7
/t3P7ebaiWEc9EjEikf6MKFHc/fR9uKOrc96V/vxvjhleEzBc8kGNvaI8Eb1
JGgIN5EJSOTKQWFenE8d0a//9de78Tbeat8lkfPh0niP30poDHGfvJLk7EhX
1iE7VQouTp8nd4ZSY/Wgvd5hF7D9v+u/aq7fsdPyv/kbWte7nVFKh8bD6ive
S9io2tzPeniR5G3PdVd3L1LGS//JVzd/YcPl11Oj0QoxbDz38VRQDAMlcqIb
cgaZWCC5yPlgNhdz7xjULXnHwcbNeo2rA7mI9/2oopLPwCK6+CLGlf/mw+vm
61nR2xXH1iNmOn2m7sz/6mFrP7iifhcNRV4aPyp9edi08loVY4IA/Q5tnb6+
qphYVVfx/IFgbP0TuWVlk4JoqOZmXX2iSCF+0hXOvkQ2Bhq07xa0qkC+R6Nd
sYIHmbRXm87rK+KG5uPSCwlMnLu1wo2Vz8LC6M+KX2o5UK/LeZ7YJQ3DV6LJ
DycywQzY18y3YWD9/DWT3xBf/3pGboZNDweH/qz0C9LgY4bfCZnpLSoQi6v5
OqQswMN47vIawjWzVxglnJrARGf29l9zHhJ/eBi7hS3GwqcuqbRD1RwsuqTJ
MttGuOLPAVHhqAAi4m+XrU7mIt1J7rQKuU6F0qT9nygBTs1YPm/pIR6u+N1a
opvJh7Tmne8X9LpsmBvoSwciJJAwaVWn0XJleApHT7z3UISVPGslU52O0trY
qMpLDLxJmF36YhUbRmfcf7zlc+EbGPN73jc6RCP35P0Yx4LZzr6IFMKZdxbM
v/NtOgujRjnTR7pZULLeWnhwJRfPr97QsSE8MW/9Nk8IudCKKXEot6aj7OaJ
Bs/TNHh/8HpuUMTCIqWTdcoOHPwxdv8Vbjhos7g1fKKZhwI6HQxHruR8symN
GqdpvIiBbaWBb9S+CRH2omxcS7EArypLmvv20hForZ7TKke4ytf/mz6p685v
i9c8lxGgo810RzJoUHd41fdlBhP146bliNsJMFXv0fSTK9mI4AzHeXK4GPFN
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
zpF6aUU8mR7kdymZjdGzw/nv2Vyc80oeuxxFRbyynvLPRKJOr6s8vqdIx5K1
3NBXLmzYJkpKf5DiwN7a8T6rmAd/k/mkbw1KeHyo5tuzImW8+Vy9dmUeCcwh
0WIpgkvcza3so6OkwYlpWHWml4Il7y5GzY3noNYl+yifz4bLqeaVXYVstK3G
qYmdHFS6lETrxrKw7kC7Lo3BRoa65vWaE1Tc+6zvWSXOgtOMW1H6QjScbtpX
8a2ZhkN3NN8njzCw4k60nsNapiC/+v9sX0t9SMFRqrGSvKsi3NVLll1x5iFi
xu1D/oR/1DVxtS6exYCJ15W1t/dzUXplT+UnHw6GP5P1bt+lQ39nWUFUEeEH
pj5p956mYWt21ZV6QoePPbofX39aGUGLeekzfynA7O5lz++FTGT+nqUnLkT4
/+UOSo9s2RA5asv/TPjBn/tF8shpbGySWbt0fyEXFf4hFinJhC4eXR3YYk3H
3Ne5ttvf0SG1pqVrEdG3l1O3J+h/o8G/+sdYqx+hs8sf1tpX0bGgdMvJEhoF
q+5c4xlfp2HmeE2QtiYNeqm0OY1EnZXWbwjffISN6fEdzXeT6Lh9ZOE9F2M6
ZE2qpJdNl0OClmeS+AKS4Dyv7OdE7Sb80HDsm84rVCJeHKmz+hQaltwaPXY8
mwlhI40vih4sjD0ZSG8W4mDiqEleEJmNjedvk78qSGK2nq2e2hEavHum+3Qn
c0ExHVgjfoeFDPZDpcYpNmZdSdA9S/jdmUvsNmI/G3LZZr8u/iD4bWa7UPcq
RTyIP5A1sk8JjaLLORXvyeiI1bTPekzDtlFfnZ5IJoyLfZes30Tk23nXHpMw
HnraDxoM5RN9a8DyCS+ZAZ2o5Lj+DCZ2arcE7z7Hg80NEps+zEP/1BltDuGT
PW94zdhgQIdL1cJ4NW0quiyp6vN3MgTxfpp3t/48i4VXh8snYU5BhptGZ8t9
ikAfbsr7peRVUmG5OTlTezEbUTk1JaZEHxU+sG2L2AoGltqs3qtsyIa/3/HG
pFxFlM5tXXbZmAfZXyGat02p8DYv67fPJuN03oMOt8UKqD/5/fKqQhZyL68U
tlfgoeOrSqmkgwIm/uz85iFLwjWtZwfuDPxfT7OzotQ3SSrgcWhxY5SuCuZQ
xuLeNykhU6S5/p2kOsJPsfIPtKmh5gj7i4GzHJ7zOCY/TzHw7Msbiv0JKQz9
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
d2mg/j5SlbSSg1U3fn80cefAeih38yphJkw/3pq09ihtQk+m3XJ/Pz+cjXTx
xxqaeQwUZNdryIqx0PfnWba+DA+BkqfeZF3lQLazz1BPTRXhM3PtFvlywfu8
0YaaTepQsbVcOY6KS9G+W+xnsOFpZHTTbjUNuWoNVhtXcCBZVxO7z5UJf8v9
9KhABlzyzOfmv2ejwvqlWXs5GzrKsTuuVRFeC2g7s2D1iGWuV7NNVzcNK49Z
55ZrsGDcuG3J6SsCqD5ITysLUkPryc6auX4qEL25p+J+LYPkgrFt1P0cLIq4
mlFLOEt/bHr4X2UBTlna1RjoKhL/OshYGySYOO/+1XX0YxwWbA6NnolW4KP/
Q2Su8Qc+Ghz6n+kEKKFD85Ch/WoB3p5q0dz3hgX93+/fX9XnQiV51+c7FjxM
PjY4JfMLed2n6elbR+gYct3JWzybhluJwo+bI1mQa/Iyb7nAmbgf1vGHK9u1
mEh3/vbyuZ0kFjQLbooeVoBF6Q+lO/PVkW/0ruTqFHXE/2yZ1tunDssLd0MC
dTQg4suIf0Z8/Yj+4nlmn5WQc+flk8r5Asj1rrUQP8dH5KfqR7VeJA/37F3s
48CG+lhjRtJcRXD9y76/O6+I5a5vbB4RXqwdUasxFuLDMNJNuTOGiTfCIsZ1
2mwUx2jJuJ9RQPXZ3SEdc7jQHo/18XBhYVprWsz5CwxMLh3Sf/eVj4P2QayQ
xP/3t6xtxvrXBhywp7ddzxNRxu7xurYicRWYjda1HtlOh6pp4ROtuxxcoTfv
HxGowsBo9vKzjUooq/lTyvIVoMHu2tY3PooYLhQuaPnKRd3Bbh5fUoBJEQkn
5g3ycKk4K9SP1NfsgE/LovM8WKybLfHdmo+dCWZmMZJ87Ki4MJ6VrwQrtV3L
Xj1mIm35tLwKfwYcMzsLb5Cc5Py9tHF3LR+HI49Hz/7JQMWNpD059ayJ98v1
uB3TEKyEazYHHfSiZeBZtqvscjV9ol8zTlhn9l9kwlCiRfFyvgBCYor+sXJK
kBuc0rimWRnZaX+yvvmoQatEX8HokTCmOuzLU61h4/3qw5lNxbJIOXexamYS
B/4ivwPG1pO53MAVZ+TwcSO/w97fho26Mb0H7xvJ3mlTRGcXEk5+c7L/7HI+
vmXX0VhHBXCXXlDK3/T//fqjNPdQigp5XBIY/Ps2Fws6MjWllZjoNVnsnEv0
2mx9elLFTx5UPl2Lc6+Rg6puUEdNBwsiHdc7bparojNgu7tSgwp+vUB6Yrcq
5m3JH+bJKsNjcd0fuspkJKVS416aTkb67vM9omS/to8flxa5p0J0adlaQ9Kn
80PT+gI2KcH5AuvL4plM/GzevzTZggVmqLf/Zg0ulBfGHB8ge5T8ct7bbism
jlpeW6ZAeG9m0Z3vvh5czI9dcLdOjYc1axRz6pxkoSvwV3dTpeGE1IPlPmVs
jASFnBBewkCAiEiewFge+mZKC27MlIfA6WpO/hQ6/D74t/37+7+rF1gjeoQv
z3gJmmKOsbFUrduwppWLUtvdRikZbJwMcLvn1CUP6lQfweIoeVgeuZR0cBbJ
WdoWI18dKLBser+7rYuFWLGBHRKEz676Xche+I2Jh/cb6QPTmSgyS5T8FEhB
aMEdgweX6Sizy0m9H0eHitvCqXbNZD5yH+6vusjAT/Oue8WiDOw+HuMSwWGi
Q8b1UkcJE88nEY+JYcHwyDsdxiMWtNKaQq6LU1Ee8HDE9TMVq2OVK/3mchHw
xylF9CnhPvOROw/OMZEVLGMps5GNFgXLcYOpLIg/+vooWIQNhfofmdY1XFwp
vrzZk8qHtkFEcrGDEt6IXt/zwVsADdFZnp5hNKgMRjb8PcZE4YtgFatqHrQD
tM/QzvOh/NIl/MXlEcsvYvPNfutIIuzk01a9thLLHiHVq2YbKDAoLv0e/UEB
z2vtlse3UeH7bsfeQzxFZGlOex7/ngfNc29FPk1nw617g1OLLvFBQcRHYSsu
DI6+Xt45i4OsSTP4uxhcNN1JSgt6x4PwlvYIn5MsXDyzqveEgAMrp8uDec40
iAcLTZO88e//nDXr6Bqx8Dn9rdSTD0xwRR76+TkIUP70/BntQAEOjo4+LHKV
QZ37i58zFBgT9RHeJ8qfYcLEsNWUsENCDKyfIStibcXCkxtPQyKT6PjyVNwF
PUz0a1zs598XIC88162vXIC+G263R2bxYDbztlVnjABHBwoH3evYCApc4DH1
JwfzVt9NCykh+STt0XENNgcbjJ5Ft7+mo7A89XbxWTriNxXGDP7hwCbk6tPR
w3xYvnY+W2NFg5fNU02lSAYCf5k1+b5io0bjY6W5LBfsrZFiYTks9LvqCSWT
PGF237y8+6IE1mkIza9+yJy4H/MZy+9fc+Pg8GIPxyoaCzdE/H5PlmdhhJkp
Xz+Nifs7ckLWdbKgZq2VdDuKiidiO887idPxy9Bi8aNNNMyfvUjZ7TPh8m0F
ErS7cuBucJg87Q8VEgopk+s48ri3KzigPPbf79t7FCyLGehIObXOtZDouZzv
JQt1AVwWbNvZtZqPOPtTB9WKWRBOffT3WjYb/Zme94940rCdJaXzjfBxpoem
yQcnDlxUJO2ucrmo3Uvzc3omQCvr/KKXyTxs2hE0a1YQFXP1M+aJzWZi3knT
qspPHHzzqC87mMYFXUs0OE+M9OFZu8XtFYoofzUzJeIeD9fkRNvdXJWAeTmP
PLL4sE2Pbs5UEuD1r4qlH4hvG91rXL90WAkhHws+dS6Vh66BD6YcpuHnFtOt
a+XocDriaRegxoHXiGZ3XxcH6m02KbWHuEj/sUFXczkLx+ValuRL8Sb29/K1
h6XiZD5ULrEMhlr4mHRM+mZRkQDpM3ofyNhSEaa3uk5mD+HnzMImZ08q7jfF
+FtHEB6Wq1N7OUDyReh+U4Edqd/jEiHjCiqkmEF7D04m/LvXYtccARVqVGmj
smQqxm+JuvuSPKg/fXmHijEPf/aclGi2I/O+zMT/ozwfRdZd3//oKYJXOvPQ
o+1KeC2bmlRhSkOW742/RiQXaXIGj887Q3JyW92rxVuIP4RumvyJ5LzGIv1B
ujd3Qj/Nt1m5yXr/Xz8vd82dlenHhNQKg+KnJI9scyz4dJXoo3Ga7qY9VQLU
JXuevLVBMPH6qQ8Uf1zXJPP9Wv7Ku4NDlmrWxjcPsxSQnzAl9dgBAWjTBkuz
uBycTRjkdotyENgTd0djEhdeioJ5Vy6xQe2a/UzUhAHtgyNznQ4yYd+fva8v
lw4+13DtmcUs5PDXiTsf4yKmN82Cr8LAjCXU2m851Il+lk+7bn/bTR6FGtX3
0i9R4bSqkn4gio629SWXX80kdRmo113hpoTA1w4R5ttV0J/j83bmZcI9CzbY
zdBWwckN95x3mSrhmeLo4cmy6qi5nLLk+WG1ifNYLVlvrFtDx573o08N88nP
Qg/aC5Xp8I3oz1Uidfewy6h6MCrA/YxFP0Yf0KEjo3P65n7CvTM3qDuQHHam
+s8zF1suLjrWm0x9IwJxasbc6j4q+HmT/op4kzzLPnV2gEL8ZkUFFwmqKPLJ
37pRm/DJi62PjUk+vCrjLLluEwvvG/yevJVkIG9awuD6ZSQHWu3McHxDQ0qv
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
V5k=
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"cfs data\"", TraditionalForm], 
    FormBox["\"model predictions\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Large,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox[
   "\"Predicted vs. actual CFS bilateral trade: trade balance\"", 
    TraditionalForm],
  PlotRange->{{-1.9768268105449474`, 12.512428854160202`}, {
    0, 12.832880007234419`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.734503659136185*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"3245fbac-28f8-4fc7-8c80-9ecb87e88af5"]
}, Closed]],

Cell["Comparing expenditure shares", "Text",
 CellChangeTimes->{{3.6182283216044207`*^9, 3.618228323979658*^9}, {
  3.618229021136367*^9, 
  3.618229025008754*^9}},ExpressionUUID->"ef2aa5bc-816d-47f5-aa15-\
a520d34ab128"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"cfsExpenditureShare", "=", 
   RowBox[{"Transpose", "[", 
    FractionBox[
     RowBox[{"Transpose", "[", "rescaledCfs", "]"}], 
     RowBox[{"Total", "[", "rescaledCfs", "]"}]], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cfsToCfsSalesShare", "=", 
    RowBox[{"Transpose", "[", 
     FractionBox[
      RowBox[{"Transpose", "[", "cfsToCfsSales", "]"}], 
      RowBox[{"Total", "[", "cfsToCfsSales", "]"}]], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Log", "[", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Flatten", "[", "cfsExpenditureShare", "]"}], ",", 
       RowBox[{"Flatten", "[", "cfsToCfsSalesShare", "]"}]}], "}"}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"_", ",", "Indeterminate"}], "}"}]}], "]"}]}], ";", " ", 
  RowBox[{"data", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "_"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<log share - data\>\"", ",", "\"\<log share - model\>\""}], 
     "}"}]}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<CFS expenditure shares: data vs. model, balanced trade\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Dimensions", "[", "data", "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "the", " ", "data", " ", "is", " ", "exported", " ", "back", " ", "to", 
    " ", "stata", " ", "to", " ", "produce", " ", "figure", " ", "B", ".2"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
   "\"\<data\\\\comparisonCFS_shares_rescaled_fullTradeDeficits.csv\>\"", ",",
     " ", "data"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.6182279194322076`*^9, 3.618227931770441*^9}, {
   3.6182280855268154`*^9, 3.6182281138236446`*^9}, {3.6182282807173324`*^9, 
   3.6182283261088715`*^9}, {3.6182284242336826`*^9, 3.618228505595818*^9}, {
   3.6182285559938574`*^9, 3.6182286616424212`*^9}, {3.618228727897046*^9, 
   3.6182287401132674`*^9}, {3.6182287771909747`*^9, 
   3.6182289804002934`*^9}, {3.6182545037344913`*^9, 3.61825451772489*^9}, {
   3.618254547868904*^9, 3.6182545787889957`*^9}, {3.6182547630354185`*^9, 
   3.6182547649556108`*^9}, {3.6182578606500683`*^9, 3.618257949317068*^9}, {
   3.618257984273068*^9, 3.618257984655068*^9}, {3.634387143723304*^9, 
   3.6343871571802263`*^9}, {3.6343871916018963`*^9, 3.634387224835923*^9}, {
   3.6344079452287517`*^9, 3.6344079657448025`*^9}, {3.634408003841612*^9, 
   3.6344080170669346`*^9}, {3.6344118005172415`*^9, 3.634411804388629*^9}, {
   3.6344123295091352`*^9, 3.634412363805565*^9}, {3.641058652416812*^9, 
   3.6410586590864787`*^9}, {3.6410587003454*^9, 3.641058756499569*^9}, 
   3.6410588795342145`*^9, {3.641059082594529*^9, 3.6410590890005713`*^9}, {
   3.641556604785964*^9, 3.641556605369964*^9}, {3.6418529724200573`*^9, 
   3.641852977614924*^9}, {3.6420570544723873`*^9, 3.6420570571373873`*^9}, {
   3.6527025971036615`*^9, 3.6527026016946683`*^9}, {3.7344607181244817`*^9, 
   3.734460721643982*^9}, {3.7344607596562223`*^9, 3.7344607621251163`*^9}, {
   3.7344609809381294`*^9, 3.7344610170169044`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"7d9d5e4e-7fee-4618-946b-43c49a43d381"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
VTjMQsbI75xja+i4GuZyEMJUBLF7nJMes3Atbn3memJd3I2j+Z+FGBCr+mMm
sYaKBr1tnVv+/7uR5jWi/GdMjEpQyrYR91XIXakwe5CMg2FF5l+GpbFg/4b3
I6cZ+FfiUtE+ogBPmcb8I+9oeLXHOuWtBRcBR38M2UcxsK7ALcyjTQnMzVf7
ll/j4uDfztThIC72VP+SvMykYU+gdkRcMAnzKlk72lqJ3Bd9+sfpGwe05oxt
txOIvpBGF288w8bfuEU+AwRPt1+UtQ6VE+Baz/t9J1uoeNAbcq2FmMvfPK2l
NxxZOLha+9t9EgdKuV0kbjcbLs+FCkcr2Lh6M77sqyQTXOvqhgoeGyFP9MRI
D2ho5osnJP1hI+tty7ybi1jIGaKJLD7PwcGnkZU2hD7zRX6d+x7Gxul64VbZ
nyxQzLxrLLeycabSepL7gw0jc+/BIwfpWKudb12zmwFtt3L20AgdXSqnNC45
MTHTl73/N9G7n/gkHLSXIsPM1btPP4KPrMhXvR8LGdhSuEopKJ2D/7QL7n91
YYLqTor0onJhOrS0Y9EAC0e2fBccjeQhPOi4ifFjoufT/NI4JBbW/bfUibOB
BeF7cZF/iX50wDNK5nrDTH0YP5ajO8xEeZLqp8EyEoabhgVldSzctciTCjSm
I8gt7sXaBjriO89syv7/9+L5c0e7IwkfnmrawtpFxjZe5xLtLUz0SzdPORBc
93zhml83CJ/4Fi2h23OLjpdn+k/meDKxR8u5Pvm3PB6+Uv3RqkjBzdDNGyiV
VKzdJPsz8goVA8ZCK+0PU+B9tOvnL4KX5st7Goc/oaEpymFe9z8FhDWFBN+8
xoRJXt+7Gx5szA1yXzh5j40DHzdv5FRykFvBjs4m9tNEaO7t2DwOlK/3Nmw3
ZaDguj9flsjF9N77W04N0+A0tTldK5nQtbeQ0lGilyml/rfEs4CYo+Ublpxd
QMau5Drl+58puHToVlrhYxre3X+WVqbFxrtXffY9RsR6FDJlo08y8U/Ofkyj
lYbG+Z+Of0mn4kJq1fm8hTT4Pxw9NEl8zgjdICDERAZx9SWOZrPyYOvM7rBa
LAON/UNZGfMUEDJn9XWZXBJOmvMOxtrJwkLlWG7kXyrGHOtGJPZLI2st38a+
iI5lQTvPnXKhQtV5dOnzbEnQPm5vPeUph+VzDH0E22fr7eQdg72aftUfcg9O
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
8CbJUeVfqzrOa1nGdqaqoqRvrGVDthriqVlbOCJV1Mtzf9Sf0kCDy9i+qO3q
0FJuL7O/Q+yv/TJvJyUNiLgz/ZXqVfFbrOk1j6eMylnDY7RBFaw7kBExSvjH
vo9bs17O14BXZh71a68K+hZ+XxhzVRWGwXKKz5eKoDKafYW/h4M1ekfYQQfZ
EPhZ9l6YTUff4bSMIAbBA+5Tzq1cAUpuiALv5FCR3n4lNm4DwRdnNxoX2VEw
5+OiA03GXLgMcVMirZm4VmL1r1CDCYH25LLrQwyI7x9aMaOLjrPnR7XInVSY
rt6ymEr0rdbzI/aRhG/NPHpJjHmFgUXT1uxau4AKZmXs8o5NdMz+tURBhfDH
/uos8WsnGdi8J7SumUfBrOHdZvfYKthcsiT41xAPf+67tlcv50OjjjZhLMnF
bzPJJW8TOIh4ySjer8bFnLva378Y85HfFD+4mpgHrVuf2Tc85UPN8W/PRD0b
mZPszFRpDn5JrD/pcpkLT/NJnsknIfhRrYrJBPf1aD8eLFLg4UfrfZe4c2y8
2s68kZmgjCtWYjuSKylIsO22/u04ULPm4e2FNio/ayI4obObTNm4+7kh8Fst
F9orNP4suUDwwdxYw7EVLCxPuSM0VWNCJf1W98nNLORmtF5+eo0LiYuRowdP
shFR+jtQ6M1B1KeDK5zaGSifjCwc/MbExrP0VaQIOpal/vLueMuHcGou9SVx
Xo/PnysVvSM4K6KjnfaPBeUM98iNvlys/PvqaUUGE3d7WtDxm42NZcWva96z
cWhFS7t0HxPZQ2onFD6w8Duu3Py4FQuRz+e/MiHTkWVWGCj3hYng4VNu9mQW
Zv1u7JxF5kKnJp7k38yG7/noV5YZVBz6Rz4QTGJC7EXumhdR8lAXl8ypPC6N
6wtc/iU+YaC589WtCB+Ck2cz/tzcwESLxnMN/1LCv6U+CqgVFEw9NjTrYyhA
5VXdZHSwCNTVjd+9CM880+1zv+Q+C0m6pZVuNXxIXJPc9LpOiFftL+btieBB
hftGbMNaPnIevMdXbyoGIj3LeSpCxLU7fDv1jIv5lD/rTJcwoCsfTfbcwkF6
lM/i7kc8NBZ6hh5NEME9kfxUXIKLdk+bX//sOKg4VuTSacBCc+bo2u8FhKdN
Zg4dUOPg6gWVpznEPnYk3fOne3Gx7syfyc+nuMhaP2ngMoOOjwez7j5SpWCD
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
t1HnotwsK3oULPzVOKkzazMLSns3XKjewEXE4Tz3wOlsqJ1bJb6XxEZnwPom
NyEdj3zl1JVamKDuvJcW8IOKx1+lKIpPaDg5QFF3fUdwn7BA6G1P8FrUOrLC
VjKKFaXP605nQPQwMHxBMA2pX9TnK/vQQV/B3t2yhQ2DJUqrPHr//3yo4ml/
VFgYT7jEDyIxkPE9sWjbZWK+xo1EKrXSYBLhEXNtDgMv90jOLdtKQ2CG7b4n
rfKYazwV4xUqD4M5L6T9V1NA43Mq7uUQnlXdbSQtpYTk5gprjQES7F88PeVW
KgvRm2U/jX/K4ch5raL+FWR0/Ar+9OUBCaRvHwu145ko1gpVeH2Agb+2X2pi
Q1iwfnRp/r4KOpTOZ63lmdNx8/KDYxFXaPiYF3TyApGL73XNLxrd4WLvovTm
BR10eNp06SCPDXPWTCVTKYI7yo/ZVxL8L56iVlWfykGmdcXMPc/YGE57/+Zc
PwnfzgsLTAlfddA4WHQngY5xP/s+1mkaXjgGjHcXsfFi07eQziFivrEr3fy0
OYj1+Kq4gaiPPG7Kh/K3VBxqnjVz1UYKfqVZ/uXFULB+TGtNuTsFA7tpD873
UDEwuzrvgDYLn7c37iJvYmL0B90iJYLYb73PmwOuMXDony3j/++VZYuOmB3P
o+HUuW5vrSwm1Oq2vxZ3p2NjXWzztU6CQ8K0524QycOfbRj5iOg3v4dbV4DE
guTrhHVNBKfwdkSY7fKkI7z5+apr3gxcvjvvVYMJC7XnJTTdp7Nw4Rc/2C2P
i6MRCxRphQx82lkWpTWNDTG/QP3VmxnYwbgfdMqOhoFK1tNP7xnYfX7f258s
Dr7PdJtx8BILhzVHFpqnEd43rdQubyENcXYVHcMEr9myWZmb2Dyklo7ndhLr
XPpdyuiGFxttn+ynz4ulYuj4ZPeveAqa3j3d1EnwZ1TYS/29MlT0XDfc+uog
HYtffUgdAwXGTctWPdvIhrVsY+nuq3T0yLzJLVWioOzWgNc+gmt7dz61D59G
x5LXTaF6dygoSt3WuVmb8PO5ctQH8hTkJ3yfoX2CiyeakStdx+hYHp6j5hZN
w0u7QxOBZSyEnLnh0ULUc5pVw/zk6wyYMpYlmgew4GA00memxYB1YqHzBWKd
V9L3KbHGyYie3X/Jg3h8trH06U+lXNyVzu142cvCks8+No3VHIRz10xcC2ci
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
O8nAm4YQO8+O4wdZeGcplNEx42DP3Ok/rSIZMNGMoC6v5uKax67Eqn2EA/3e
nN9HuK329wrfOb6kD48Z8MqGSb58Pr76xiXCnbJ1d5x3sTGyzaNnPOGYv2N2
hrYQzl+1WbmecY6J94vOL76+kbzOg2PzbtUw8HB7kNRxDBsnlLbr3F3LwsiN
V1a7UtnYGrl66a52FtI3ylIpsUy8judvDXzAAD2+r9uZrFPza8eCi17TEZX9
JkjHi3i3XvbHeXTCh3JdTz+eGyy3W7OA+9Kyv5wrmL7uLUUWlk3Lbtb1ymPK
3M8Vcqfk4VZmH1RwRQGpG9dbty+iY23BqR0O7Uy0CwXHN/cTLz2x9M+W9XT0
xG6qU3/MhPHMrZ5FIiY+ONS7PrrLRuvDzrLTmlwcPLcvv/PH/9cjDLyRcZ2J
dX4XPmoNk9yZdL2jPZ+NJVxhivtW0v96uY1v7rIwpFZa0WAiwNOwsdm667lg
pb95I3SjQXmZnpYRydVv97Ktvt6h4OHC2jmP/tFQ68IQ7z+pjYe6L7bM19FE
6eh2qoofBbqFS+o8eRrQts0wLRknQlZFg8FsLgcte++nplbQ4KO0tWdoJQ1V
50sV2wzoqHvaPiT1oGKZZcnZTbfouPBTkPSB+OGN9M9s9ac0LBy5d9gykY6j
QTcVXoQwkeVwaL3HMBWv2xU+OGrQMbH9SD7vGxVBdPXyQ2R7jVzlv3ecpGLF
u9gspgEX9cP7sjckMCGvoxOzdxkLy8Pddf3uMxBvz5T4ptOgovG15kkwHSe/
559wP0tD1/LWySmE0x0vmx0uqSacuMJxaECBgQP3JHNO29DBuhM2IN5Nw+xb
ghNj9wix7Jxghd9LNr7+GJi1bykH7w0TZq/4zIfrPpq89I0IlM153W+jyLq9
wPe/PkENb/ZKU8bd1MQs64nH3TZqo6p00vBVsl8be5UMjO3UMBhc7Hlymhri
Jv86k6nChF608gG6KQMLWh6/ljUUYreq7x3Ba8JZkRnHj+YwURztu+wQ4eZB
7hR9W4YYT37GhLSfYOJW0fiQS6S3l+/SjpxcxsQpv7t7rUnPX/1kW/jAkAGP
I34bk/YJIbek6KI/8cJ512wW1U9jozqF25c+ngfRnoDWV6RXA4u7fPLvcRE1
N8nfaYSPxr02c9tnsxDTWzFu5wc2JuUzVLjhbHxMG+myni2ApuqLfeOSebDO
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
uoWBb9rV0VNehK+LKrvGz9MRInk+aNNcGZyT7L+2WUsJbVtD1dKHlTAST7NV
iVKEPv3kc1FR4uUJ12RfaNGRUZTvNPCM+Msy/ZYjTgzk9rIY2tY0WBzT6tGc
TUdBhJmMPFcWGWuf3PtHOD35+MqrFl0cKA1HLry+hgn9DQo4bMlAZnhzZb89
G1dkT3dvthmsGE2L0f5+tr9C2Ja3VGAtDqZdZ/2NDRIoYE7I5DYKIWe3Q4P1
HWEERTY7vldTQhWVetowjtxHb+PG251M6PTf6HsWT8eXX9vdBGfFocB45Tpz
OgMXfnreLPWXhZjPKfP4YjpeCX+mR4awYMp64S7/moEM/1EXJXUWHg+uubYi
jk08tHXepBoXYkfran38mVj0+JvcxTQOTgXvF9uymIGw08Y7H24juWco6a5N
/KVT3IcV/V4G+/a0LntgLAe9qMY+7iwKrA91B+IVOQg4wPu8gktD0+9fav4a
CrhZLmaUZMiExNM3ZistlKDauTP3+lJFjImVd9d8peNQ08R/nuMUNn+aF3mB
S0dhR7G4mC8DDx+ll4NOR62PZi7usLGg32D57CElNKUbLrS7pAgdQ90bDocV
UGTgc+6QjQwS1s36sshMEk71hjqjXxRQx9t9+g85F4eCkkt+RdLY8I62bbml
LDoym1hm68VBGevQrxiL42H5M5Ub+UrIoxUsKt7OxGkvl3ttNznoEqrdzyI9
3qVn5WZjSwd14sfF1WSvxF62LO0k81Wpf/k3ew8HZuPCjraPGHhEt3dI7SI+
p1cQ+rqKjpR1NmP/fVLCLWG7XG1LNjaGGww5zqNj9uqsg3J8JXRX3cst/kuD
0VBF8HMrCqe6tta8/6yEr99EP+05QIP4lHBCHfHE5r4zZvy3NMzOmF3RQ/j3
pINI9k7CaaVCkh+6PWjgp19JkEhQw4+tXk8KVtERcX7B7L8Lybz1lIu4v2Tg
jjjLcFCejmZte+fWS2xETw/jHOyQw/lZi6XOfWLC/9dkz44gJmY5eZjHZLJh
0aKWvOGPJAZkdy7fqcmA7osITVHyXHK2ZXC/SrDhQA0MNjYzMDbvr/uJt2xk
apXbu4nTITFQTXNWI/9/jU/Xn0ccpNOqJVrdmZgm/6W4mc6AjfiMwHo5GlrC
D366NpOJIxzVczoPONjdlyLOlKehSqn7YTPhh9nVHyyfXWfh2x+9OsmlCjAp
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
WyfFg9kmjaZ+0i9rOxzzn41xoDp0kPF5iEK4as3NizQmil8LUhbOYOCzcUTv
RU0Z6LrqFnYQfprLqhrMcqLhX9fC88ILadiwZsed1lcCTJp+uHT2CB+aT+T2
JKnxEdc2sqEjShnUgZX3t9ymcOOwlrvESx6Cr4mG/1rJR7PZ8IU5csqw+bnH
2W6Kjyztg8/UZDkY16SteCetjNoYe+9ewlfNLx3tpg5zEfToUf95AQf3QmWU
rYoYkNgw58VKKTroOeFt9t4UTvSdXFxtQXw54/bBnUIcdA2UKiz4RnzF92vR
e3EmtrVKPjQmvRYV/h8zoo+Dt3uK645NMrHqpq7ngAsL0xZrCPjEk+QiFbyp
IQHafie/s/7Nxuby7IpaEy7OLej7ZXmdh+/T62wDj/LQQ+2vkCS5q5vv8zxk
GR9pMopBPX18nLXVZCS5kn9fMe/kE5JztUMV7d4VXHhlaZn9nstBL13wYWkO
4ZxvgU5KchQS9xYlDARR+CCIXX5ShHDk48gSM9I7B1tX2c/ayUB58zzzkQoe
jBWfOy0mf8/hLPNxGWGT6+6h6DQGVEazuouHeAhdHsQL1aJQEND47kMahaUS
82q/sbgQt3h6lkZybuSY+M+Nx9iIsMi9syuVhqCAedzdK5Qw39Xh5dxRDiZr
v/ZH7SC9YuExU6+dAxk/3Y5XC/nYbWjisNeOi7fr3tnOtlWGpejy1sirHCRv
ynJLGyQ9ZaG1oYE8t0u/V2Q8JvMkEaiW/0WCA9eOtmxdJxZw9/TNvAcCHFCW
vZVGeks4C792qpAcT6w8tzWXj/cWiiln/v97VhtZ+9cRb4u+frW9eJoKNslt
d3IVV0GA/X9xLvPZ0KJPSJtFs/FDM1FlZiOFVqn+ByqzORDEhGe8sWajrC90
tIh4W1PMwiYhbzZydC59P9ZP5rst9bPAio6V7/NtquTZMAl+wltwno1h+62h
AbFM/JnK/3bAUQ27//pZBj9gIcvT+eT9UgZMt+5fEnqAie8O2ob2xb8ropf8
8cpR+VsRzL+rFrlFAjZy+keSNsoi6cSq5iTyecbqD7Lz99FxROk/nVl6TGSH
jFQMbSS5/dZMreH/31d36GhftScNoWF6owsLGKh6Jfl7eZkSmCJJ9iLvZZAR
Gz28PYGGr/6XG259VoLwbnetiVAaFMxWHJq0ZCFBtKhTd5SGCoWYu0rT6chi
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
sWb1shPKMwRosZ97j0M4qP3w571+pFcLl1o7lpJ9vnHA1OLlRzaqu4rinUnf
eUTo29ecIXul8jPVhOxtlfuLoo/7mRicyIwtJzlwRHfCefAUC9/LZulXEG7p
/ZZyfA/J9fyBWq76OANq2u+K3ibTkFj+xtmqWgZL/XwTFxOPc/dnR3+rlEMX
Jz7NRVIeD7iFn0dthyrk4s946doIYXeJz9XMvRR2xZdnji0j5++SHvvsAg1v
c2+JjD5Ugn+IQPsn4bH6g0HmJ0hf8pauW+pVzUMd59n7LA0KxR+4q/OJ1yXm
56rsaOBC553FqaOz+IiIoN869FKAm3979gy8Jh4gd8J6PIUHrjdRhpsc2Bl7
lDc4Et5e3HtaxUMAj3p6/j0tLlqVzZ78uMFGrvP8hzPIXtfskL187Bfx5DtT
MosXqEDXJaT/YjgXcy/FRtUZUlgidE/p2F0ekg9NKM0jPJNz7HJ2iS0X/REn
Vs9pJ8+ZQV/TRXi/f8MuS6mLbPSvbcu748dF8lmBW88pCiZFMXO6jv+/3xpf
JBux8SROecdYAhOiGTYmN27TEci+89DMmIOxXTkNhfosjDjXy7kQfmg9LGn+
Yw4FBKSKZVlTeBbzKkuK7FtF0/uP2cRjFWK/h88iOXnYLW8GRincDVCk1kWy
MDy0r/i/Ywzoz3to4HKQBrWL3knpJ+m449wZEZWlAO8BZg23QQlHHNceihRS
gOeBBqntRVy0FVvtixbnYVJ0ztr4q1y8UTR9LyCe8bzqzsWoX1zISmCi14+C
ZqVA3aqZhb8HFGY2nOagwKJuF1NRDQu1pTvCP/MQ5qlpbETme07Zo8CKQywY
rVlQ28Lg4oJWlcR8Moc92br1RiS/xW2WDTMIz/ynm2aLKNLnkUyxitXEE0ai
P5uIMrDRuSLC/LASBs79jLljz8Trh541M57QcUFTud9mig7jMS36LNKHOwcj
TU5+p2B1xE92P8mbMqQ4T4sl3hqlfaw0hQb+cS3xLcTzzqgM6r7OIf7SvzZu
lxsbD+XXH5T8j4m0zbVnrkuR/tPfFvCZPM+ZOW/eeZB+GuSeXDV9gIUPx13P
7V7CQOUrRl6UMIP0w4Ex/hs2JKyfpDGPsUC/99/C9PtMXNkWt3X1BB2pz4t6
Zy+lCL/KPMvJpjCZ+Pnbs+vEs+N0ZbqusjDn4/6Wjek8vOk/mWdaR6H706s2
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
LYTG2E1vfp8Iwe5T3H795QIbVpUdoBOukmxjLNYmvPs8fGL4iADnrpTXHpon
hKZ52MeWRiFcBs9P1qoleeMxOKNzFQ8Xjhauy6hn4/xvm89mJB87rW0v6anT
cfSO1Zy1bB4uL9WPfP1NCJ+nS7e8LeVh+tuqcW3iecfLpgY66fFgYefh5ZFP
ciRcIS/7HwcLU7fdvT+bi9ChJI+6FTx4XHC99ThJAI1zx9vz/vv/z5swXenH
+Oia4yEh9OCBvz5m7mnCiWO1CjPCLjOx8Paqf3+P8FA0t9OS/ZaD1LfFxotO
CnDVsqyWQjxqLOveswPpNLw/Xacx15iOedq7JCVs2GAPJhUfq6Wi/OzCs9Z7
hIiqe9zMPM+Dl+x3gybieQm0UIMTzgK4r5klN6ee9NqaTP9uWwEmzX9nf3VU
iLvU6qPlDSIom5jPm9TDg5lzWayuBR8XRmoMn9IpWKgiIZmWq4riXrZJ9zRF
qO7f0XxwoTz8hQ6Pby4VY/Op55bFT3kw2JGW8rKNA7uIkXVmynwsGXwQ+vUl
G7p1huWMpxww3Lw3WB1nYpmyxt0v26ngKF+ps1KkI6vi1WL343TQ/iUlLNdm
YMkBx6rKXg4GFk90Fo0w0F+0dMC8m4XfKtcOhn1hYeacl9+9trPgF7SukqbE
gvOJyQUT7gwseP9h9qlYJkp3to+cIrn1yqF8v5kpA1t2CJakkfx9O+vTqi7y
esEm46kjhOe7FL+Y5sSy0dXs0vNvIRc3e6hni4l/vUk847GC+Mzn6q6E8f9Y
yHy/fpSqyYKOu5ZJkScF87Wyq7RPqMFw+dj1CD8qHK408v3dVfFQyu61bxQD
m3zmXqMo03BJ/smMr/kMKP248HG0nY6LDTlaqn00uF/sVmESnn32fOJUJeGQ
fXIOo26ETyJ2NksIvWhIjbx2+8YZJoptC27o1tLAavy46RyTganrpow9jaRB
hj6ucVqR+F4YQze6jgfladUPzD5RcTNnQ264MgPC645Bs7/TcEbtaGOnPvHj
b6OyRz1YmOTh3SjjS4Ng68O8vP0slFl9kTqlQEXsa6/evaN0zIx29ej7QYd/
2l77t610ZJ98NWd9M+FZ9+6H46S/7zUdPTHlOx1V2nIlreN0WB6nRGvsoiB8
98EFpiw6MhtXhhheYCAo8IKezi4Gcs0pM7PlWPj7+l+XbjgLs7/H6/3/OQcL
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
+bh8PKi0ej7xnGmP9yfGEt9WGxQ8lyKeuPdxiEYEHcvbZIvtXqjDeuvLt/fd
6TBKcGm06aPiWfLs6YWOdFhprY0qu6iO/6aYDx8j/mnsyq5QDaBgY8iIxOAS
OnZ8Gq8XXqfCQ/SpqsOPikKRJvsT4XzVq1tz9hPeyfKx83QuoxGu+Py+dSUF
9sceMy+H0kmPalQnH6XiZFqGltcWKgIOZtpKWjLxPqFz8PRDGsJ0gxatUqTg
6sqcqjDi12sdM9fH2tHh/bdbWEeuc+Iq1bbbznT8PhsqcdqMigV73e94eNNQ
tlbjuU4CBR6Bm+ZlxVLAEZr1ce4o4ZTfDgmPBnUE3w7R2jtVAS8/TSg2zlaC
Z1pft84ADQHUn9U2zsRjOnJPB3VRsd/LThhMro/f/E/fXhQogWPxq32HqRJu
LqpbvO6BEga2sP/YsNQgo3mnOD1WDnwLmXL+NHm0/Np1z4VCw9LR2ReWXGTg
84YvVQ8f0rFSTsKy8Agb16++txHaM7DySY93yUs27i4dNUnoouG4Ufq8b1Qm
Dp2b4Moi3hc/wvR2oXKxnRs7v20JFWlze+j0iUwYqWsHvZpFx5CXeFoZ8Vl3
dY+Rfz/viF391bDyEw1+wmDtiG4qSnxyOltZZB596oyfL6SDHZNcv7SUgoyC
DTY7tVRAZ16TSJyhAtuFQ/t6aGqoqpXrsItTx5GRH/w+GgWRC7Yyf5LrOVPU
XLZltyrcAxusnStUcGu6j8MZMqcPHi3fWTWHguAyvnX3TzVsclwU7JmmjsP3
CmU9NOj4KztR/lYyDRcG2qpz7pKvT2oJzLKmYYWqS+OndAokrt4Ye1XPgt7a
gep2OQZ2lVtedO3hYh5L59nZf16nbrg79jwbkxuU2pqPqeC99PvYgDMqsEkz
/++mDQM7qJOHphEvbPCfGlarRIPDLFepisMMOGwIa+S9oeHdTnZ/0EI+ZOvr
l9VZ0mFxeOT34eMM9AU62rvNpeLsPeunTX8Z6NUfK1W4ScUhiZF15dIMHJ37
elxPhQKpx7YVBi/osNl969pDHwrupHs+1Mhm4O/fNxFyd6lYXSo5y9GGDlfh
33blCVTwputuk+tWh9XNrRpTT6jjGOcGf+kzOuwK7jY3pZMcPHlHfYcZE/L2
/D5JGllnn4zN96czkHf0r9bPFjWkGezjeQfToT59Jn8u4dXUt4yrL2rpKEla
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
R/9P0XnHU9mGcTx7hrO3Y6+IikqiqSIKpdKiRSkjoiGZKQ1SIloalBEhK+JH
RUYiWqQ0jNAgQsJ7v3+dz8dxzvM8931dv+v7PeU5CVSsru7jSi0m8z11cO/n
QuLJP297lRtycMq+XXNXLxd7RJbLfNdlIfLd7amueWyElz8xnayjI/GwrOcD
Mr/+ekQ8lzsqh4pnyUPdETKYGdDPX3yUB5MKW+dNi4j3evQ6fp7DQZjCUv/s
ewxYbvvd/StbgKCfzdv1l/Ghc09swdwiJs48uhYRR3JiQXmv+ekoDjS3+okM
SJN1rLt2zJ/Mpcqdz8f265Hryr4d9JXwpEVab/2KUTqUKU/3x31kY5340fV+
WQzUmRYedjnKwtVvoxLnt9PRrlN8oN6cCbPCwxOnK5SgHGN3JIh4vFyZ9/zj
6gy0PGs0eUdhIFjBPHMx8Z3Dz/KnLdnIAC295mmADwMv84Y3GMXS0C44FbDh
Nx1xW6/vnh2pgK9PWZ43F8lC773ITpN2SYztVe30PywP+uYXpy2apbG5+lys
9l5JyK99vqB7Awe0ISX4djCwxbhWeVjIQ0nH0DvuUhr+TF62lv3HhG1rSZ+x
P/Hjzan8xmAaPq+02JhrzcQeqw/LLwoYeCAWj34xFoqDxez+lvEQ/SVRZMVz
NmTLT9FnrSMcsyLRuESdeH3LQEL/deJ3M0Ql6dE06JurNC4/S8HaggAVW9KX
4Vsdjob/UsJYaKnfQzYFmywvNzzPpOF8UqUfZ5iKNTd2f3qwnuTdXL+FWqTf
Z7t56TZvVsSzA2nV0bfEUHlk53vhY3FUZt/KDx4ThYrfS7esoLEyN6vFuZVZ
ItjkVP247Is0ZHwf7Ct6JI21V1dJLDspivr1imVJGTIQqzfdOpEqg2mrenfZ
m8jg4Rb73qpSCcyvC9FP3yoCjcKBvk9vpdHwU6Nr/3xJGHOJgpwfKAvcsWvD
57rRstSefbUlRgxsHE/cdJdNQxpH08AzhYENWrMc539UgqGP+3iyNgMGoYG3
95B+dM16eFb/FxuFxc+zaQ5MrGN3JqbfYaHMrejct79sxBVfrnj9gob0MK1T
YsTzTl5a4H24m3BOdb0H9/+/bzc6UP42lIXXUas+rCqj4UL8gfULL1OgG/B4
Y/QlOr5Nd3XKKaCh03nfppl7iU+//2Xl5MaAxk6G4a4IGuYUPi0ZKqGi+kay
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
gYqpTauVbNhgZOiJ6PoSX3K7IFGbzkLbbyY7fpSGuQ1ybz8QD53IkDobdoCC
AsvVRSF3Bfj6xXSdRxKpt6tGmld1uZBYc2lDajoH378uiX1OckCj/enWgz0c
OC57LCu+QoBc+g4PYyEHL866FdMIF7R++T7rHoODfbbUHHdp8vP4cY+Ctxy4
rkruTl3Kx3iCTIXuZTYk7g7GHtukCsv6/L5O0j98ay/ZPdd5KJzOMipdL8TG
j7MG/6YI0VcaPTWnnw+pf1JmyyfZuEjRltlewoasamPYDG3Cp8HeD81J3dRW
jWtPfOPgabNcj0MTE8dtTrACmgmnjW3K89pCR6TIjfNniD/YxZ+s2WRB9t9p
GbXGnHjnZZMkBsnT7rf6nSNn+LC/en2RhRcHIV0HpQxFhDgs0XNcjMzrpL2c
tJhaDkpv9vY9HCCe9Nh252ziL38sCzyeO/CQ7yKZpeGrgt1p53/SIsi8lF6v
kVKqgpkP10oOSnPh5qY/s11RGenl/Z5nrypjf5eFZNNZFo7VTG1WcuLj9Q6T
fs9vJEfS5f0imniIGvPt065SxpynU09qzlOGV8n8uN3EgzyMlzTf20zq06zM
4mvjz7Ki+96yjQYTZXK/W9tdmjkwNzIwoIsT7zUaaxN3FKDO80/2CuIZPpQr
2RdJvh4ZOAO1e1y4LjBNdmzjoMJ3Rt2ea2ycKDH6te6mCs4IH5UH3CLr/9iP
7S+uDJmop6UnphA+S/LUPufLxYqYqyeXLObBKUg6d81mHhbN3PK8gvTfz7u0
dx/+/36pv8WH6xeykN33+ZxzmDKYl9kL71YzcWnqZqOU50yY2KfqPM9lIkB2
dsj2GsIJhuK/bpuTOdg6nNHmrIarMxY4rivjQqPCZ4Ei8fybGyoeHzRg42bb
+kSvCmX4pt88LjKVcO73TJcDykKYZ4sH3FcT4lJgybSL0irQ35bR8jVABXaR
tw6dIfzqW5P6/CXhi5HzGypKVfhYOtpdte0JH5oP/OLWxJHfy9ogqXKY5OWd
1jiOAg8rGNEP4u3ZyH5yb6tMJJnnH2f82hHExqOQxRGtr6fiQXVV8WlPKpbS
LC8E/uLg7ZwP4vplDBSO0cvu6bAx0+6CyuJyJvp8Vg6/W8fDyZg/DY9L2eiy
b15y4xIf6vXxDSdfslHHSfzwi/jUmXMnzkQRnnlgKeepnky8sOfBZdtaFn5t
Pm5woJqLrqPzWu/vpcP0+WnXJiEXN8q7uhk3GHA4Qi+tDOdBTe7yv67vLHDz
ZAqEJK90xI9o5LxjId7fafPql4TzJ29aFsmywMycMZJvx0XTBrfuzutcKLXd
PTO1mIW89/+S6m8wsdLX7HcO4R9JaM6knGOgMY5ivCFaiA2U2NVKA8SbTu/W
LR4gfrnZMKa6kQ39BwkjCGKBkvh9xN6OjfVVXrP7Inlw3rvo0f+f702bck+4
o4aG9tdGdZriNPz4/FT+fCoVf1Nl9ucrU9GtEKRLcVKAh7947ZNwRbyXczLr
yuXiTN25Fd9KOdAY0o4QEj6teP684S85Tv0Rff49GrmeviDPbAob8g56H6ji
XMQa6c1KqCee7Fs7N9aQh7VN42fLz/FAIXG8l6KMYgVqtY8hG6Zj73ZFtDLg
rpJqHnKA5EJDU6R/PBcXgyozByS40Fl2a1tsMBsNihPrPxE/d/bh0EJ2EN9Z
K/L+0hs+jkR/77W05GK+0PfFabI/p3cqST+8x8bdN9FuGfvYSHpX6GB2k4X1
2odUpo/TMfQ2xO/+ai7o+leFTqBBieqwj1UghMS3spTpK7lIoRZWXYxmYfnd
26svFzKRdmF73c5RJu5tyRJX2sdA7Kh6UnkAH/tcdDae3s4FQ7VEo4g8Lj+p
euvjSQZmZO9rmT3BwuXg7oa+Iwwc+fwq9ttjOnZ9dxKnPKWh8rhH0LpQCu4t
DnxqHE3Bs6kvRu7UUEEtK4zRGFbCPq+Q63p7SU6LDa02kyB5fFXcvcSMA3X7
xM3H3zGhcG7+F/oSNl4fn3L+1jkmlCwe336awkBnkr9j0gAD8W1Z8/3Jfp3Y
nTpwazk5H8p2g4+XlOH6e2e+5yU2pm95Rdnmo4JVYpoHnKyU8fqZ7OGBVi4e
b9FtOPeahwj97O5uczZ+PK+sUxphINhWdM1+kueUiZdZh9fQsd/4dK+dJQuV
HaoPVqvTIS16vvIei4/il17bHEifPZnDH50XxkLUU6/WU4E0GMq7mXjWMzEs
tnH0+hI6zKW6ZC7rkHpavePF/Xw2biRr532byUJK4r1u710sNKkVdDv1KWNj
x6c7qXweGmyviX25yIdSy5j/IyM+9tMGOq8E8uH+Tuyl7CEuOoOM4n+tVMZK
7VXzB3N5iI6J/DQkw0TWtBe1LkvJOqlcSNg8R4B45XmdRkc5YLygTXR3qUKG
1jVjI+GzxQu35K86rYbphVciqwa5GLELHZNyIB7iymn9PI2JoMyl2jIz+svK
7hv/2T85UFbwJsmi3FgS2sq7M468lEXKitM3qiLkCKd+T0y3oWCpVs4qiQuS
kJt6O+W2w1QMTkvo8WhVxUnZ6vOWd5Sxbc7ERK88DQltES3WKlRYUNrTpkbx
IHKjNbg0hYPEXdxj6oTT896tjes5zMafs1Jx1hfY+Fv8WeZoHhNqE/MeRgay
Ibor9qK1BhMZ1TItS/aT6/p8iPGM1CXr5Y6CzX9Jfz+Wv78skQVrp/IHa3hc
6Jpv/ulBcmjNl0DWblMaxKW71rptUUYQdcBk5142mNrfV4+vVcZV9sbAB4S3
BSlHU+nf+RiJKM9xWs+EqkOdFesZmc+YM/vBFwGKraZtCIwg+ZOm9WaohAnu
Nl/6pBkT+2WWV29Ro8COsXZ+8xUKvJt4VpulacgNLeQ+OMUEtWa+e/I2Jurl
7C7qvSL1OdzYlTafjQu/5rZI5rJQd3/Ax/4pE84D6yOLOCyIm6f+SDlE8u2b
0PpkOwv+hwfj/3+dmcaoy9qVLPR0bAnbmkrW5+V7z/XnaSi8KZswOMlAr05n
1AERBs5KLXDhF3IQfyXB+EUA4WdW6ALRGBrsfW5/ZJ5ioSDu6sFXYWrwPqex
9tocNnxzU5yEGQwodiT3PL7Fwsy5PnWX5rGwW/hS6NfARJgB70LDPOJld8yC
fq1g4ylLujntNhcJF9zKdlO4yI8cf3KcPO987Ym3yBE2jN6OST8ZYWPSOGu6
uQ8TeeOqNle9WDCcXXxJ35+Bq9+PFgy1keNutu8Y2snEjsKGTK1qwouzXFN8
OGwMGVW6nT1Gzr97jJ+axMIkRbgn0p+JBcMzMov/z5vHJctKM2nwer9+f7MO
DSdpMl+1vLh4c2zWlXzSXwNpTVF/95I5JtHrszeciQv+R978tGZj+YO5siNt
hOer3Z2vzOQhMyMnXus+2cdVNvnbmth4v6V9/S/itaLew/d9icfy+YlTflxl
YerTUguDtVy0KAUlpb4m3BAo9i2Y1N8Zj2FW2BEOPl/6Ja17gAuajnzARXsO
dK8tMl7ymoPxVevKsi+xcFbrmoSA1NV2qbLCJJJnQ+LPor90MLFwaGRL/QkW
3E3V36wolcdIXbsCj01HmFPOtLI0FsbuCCZPn+fgxJFTi48zGEi3eaO19zcD
o5Zt2zi9LGxWX6pXpsfA1+v0Q++LuXgofbKzkORox3IZi6+Ec5uYS2P56gyk
hsN5ViYDItezZf1H6HjlNr4snnDBLp2T5zRjaeTJ6yKL+uTRbOEZtjVKCeW8
pNXrH8hjVF4mcM9LBVT8kC3uIfsiVe64qdCFBY8js0JD57MwV9rdr66OibfT
l+vwXJlo0dtf1xjFRG1QSWIXlCBSefdrqRQT+yRuzDy2hAnT4A/iWqRfumfl
FTj8Ift0I/CAcBMD7yXZLfqfubBtrj66gtTtq/xL3Mtb1aE5OUVgRdbTfAZH
3M6ADxGfY+5KxwXwC9CssPjCRcayhws8qDzw2v+y5kYz8F3wfZnnBgZy6wZb
4zczccugy9c7lY7Gl3wuh/j1R91Tpofl6JC5oZHcpcyD/L5V/eY/aCiZODI8
s5B4yN14rQXXqUgqjgkJfMSCosjfyZaZbITHdKtfNuYhI/uigaIMCxKffty8
sIQB65aUOxaWDJTEhI0sV+Tg4gnlRloCE+2Lg4TfpHhImbbCYBOXje0G8o8s
l3Ew6+wR1jzCSfT6pKurFnLRrafwxPgh4cq3Z6rFozmYcUt024+/XCyVKTqb
F09DtpPCv5oQUn/tQq/KdB4mHQ9GmR3nwqrHN6izhnjBgSFBYSUbx/ult9Kt
WFij+LmaokXmhsIp65JqFjY6JgXy5/3/74ipM8dbBPg7YD232IkB56zYZs0e
cTwaE2tv2y+DwACzC23H+8sO3/2WvZHfW/Z2lmI7n+TZ5bK6wXl9VEQ+V9M5
0qOAMuXr/3a/VUTivmv+Lup8hCqOxFwkufglnJLRcYGK+IKS0MByKlRMZpeO
DzPRI79KQXcp8fESTa9a0kcng6beTP9/vktTrOidXMjp9/bcj+PA/VTVjXor
GmLX2TW+vklHxhb3y+Fn6FhX21B8zZOPNr2wt7ak/8ZZHrOfeJL52FoUcD+b
ifKij99+7eeh9+XeVmNJsu7ui7d5yHMg3XA4aSWZ12Lv7vMyb5F82KZn1BnC
gCFFJ1f3Pg1TbXSfvL6hDHuqdvfxQiqWKykY/ppPg7XRh29K/6Tx+qNj9X26
KD5Qi9bfmTVetrMkYcOiDySvZbOywrgMrDiva2AXwMDj7vsvz1nQ8W6Rnkm0
LB3ea39M3iujI2n18NyPJgz8TTkafi6Lgi+jow3nXGkIOeG/fX4mFe4ascdv
faYjMJYjN0D8UNtsr02EMxNGL3kLCn7TsONPfk5nFh0PFrEfGAloqN3TKv3F
kwHV0FNc829M0LKfbeiyZWDAaWbM3L9UjMo8e8+xUUX4tcBFh2PoSKxn/dbw
ZmH1gXdSrHQaXPQlDfe2iEH6nG3b8cvicKoep72Q+1u2aUbBlA/k+v5pjyXv
SxZFqEni5bVVYthxAi9yy+l4r36zqoDwVH3X8Z3XbrBx5M/2PtNuKjij/CUd
0nT427L7d5D1NTuZV5xXxIIMe0HO9FIqcnT61Gy3cqC/9WrWuxsslO89/Ey8
hQ+9x0ax++h0ZNp+G5aNpCP47azdUbZMPLr0/td1Vzk0FXclm8mR+TGnK8Vx
nIZesezjqrY0jDy++dahgYYzqbuieoxp+PvWmVGqTrwudFrlqS8U/A0fq3x0
kAat+4+sDpB10pk2/7fPJgrSojzlZu9UwmeHAr1rZN8ry2uW3/ak4L3I+u/n
Liuh4v1BuuUaRSRzMzJctyuhM9TC8cZKRZQE9528p0nD7PYTcld4ihAJuzgz
5A8VbsItnaaadOT26K5jPKLjkuG0ymtvKPAbePdwqRodITuXJy4zo+LM+9MX
VbbR8TT9XKbnEyWcLfWNiOvioaq1+KHhKiaMOYqby7JUsWIJZ1//PzpEPeRE
8myU8OTKvfLYF1PxXdwo9L0zBaKmSV13l8th+hd144NThLjc/nhpixgF3IzE
zmlmPNguePo3NoQC2iPla6JdNKyQnDJ/9kclCIcczF9nkzmiWuaoQ7jIzHfi
tE8zE98T3WWP2VIRPWpTwyRztPP0LTHhbTb6BSYzejYS3l/+zEy+lYkRmigv
VUjDZPgBl+YSkj8Pn2iaNnGxo7ezprWf5MfI9m2nZDjIrhva7n+JAqvD6nnn
9cRw4U+wnPoNSVw/c/fUukNiiL4Ss7v5hyy4HZHnaR0/ytZ82/daIfRnmafq
ie27Lokg6vzshClK0jD9E6FzUk0Ome1KXZfsZEA71bR8aiUT02UD2v7GMrA7
PrJh63Ti7V9av4r50HHs3qpPocN0OCVM348wsg9Sx4LHc+mYWWUccpNc7/LZ
6yVXEr4UuyRf5MJgQ0mCqfT2BQsNrqv8Hy7j4c25SvNH8zmgak6Uy8/hQO33
KNbcJRwWPG/J5FM20r4edGjSZ2Gn2Iun//99jqfs5kapPh7kisSerzdQhu67
SuRLCbDxueHvh2YCzHntv3F/FhPFrX8EiwwEiNiz4UnoXjKvnr4vplOFYIsH
h1n0c9E7tDF2Tw0P5m8CObPuCeAV7vxwdh4Xmn+T+xUK2KjuS/qcRfyNs2Xx
9HEFFlzsxJKTDrHQrOjJXm1CeEnDOeLXQxY+Biy7kfWGCu3dZ6+f86BCrIqm
a97Ow4sD3Oy39Qz0iUTtrg1hI0Eut2nJGPF/I3WPhTQ2BE9udkQaMRG4/Y2X
SwHhi6GPjls/MHHS5NO0T35MrNCc/X4WyZWVdkO+k6TPk+5UxZjW0xFnOFMj
bhcDW5mvitVnU7Gn6MSq16TvV4zWHdpOfq+5dvlN2ROknve8sqy5JQBnee6t
hZ/VcM8zfpVEJhMS9PXPEnZyITlQkXV/lI0vCbLVS2eSvo/1PZK+mQ2dQRtN
2YWEc2X8Lm7fyMCihw0XpfppMDLXKD76k+TQLtGjKsSXx7gHl+w2pIM108ut
ZJiFMwbSFjjGxOF/LkU3GSxcvCZ+VWYVG4g9zVvuzcSXgVczpd8Qf9Dqi40B
BTIj72r1MygIN6wRTYng4XGrd/q0dAZGAh9Y185n4tgtj4ePCb94iO22FCV8
PunnkppGvOqEuWqGPuHipMD5bvnk/EqCaz5HVFHxsChJaPieivB7+zyadGlI
bO2a9o1BhY+Eww/1i0ooe5R80POWIqrevx6UWUG408fGO6GBjU8x5xPPEs8y
ZK060RJL+i7CbGvEajasF5iomBeS8xm6dPdkDgvR9dWMggMM6H+2UVN4woDM
97BCPVLnDbOezC+xYGOq/IFOvgcH6QP9BuP2QoxeG0xh0ZnQGoqN8zvJAgzX
2ieP0eFmdUDxoR8L+xJVTI8ZsmC+bfBtxyoWzr2WmCy/zcCOhTbspmI2gpZ9
UnowmwXGNqryMgkO/soHnLI/zMK7HyIxv8MFEElwi7Pu4CJEPjFuHpOLIMur
ETaEMzPLtso6exK/sbc6eQ1MfOtU/1RFuLpoa/VI+VvCITez+bsoDKwzC9/k
U0zHUqMPFqUL2Nic8sn5MfH4yZh9aRLhdNxu3LvA6wENR7Xv7nXpIfXQ4LTO
Mp8D/9xNFlXNLLT3KZQlihA+2DXRV9xGx8XAxXnBunRU9eQdqkukIDvshZoM
WwlzMh/83PhKCXnLyk23B8rCIrfmZnG+At7Kpt00uzQVruxNHpsVqCiWpJos
ilPAibzcq5vlOGi11nV6J8rEk894Zv6L9OG7xSIqUTQkx/fovflIjmORKW9N
/H9rR8PHKzeYCO5dJWr8joo5upWpVZEM3HQVru0hdXCn+K3lEZKfaw7MPxnp
S8V0KcPh585smBtm3l2qysal4kO2GxvZcK3M4sWTuvq0INhcnHil0863byo3
MHHd7pP/dncevn9qvbZnNx/emT9YbqR/XDRiQt/85mDQINbTeT8d24frdY2C
GJjf78AKLiLe7v/Q5WAnBaa5vu6WNDqKzl0wG/5Nheek+2g38a+bt3tL161m
4YqBdfLKxcQHl3vppO2k4E3HT5oZeZ208pw3eflKuDi35fXDTDK/3+zK5H9j
4IE9Z9MScTrM/L84+jGZqLSRfnqYeF1Xk4Hh2mUkdyc+KxuQOWf5Nm3bXgsK
foi6q0+Qerk6w/BkD+n39ef5oY9uK+Nmjrr5mDIDNUojSy/HkLp2GxM9P8ZB
18oo5KeTupq+h7LrFAfNL0vb/lZSoQaaqqEJ8YlPfssdSb2KBOwX+6XFwceW
j0qro7gYnKfutG49C9PChNOfn2bDpWbDibJuLl43zzSYTup51vD8q0VjbNx/
stvrPPGUsLi42U8n6DhttuFv/nc5VHQW7LyVJodURbpQb640zAxM7iXdV0S0
lq6lfsdUFLrMvuWsR0Gtk27FowUTZQadUht77URwIKtBOZzJQ/KO+Nmvq/h4
fsDEYaUdi/Bh3KZ3fC5UJTZHFxCOXLBAS2PYRB5pEQlmLqRf/358Hf+BXEdZ
y1Hm8TDinc57HtwkPjSeU3D9XIAyaF67/+z8yUQ2XenQ1kwW9pp1JJyUZyFq
41UHD60paEkKfnGOq4CY6qb1tAAyBwuKnQNdqNi1a+Hdmc/J/utTTV4eoqBo
KS0lJ4QL9/31OeMXSJ4fNP+48jMFi93OJaT5MrCL1uk1fQHhpkpZnng/BVcG
Z5ulatPhS7XsX03m6jyVwLupBTRy3rVFarPoGBRxP0axoWDnTdf4aYsouN+7
kD5xg47lHIFn4yU6OuYKDkRSGegPSiibK06FekDYo5ekf3X4zazv8/iYcOfs
ab/Kx433fhu2BBKOEHW29SXz+XzPA40GMteox3uOtQTRIV7v+qy/go0NXZ5S
qxWYWI5sl7I+NkovdLxMt2DhS4bCoQI28e29B9P1FnBh9GZI9yDxa0uAZnuA
jbLTW/d0i7AQr5xW/O43Gw9U5Gjvg1nwnjP3UF+kEqqLc1etmcGEa9fhEIUc
CRS3aNCoq6VR7bWZwyUe2BHMOPXjGQePDF/5Zfxgw03XyMk/ggnvZ0ba/39v
6Aqfjg/Zf1j4bpe0bstZBjo6lLM9AtkQmy9wkCJz+6Fq/FzVMyzIxmQZeiwm
+WCRcuvVNAZmWInSKfZyMI8vK9pYyMSAwZpmtWgaWEtD+S906Kg31Ods81ZC
lNJvbf0RFtQltr/dQK43+eEjy7Nk/k+Uo+TYEOGG6SZHp1YwsPBr7tR9pB+N
nk3MebGRBfGLz0u2E686unjQ6zRZ17YzIQdPPmEiSZIxX7aTh4U6hXt8xcn7
HuXdrFHm44/jh8fuYmyEsLPuDZpwkWuaPPUS4UXOSmZuIZ+DH12iMu+O0MGv
HgwMIHNLxF7vcjSPgdZnzzf03WKCHq06W4fw44LFOw5u5LJwmlZxTHaA+Mwx
7/1Tl9IIl3CiRmrYON3fvPWuFskLkUv+JpYUvHTdP7LRkYklvvyp2VvZWBM9
EL1pkoVS170xi0ZlUGwz48gbDWn8ytnlqxNKx7bNqp3vp9PxRtmjQ2cfDZsK
Pt2epFOhIV65etYUDrRK77wX5HIwejxvaMv/97cL45k/9BQg9+nOiWI3Nhyj
d9n84XJxTnGaYfgeNmhCmwPvTlNhGtI30JnHQJebVMolNw4+XVcOjtjNxE+R
6WnZHDaEU+gVTe1stLeFmajfV8bFHAfPmxQmhh52pe004cA8oS4iIpfwU2/2
5BPCi+8cwvINf3IQV/E8fboxG3Onyt6/SOZIgPn1y5kXlPBz6UWTW+5sRDlp
yER2spGy8/n6FeMMBGe6h0atIK+rnQgPUp4KWk9WxOhrwnlz2DqHv/CRZvZp
y2Fbso56WocPChnw9ysaDc1nIDzg7d23DVTQEjeFObxh4EPF6qvDL3iY0/7I
M5VDR1lSv7ek/BRcq/LMMZguht49gzIuplPAbUjS1fYRA/37h8kGY1JfUzkv
7YV8PEo7tFWbeMAjL6P7Gcs5UHToMvv6j4Un4/GnKEUcaCTlWTtYMSBc+frZ
wS0U2OWUSgrEFcDILJMMDWThvOFgWiLp/6+JirJUJTZ+vkx44U/W6Xjcnryz
5HnFP5Ojhd+Jly677WrYQXIytD7v7Foa2tcUOObMoaE5/sRukd08/PEzOuN7
kvTn/LznlWVKuPkrrPXFfgpaDludrV5HQ4ylwth2WSUsz7A8MUB4uu+45znN
QhY8pDY9M7vAxbV55bZViRxoJkyG1hMvz1O4QksK58DpaaO2awJ5XNX7tzGA
cI5xm/yl+R1l1F0ieWP+b8v2uH3PfHdyqGxkyVeeUeto2f7leSFHHxCO7ttW
ucuUja3HGqpC5jEJbzm+8Rhg4MmulJEbTD6Uv7pti7rFgaukeXbHKiUomp5M
PJZDgfebQ98jrjEwzpEU12AwoTJLY45XKMkl/djQpjAadNVmscrusTCjX0m+
N41wZc5k1D0VBn5vH/G/kshClfXrXqlDdLTky879pUzHGe780r0ybJw9yngm
JWRBv+Nx32ExGho2ZB+f78tECjP1yHnCyfE3DsQW+RJvvrBXGBLIwJlgc68n
B5l4Oeu5o+EAG4nHZP7e+ELDI42tKj0rVLHRqr1sSbYABYyprWtO8dErSHZN
G+Li0WjZzKh7fFwIfBI2n8/D8UIzv63lAkzeDdsVUsnBw/iirP/vSzo7MtC+
pIgHUZndxe8VhKhQeucUmMrBcMDvWz2eLDwU1F31vs9G2KXpGW4iXHw1fxTp
X0F81eRUUkKEJPzOGtoGx0jhY6LNnbvdHCxrqb8/m3jMnonojEFnLqYlDm25
cJmNf7Hd4T13OdjaPhi3IpGLVUMnn3I/8NBr+qvkFfn5r8sJItkkz8rLhloF
swjfyjplyOryUX10PUOxnI0Vid+MHoayMbbJe20E4e4lQYkLpynzcHTy4rTf
lwhPLV4Scb9UBZ9qHscc+sxCU30j7WYhB6vXyzhnR3OQsUO6I3SYh6EVy++s
KBZg0OlyrYgaH4+tqh/aUQnXvP8x0HKEjaXBn162LuVhpqr+wYIOHja+esq6
ba+M/KA3JjwyjyPnOtzqc+NjdZPzK9ejXCTUP0q9YM7DRU7QY6PTLKT0xejf
BRvF/kbJD2gsrMnOePRKmQPfBfeXO2zn4MTIld4+SwacrGzEEq4RDoo1UzIk
XPn6tLXOT2Mu2tOr8qfQuShqwnf8YuHYq4qUGb4s2J6vfb0nSR4T1xvtu5tl
EFNP8/5NuOL6OjXuZk0mfN9b/ZE/SvLD40zzJJcO4WTRQPRpUo9h665falKE
pMoMt5qPPHyQu6osfU0Iw0u7NoQXsdEyINS5GCPA/WfZjcPGHHiPM1PDoui4
yTe/cHlABcLIstAV8TwMJ9UWrTrJQWUcazBgMfHAHPfmKQZc1BrpPFLzVsHj
xLYTK9hsqIWl3FX2JdexeIXOrVdcnJm6c3J4Kw+HvrSfUpdURW6UvUnjTy5e
fvzwRXoxGxX6wkWPgnk4+cw5MfkzFx9LhkNTSN3YB9U8OvyGDQ+dcF7L//dd
MDzae82RcMTP0BQdKR54K79ELDwnQKLwcXPLPh78Aj37pjP42JnLEmaPEn5L
q/O4f4qNzvJocVVPLiYr1pw8PJ2PiycuNa4n50/b5GwmeksMs+ZZnrL4LYbj
iQVhf6myqFhVe/otVQrVbnLex1sFON0rVbXdVhleQzeTaYYcpDi4G8zw4qHR
7Up97zU2KGd+UzZ85aG8ZvXZ3Xv5yEtfmVSkL4CL1e3A3osqUPr1Ze6uEA6y
5uX9CjrFg38wbegz4ctadVP/++1cXFzu9EZQz8EpRS9qP/FW0eM3888Srn+x
Lt2l9RwX6RNnrIJI7q1Tg2R8Ig/FerbRSkZceCvOsDN25OBx3uXr3deJvz2J
vr/xGAduSd9n2JayMWg+onMkinCW8d2SCMLn3wdUF2+7z0BB04xNq20Y+PF3
il3bFwGic0dSrnLI+413i+btIrxnor7N4BADV7w/7nfcw0fDqndvS++w4X9l
yFxcivh+iP/G8Xwmtnmcq2q+SoNNa8X9f8STisSehQROpeDnHqtw2RcUWHml
+Y3Jc1At9uqe9TcOJK7XDTx1Jv30KKrAtIoHEf7Z2FVcZXyatvjsqxxSXzlL
qMEi/39uKBvsbqwM64JZka09XGxdaFN5KJmLnpmRO44IpBC161+1WqAkplMS
FqYMDpV1Pf01ptr4p6xWfZ6E5gNS1/0n+D4zSf+ceZuev4PMKTejzD8kV94m
Plmx2ISF+5d8k2WvKEFpIF7kwCUGzBf7dJ4PZ+CNgYzOxFk2ajd9vj0qxoBF
gOHy12TdrQ817aEr8cFofTRP/C8fUw7E2Jue4cD0Ubf4wv/vn3ssucRqGxOX
hxXy80jO7uu5E/xkRBmSCaWuFaYq8Bd8CDoloow93s4/siy5+Fw3zM1pEeKf
he6RWj0eLK3Tp5We5yPXNnfVbXWS1xErvVPX8/DwmBc3TJuNm6LbNifROZDd
Plt9UomHvTWeqw3i2TiW+uWXGFMI7dpd34Y6SD5eM5c4e5iHY6scktL+5xr2
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
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"log share - data\"", TraditionalForm], 
    FormBox["\"log share - model\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Large,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox[
   "\"CFS expenditure shares: data vs. model, balanced trade\"", 
    TraditionalForm],
  PlotRange->{{-14.163580934558652`, 0}, {-11.029948331568937`, 0}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7345036982432566`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"c4993c06-c0e2-4e3f-8ed4-bf3329415896"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10984", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.7345036982532563`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"b2bbd92a-6afc-4a9f-ab41-e7f1ac11674c"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Data for reduced form regressions", "Subchapter",
 CellChangeTimes->{{3.6360523783166423`*^9, 3.6360523945172625`*^9}, {
   3.6410598266460366`*^9, 3.641059837631135*^9}, {3.6410599138247538`*^9, 
   3.641059924077779*^9}, {3.6412278754241858`*^9, 3.6412278757682204`*^9}, {
   3.678113051412741*^9, 3.6781130529927435`*^9}, 
   3.6805183196565347`*^9},ExpressionUUID->"83578512-958b-4b51-afa4-\
af94e9e33eb8"],

Cell[CellGroupData[{

Cell["Land prices", "Section",
 CellChangeTimes->{{3.642160418994342*^9, 
  3.642160420354342*^9}},ExpressionUUID->"17aedbe4-6dc5-43bb-bf59-\
e5594a150aa9"],

Cell["Exporting model-based land prices", "Text",
 CellChangeTimes->{{3.7344613029344997`*^9, 
  3.7344613117695932`*^9}},ExpressionUUID->"1d00e049-4fb4-428c-a1ba-\
0d2f1a8907da"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"landPrice", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", "\[Alpha]"}], ")"}], 
    FractionBox["resIncome", "landArea"]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"landPriceDef", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", "\[Alpha]"}], ")"}], 
    FractionBox[
     RowBox[{"resIncome", "+", "deficit"}], "landArea"]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"varnames", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "\"\<land_price_nodeficit\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<land_price_deficit\>\"", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"varnames", ",", 
     RowBox[{"{", 
      RowBox[{"landPrice", ",", "landPriceDef"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<data\\\\land_prices_fullTD.csv\>\"", ",", " ", "out"}], "]"}],
   " "}]}], "Input",
 CellChangeTimes->{{3.642160438993342*^9, 3.642160583079342*^9}, {
  3.6527026703847666`*^9, 3.652702671054767*^9}, {3.734461276602377*^9, 
  3.7344612842926054`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"fb6a0728-4fd4-454e-b654-5a9621b7e312"],

Cell[BoxData["\<\"data\\\\land_prices_fullTD.csv\"\>"], "Output",
 CellChangeTimes->{3.7345037284873037`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"587a162b-fc0f-43a0-bfa6-1037eddc9037"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Amenities inversion", "Section",
 CellChangeTimes->{{3.6847539154143324`*^9, 
  3.6847539210463448`*^9}},ExpressionUUID->"a1c9b46e-336e-45d0-aaaf-\
01680b1b8e81"],

Cell["\<\
This code computes amenity values that rationalize the observed commuting \
flows. They are used in generating data for footnote 25.\
\>", "Text",
 CellChangeTimes->{{3.7344644333056583`*^9, 
  3.7344645107920337`*^9}},ExpressionUUID->"0b43971d-67c7-43c1-82d1-\
af6c78d21671"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"amenitiesBni", "=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "commcost", ",", "nlevel", ",", "ilevel", ",", "nilevel", ",", 
        "bniguess", ",", "bninext", ",", "\[IndentingNewLine]", "dist", ",", 
        "tol", ",", "c", ",", "num", ",", "den", ",", "rhs", ",", "gap", ",", 
        "adj", ",", "mean", ",", "totflows", ",", "gapC", ",", "distC"}], 
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gapC", "=", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"rr", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "gg", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gg", "=", 
              FractionBox["\[Lambda]", 
               RowBox[{"rr", "+", "isCommuting", "-", "1"}]]}], ";", " ", 
             "\[IndentingNewLine]", "gg"}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"distC", "=", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"gg", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "dd", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"dd", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"gg", " ", "-", "1"}], "]"}], " ", "isCommuting"}], 
               "]"}]}], ";", " ", "\[IndentingNewLine]", "dd"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"commcost", "=", 
        SuperscriptBox["distancesAllPairs", 
         RowBox[{
          RowBox[{"-", "\[Phi]"}], " ", "\[Epsilon]", " "}]]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"commcost", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "1"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"nlevel", "=", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox["workplaceEmp", 
            RowBox[{"Diagonal", "[", "\[Pi]niOnlyTrading", "]"}]], ")"}], 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"\[Alpha]", " ", "\[Epsilon]"}], 
            RowBox[{"\[Sigma]", "-", "1"}]]}]], 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox["prodOnlyTrading", "workplaceWage"], ")"}], 
          RowBox[{"\[Alpha]", " ", "\[Epsilon]"}]], 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"resWage", " ", "resEmp"}], "landArea"], ")"}], 
          RowBox[{
           RowBox[{"-", "\[Epsilon]"}], " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", "\[Alpha]"}], ")"}]}]]}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ilevel", "=", 
        SuperscriptBox["workplaceWage", "\[Epsilon]"]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"nilevel", "=", 
        RowBox[{"commcost", " ", 
         RowBox[{"Outer", "[", 
          RowBox[{"Times", ",", "nlevel", ",", "ilevel"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"bniguess", "=", 
        FractionBox["\[Lambda]", 
         FractionBox[
          RowBox[{"Total", "[", 
           RowBox[{"\[Lambda]", ",", "2"}], "]"}], 
          RowBox[{"Total", "[", 
           RowBox[{"isCommuting", ",", "2"}], "]"}]]]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
        "mean", " ", "is", " ", "one", " ", "among", " ", "those", " ", 
         "with", " ", "positive", " ", "commuting"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"dist", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"tol", "=", 
        SuperscriptBox["10", 
         RowBox[{"-", "6"}]]}], ";", "\[IndentingNewLine]", 
       RowBox[{"c", "=", "0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"adj", "=", "0.3"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"totflows", "=", 
        RowBox[{"Total", "[", 
         RowBox[{"isCommutingSp", ",", "2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"dist", ">", "tol"}], " ", "&&", "  ", 
          RowBox[{"c", "<", "100000"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", 
           RowBox[{"c", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"new", " ", "set", " ", "of", " ", "numerators"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"num", "=", 
           RowBox[{"bniguess", " ", "nilevel"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"den", "=", 
           RowBox[{"Total", "[", 
            RowBox[{"num", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"rhs", "=", 
           RowBox[{"num", " ", 
            FractionBox["population", "den"]}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"gap", "=", 
           RowBox[{"gapC", "[", "rhs", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"dist", "=", 
           RowBox[{"distC", "[", "gap", "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"bninext", "=", 
           RowBox[{"gap", " ", "bniguess"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"mean", "=", 
           FractionBox[
            RowBox[{"Total", "[", 
             RowBox[{"bninext", ",", "2"}], "]"}], "totflows"]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"bninext", "=", 
           FractionBox["bninext", "mean"]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"bniguess", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "-", "adj"}], ")"}], " ", "bniguess"}], " ", "+", 
            " ", 
            RowBox[{"adj", " ", "bninext"}]}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"(*", "diagnostics", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Mod", "[", 
               RowBox[{"c", ",", "10"}], "]"}], "\[Equal]", "0"}], "  ", "&&",
              " ", 
             RowBox[{"dist", ">", "0.0001"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<end of iteration \>\"", ",", "c", ",", " ", 
              RowBox[{"\"\< at \>\"", " ", 
               RowBox[{"DateString", "[", "]"}]}], ",", " ", 
              "\"\<; max gap: \>\"", ",", "dist", ",", " ", " ", 
              "\"\< - \>\"", ",", 
              RowBox[{"Min", "[", "bniguess", "]"}], ",", "\"\< \>\"", ",", 
              RowBox[{"Max", "[", "bniguess", "]"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<end of iteration \>\"", ",", "c", ",", " ", 
         RowBox[{"\"\< at \>\"", " ", 
          RowBox[{"DateString", "[", "]"}]}], ",", " ", "\"\<; max gap: \>\"",
          ",", "dist", ",", " ", " ", "\"\< - \>\"", ",", 
         RowBox[{"Min", "[", "bniguess", "]"}], ",", "\"\< \>\"", ",", 
         RowBox[{"Max", "[", "bniguess", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<mean \>\"", ",", 
         FractionBox[
          RowBox[{"Total", "[", 
           RowBox[{"bniguess", ",", "2"}], "]"}], 
          RowBox[{"Total", "[", 
           RowBox[{"isCommuting", ",", "2"}], "]"}]]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"num", "=", 
        RowBox[{"bniguess", " ", "nilevel"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"den", "=", 
        RowBox[{"Total", "[", 
         RowBox[{"num", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"rhs", "=", 
        RowBox[{"num", " ", 
         FractionBox["population", "den"]}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"gap", "=", 
        RowBox[{"gapC", "[", "rhs", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dist", "=", 
        RowBox[{"distC", "[", "gap", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<dist: \>\"", ",", "dist"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\[Lambda]", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "8"}], ",", 
            RowBox[{"1", ";;", "8"}]}], "]"}], "]"}], "//", "MatrixForm"}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"rhs", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "8"}], ",", 
            RowBox[{"1", ";;", "8"}]}], "]"}], "]"}], "//", "MatrixForm"}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"gap", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "8"}], ",", 
            RowBox[{"1", ";;", "8"}]}], "]"}], "]"}], "//", "MatrixForm"}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "bniguess"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", " ", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6847565615700903`*^9, 3.684756803183471*^9}, {
   3.6847568453335433`*^9, 3.684756860376568*^9}, {3.684756892966818*^9, 
   3.68475695081993*^9}, {3.684756989250987*^9, 3.684757138958478*^9}, {
   3.6847571722786694`*^9, 3.6847572208047423`*^9}, {3.684759016400767*^9, 
   3.684759023747779*^9}, {3.684759092562885*^9, 3.6847591497560377`*^9}, {
   3.6847592297312517`*^9, 3.6847593126013756`*^9}, 3.684760890763096*^9, {
   3.684760935620163*^9, 3.684760937130165*^9}, {3.684760976843233*^9, 
   3.684760987316248*^9}, {3.6847611315344777`*^9, 3.6847612303396273`*^9}, {
   3.6847613112293234`*^9, 3.684761388230442*^9}, {3.684761460045551*^9, 
   3.684761518545639*^9}, {3.6847615497757063`*^9, 3.6847616167058067`*^9}, {
   3.6847616662699757`*^9, 3.684761763772129*^9}, 3.6847618200502157`*^9, {
   3.684761862246278*^9, 3.6847619474004087`*^9}, {3.684762052188566*^9, 
   3.6847620935286264`*^9}, {3.6847621307331533`*^9, 3.68476236660351*^9}, {
   3.6847624103125887`*^9, 3.6847624123425922`*^9}, {3.684762640806943*^9, 
   3.6847626477979536`*^9}, {3.684762759849121*^9, 3.6847627960191793`*^9}, {
   3.6847628448142548`*^9, 3.684762869592292*^9}, {3.6847629138383894`*^9, 
   3.684762932574417*^9}, {3.684762970297472*^9, 3.684762979767485*^9}, {
   3.68476303035156*^9, 3.6847630724546223`*^9}, {3.6847631427437277`*^9, 
   3.6847631687907667`*^9}, {3.6847632124268627`*^9, 
   3.6847634201932364`*^9}, {3.6847634573912907`*^9, 
   3.6847634603372955`*^9}, {3.6847635136353736`*^9, 
   3.6847636535196486`*^9}, {3.6847637033557224`*^9, 3.684763830711914*^9}, {
   3.6847639102730327`*^9, 3.6847640137832527`*^9}, {3.684764059593378*^9, 
   3.684764059755378*^9}, {3.6847640978674345`*^9, 3.6847641000474377`*^9}, {
   3.684764131933664*^9, 3.6847641754797277`*^9}, {3.684764264844877*^9, 
   3.684764310832943*^9}, {3.684764378565076*^9, 3.6847643799530783`*^9}, {
   3.684764419398137*^9, 3.684764424698145*^9}, {3.6847655783136024`*^9, 
   3.684765579193604*^9}, {3.6847659284822083`*^9, 3.6847660432243814`*^9}, {
   3.684766314355798*^9, 3.6847663956429214`*^9}, {3.734464519589724*^9, 
   3.7344645324057064`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"55a3bc79-2251-4cc2-a322-fad38b376164"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<data\\\\amenitiesBni.csv\>\"", ",", " ", "amenitiesBni"}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6847669652328405`*^9, 3.6847669793358617`*^9}, {
  3.7344645518580837`*^9, 3.7344645537717924`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"e64a23e1-cae5-4525-aa5d-eca7ffab4ac9"]
}, Closed]],

Cell[CellGroupData[{

Cell["Statistics and partial derivatives", "Section",
 CellChangeTimes->{{3.642160408435342*^9, 
  3.642160414458342*^9}},ExpressionUUID->"79349318-1d76-40a4-80e8-\
40b5d4172632"],

Cell["\<\
This section generates the \
\[OpenCurlyDoubleQuote]data_for_reduced_form_fullTD.csv\
\[CloseCurlyDoubleQuote] file in the data folder. This file contains partial \
derivatives for commuting, counties productivities and other statistics used \
in the stata file. \
\>", "Text",
 CellChangeTimes->{{3.734505095794833*^9, 
  3.734505184113984*^9}},ExpressionUUID->"df35d54f-8bd9-45b5-9469-\
32bf5fde4cf9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"workIncome", "=", 
    FractionBox[
     RowBox[{"workplaceWage", " ", "workplaceEmp"}], 
     SuperscriptBox["10", "6"]]}], ";"}], " "}]], "Input",
 CellLabel->
  "In[117]:=",ExpressionUUID->"f6e3caed-e417-47bb-aba8-7451c690acfc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6412310562312346`*^9, 3.641231139384549*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"b53e66b2-fbec-4c97-8448-6e5efdd4542b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Exporting", " ", "own", " ", "elasticities"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "varnames", ",", "isIn120", ",", "emplAround", ",", "weights", ",", 
       "workplaceWageAround", ",", "resAround", ",", "resWageAround", ",", 
       "out", ",", "temp1", ",", "z1", ",", "z2", ",", "z3", ",", "z4", ",", 
       "z5", " ", ",", "\[Alpha]rn", ",", "\[Mu]rn", ",", "\[Lambda]rnr"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isIn120", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"distancesAllPairs", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "j"}], "]"}], "]"}], "\[LessEqual]", "120"}], 
           ",", "1", ",", "0"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"isIn120", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "0"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"emplAround", "=", 
       RowBox[{"isIn120", ".", "workplaceEmp"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"weights", "=", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"isIn120", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}], 
           FractionBox[
            RowBox[{"workplaceEmp", "[", 
             RowBox[{"[", "j", "]"}], "]"}], 
            RowBox[{
             RowBox[{"emplAround", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", 
             RowBox[{"isIn120", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "j"}], "]"}], "]"}], "-", "1"}]]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], " ", 
        "isIn120"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"workplaceWageAround", "=", 
       RowBox[{"weights", ".", "workplaceWage"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"resAround", "=", 
       RowBox[{"isIn120", ".", "resEmp"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"weights", "=", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"isIn120", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}], 
           FractionBox[
            RowBox[{"resEmp", "[", 
             RowBox[{"[", "j", "]"}], "]"}], 
            RowBox[{
             RowBox[{"resAround", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", 
             RowBox[{"isIn120", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "j"}], "]"}], "]"}], "-", "1"}]]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], " ", 
        "isIn120"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"resWageAround", "=", 
       RowBox[{"weights", ".", "resWage"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Alpha]rn", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          FractionBox["\[Pi]niOnlyTrading", "laborIncome"], "]"}], 
         RowBox[{"(", 
          RowBox[{"resIncome", "+", "deficit"}], ")"}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{"Total", "[", 
           RowBox[{"\[Alpha]rn", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Max", "[", 
          RowBox[{"Total", "[", 
           RowBox[{"\[Alpha]rn", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\[Mu]rn", "=", 
       RowBox[{"1.", " ", 
        RowBox[{"Transpose", "[", 
         FractionBox[
          RowBox[{"Transpose", "[", "\[Lambda]", "]"}], "workplaceEmp"], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"\[Lambda]rnr", "=", 
       RowBox[{"1.0", " ", 
        FractionBox["\[Lambda]", "resEmp"]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"z1", "=", 
       RowBox[{"Total", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Lambda]rnr"}], ")"}], " ", "\[Mu]rn"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"z2", "=", 
       RowBox[{
        RowBox[{"Diagonal", "[", "\[Mu]rn", "]"}], 
        RowBox[{"(", 
         RowBox[{
          FractionBox[
           RowBox[{"Diagonal", "[", "\[Lambda]", "]"}], "resEmp"], "-", 
          FractionBox["workplaceEmp", 
           RowBox[{"Total", "[", "workplaceEmp", "]"}]]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"z3", "=", 
       RowBox[{"Total", "[", 
        RowBox[{
         RowBox[{"\[Alpha]rn", " ", 
          RowBox[{"(", 
           RowBox[{"1", "-", "\[Pi]niOnlyTrading"}], ")"}]}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"for", " ", "a", " ", "fixed", " ", "row", " ", 
         RowBox[{"producer", "/", "seller"}], " ", "n"}], ",", " ", 
        RowBox[{
        "sum", " ", "across", " ", "all", " ", "residences", " ", "buying", 
         " ", "from", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"z4", "=", 
       RowBox[{"z1", " ", "z3"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"z5", "=", 
       RowBox[{"z2", " ", "z3"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"varnames", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "\"\<workplaceemp\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<resemp\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<workplacewage\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<resWage\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<emplAround\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<workplaceWageAround\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<resAround\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<resWageAround\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<landArea\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<lambda_nn_n\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<pd_commuting\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<pd_migration\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<pd_goods\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<pd_commuting_goods\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<pd_migration_goods\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<productivity\>\"", "}"}], ",", 
         RowBox[{"{", "\"\<deficit\>\"", "}"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"out", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"varnames", ",", 
         RowBox[{"{", 
          RowBox[{
          "workplaceEmp", ",", "resEmp", ",", "workplaceWage", ",", "resWage",
            ",", "emplAround", ",", "workplaceWageAround", ",", "resAround", 
           ",", "resWageAround", ",", "landArea", ",", 
           RowBox[{"Diagonal", "[", "\[Lambda]rnr", "]"}], ",", "z1", ",", 
           "z2", ",", "z3", ",", "z4", ",", "z5", ",", "prodOnlyTrading", ",",
            "deficit"}], "}"}], ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"out", "=", 
       RowBox[{"Transpose", "[", "out", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"out", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
       "\"\<data\\\\data_for_reduced_form_fullTD.csv\>\"", ",", " ", "out"}], 
       "]"}]}]}], " ", "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.636052470881898*^9, 3.636052518915701*^9}, {
   3.6360525591847277`*^9, 3.6360525928850975`*^9}, {3.6360526508708954`*^9, 
   3.6360527104408517`*^9}, {3.6360527742582326`*^9, 
   3.6360528400998163`*^9}, {3.6360529207018757`*^9, 
   3.6360529955373583`*^9}, {3.6360533846762686`*^9, 3.636053451957996*^9}, 
   3.636111319472726*^9, {3.6361121047363176`*^9, 3.6361121389296055`*^9}, {
   3.6361125716988926`*^9, 3.636112699969039*^9}, {3.636112984923641*^9, 
   3.636112996535919*^9}, 3.636113089237356*^9, {3.636113208476403*^9, 
   3.6361132351039853`*^9}, {3.636113944997055*^9, 3.6361141341474066`*^9}, {
   3.6361141759325843`*^9, 3.636114298720862*^9}, {3.6361151070629873`*^9, 
   3.6361151912624063`*^9}, {3.636115318198099*^9, 3.6361153230785866`*^9}, {
   3.6361161760234423`*^9, 3.636116176589046*^9}, {3.636116207463111*^9, 
   3.6361162263320494`*^9}, {3.636116273061386*^9, 3.6361163117175426`*^9}, {
   3.6361163629028144`*^9, 3.636116400848959*^9}, {3.636116461160289*^9, 
   3.6361164926519265`*^9}, {3.636116534478627*^9, 3.6361166056959887`*^9}, {
   3.6361166372646346`*^9, 3.636116638461243*^9}, {3.6361272931927805`*^9, 
   3.636127304675929*^9}, {3.636127868605316*^9, 3.6361278692983856`*^9}, 
   3.636127941436599*^9, {3.63612819197365*^9, 3.6361282116926217`*^9}, {
   3.636128547629212*^9, 3.6361286778282814`*^9}, {3.636129184949794*^9, 
   3.6361292073820367`*^9}, {3.6361292770250006`*^9, 3.636129300049303*^9}, {
   3.6361293329545927`*^9, 3.636129348866184*^9}, {3.6361293963824825`*^9, 
   3.6361295692151213`*^9}, {3.636131854289301*^9, 3.6361318678336554`*^9}, {
   3.6361322258774557`*^9, 3.636132232558124*^9}, {3.636132274277295*^9, 
   3.6361323185607233`*^9}, {3.6361323549873657`*^9, 
   3.6361323951423807`*^9}, {3.636132471510017*^9, 3.6361324753894043`*^9}, {
   3.636132507798645*^9, 3.6361326725411177`*^9}, {3.6361328232751894`*^9, 
   3.6361328886757293`*^9}, {3.636132918723734*^9, 3.636132931622023*^9}, {
   3.6361330194008007`*^9, 3.636133025450405*^9}, {3.6361331215840178`*^9, 
   3.6361331271125703`*^9}, {3.636735597532342*^9, 3.6367356198005686`*^9}, {
   3.636735657410329*^9, 3.636735739109498*^9}, {3.6367377960122232`*^9, 
   3.6367378059855547`*^9}, {3.6374961672175946`*^9, 
   3.6374961755534277`*^9}, {3.63749620757263*^9, 3.637496339447816*^9}, {
   3.637498283664218*^9, 3.6374982919780493`*^9}, {3.6374983383146825`*^9, 
   3.6374984756284122`*^9}, {3.637506662360074*^9, 3.6375066883936777`*^9}, {
   3.637577404720339*^9, 3.6375774091127777`*^9}, {3.638028540812004*^9, 
   3.638028569056426*^9}, {3.6380291791464877`*^9, 3.6380291805428977`*^9}, {
   3.64122792526817*^9, 3.641227962153858*^9}, 3.6412280095135937`*^9, {
   3.641228094140055*^9, 3.6412281112617674`*^9}, {3.641230577675384*^9, 
   3.6412306081244287`*^9}, {3.641231304389048*^9, 3.6412313410557146`*^9}, {
   3.6412313998455925`*^9, 3.64123143711932*^9}, {3.6412314985354605`*^9, 
   3.6412315105536623`*^9}, 3.641231643780984*^9, {3.6415566479759645`*^9, 
   3.6415566494189644`*^9}, 3.641556686230964*^9, {3.6418939036946135`*^9, 
   3.641893908187442*^9}, {3.6418943108416233`*^9, 3.6418943812292747`*^9}, {
   3.6421515803530817`*^9, 3.642151606753721*^9}, {3.642151647867832*^9, 
   3.642151660635109*^9}, {3.65270270837582*^9, 3.652702708995821*^9}, {
   3.73446139643764*^9, 3.734461416400076*^9}, 
   3.734505496145553*^9},ExpressionUUID->"59ded682-602a-4fed-913c-\
1aed43d5aaed"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Counterfactual Simulations", "Chapter",
 CellChangeTimes->{{3.734526963750633*^9, 
  3.734526973342654*^9}},ExpressionUUID->"169659b9-b64a-4308-b903-\
a584890f7dbd"],

Cell[CellGroupData[{

Cell["a) 5% shock to each county", "Subchapter",
 CellChangeTimes->{{3.6411478584431477`*^9, 3.64114788309711*^9}, 
   3.733931707139223*^9, {3.734089675704341*^9, 3.7340896784443493`*^9}, {
   3.7341689502046127`*^9, 3.7341689509056134`*^9}, {3.734172426111278*^9, 
   3.7341724267032785`*^9}, {3.734527089531886*^9, 3.7345270909948883`*^9}, 
   3.734527286453258*^9, {3.734527982532454*^9, 3.734527983182455*^9}, {
   3.734590797680554*^9, 
   3.7345908022828455`*^9}},ExpressionUUID->"c2cc4cc7-6ab5-4373-8803-\
764a3d044715"],

Cell["\<\
This section generates the data for the main results in section 3, 5% \
productivity shock to each county, across all counties. The data is then \
imported in Stata for processing. \
\>", "Text",
 CellChangeTimes->{{3.7340878209370346`*^9, 3.7340878679741893`*^9}, {
  3.7341697872758255`*^9, 3.734169787695826*^9}, {3.7344614840445747`*^9, 
  3.734461494879957*^9}, {3.7345262739234047`*^9, 
  3.734526286916427*^9}},ExpressionUUID->"a762f525-6cb5-4e58-9316-\
857ef3b3f62f"],

Cell["Set up of the simulations:", "Text",
 CellChangeTimes->{{3.623514213151874*^9, 3.623514218088924*^9}, {
  3.6243012660502205`*^9, 
  3.624301271932458*^9}},ExpressionUUID->"d13de291-fc1e-4ddb-8f3b-\
662085c19d34"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"varnames", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<Repetition\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<CountyLine\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LambdaNNHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PiNNHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<Ahat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<MeasuredProdHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ShipmentsHat\>\"", "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"setting", " ", "number", " ", "of", " ", 
     RowBox[{"replications", ":", " ", 
      RowBox[{"one", " ", "shock", " ", "per", " ", "county"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numberOfReplications", "=", "3111"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"complete", " ", "matrix", " ", "of", " ", 
     RowBox[{"shocks", ":", " ", 
      RowBox[{
      "row", " ", "number", " ", "N", " ", "has", " ", "the", " ", "shock", 
       " ", "profile", " ", "for", " ", "repetition", " ", "N"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"prodShocks", "=", 
     RowBox[{"1", "+", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Table", "[", 
        RowBox[{"0.05", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], 
        "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6235142279090242`*^9, 3.623514270250452*^9}, {
   3.6235144939377117`*^9, 3.623514521599989*^9}, {3.623521495295616*^9, 
   3.6235214959556227`*^9}, {3.623522678246557*^9, 3.6235227245710225`*^9}, {
   3.623522795089731*^9, 3.623522798495072*^9}, {3.6235228781300344`*^9, 
   3.6235228858188033`*^9}, {3.6235234819527054`*^9, 
   3.6235234947748337`*^9}, {3.623523570832595*^9, 3.6235235883727703`*^9}, {
   3.623534740185605*^9, 3.6235347420807943`*^9}, {3.623534925370121*^9, 
   3.6235349340259867`*^9}, {3.623535209225504*^9, 3.623535219027484*^9}, {
   3.623535255910172*^9, 3.6235352573663177`*^9}, {3.623535458931472*^9, 
   3.623535461024681*^9}, 3.6235358279077873`*^9, {3.623535874324253*^9, 
   3.623535874704257*^9}, {3.6235361428283052`*^9, 3.6235361533604126`*^9}, {
   3.623538576014176*^9, 3.623538576640239*^9}, 3.6235801268862333`*^9, {
   3.6235825766410437`*^9, 3.6235825779910574`*^9}, {3.6235829628293858`*^9, 
   3.6235829654026427`*^9}, {3.6235835964510045`*^9, 3.623583596954011*^9}, 
   3.623710728736875*^9, {3.623713332030875*^9, 3.623713337150875*^9}, {
   3.6243012883109646`*^9, 3.6243012892001705`*^9}, {3.6243019606663904`*^9, 
   3.6243019713064547`*^9}, {3.624303022659017*^9, 3.624303025638636*^9}, {
   3.6243036472239857`*^9, 3.6243036524188185`*^9}, {3.6243049548410263`*^9, 
   3.62430496378592*^9}, {3.6411479927758574`*^9, 3.6411479970034847`*^9}, {
   3.641209147539585*^9, 3.6412091572515554`*^9}, {3.641209864024226*^9, 
   3.6412098645352774`*^9}, {3.64158963745669*^9, 3.641589642950239*^9}, 
   3.6526978085839643`*^9, {3.7345057272159863`*^9, 3.7345057422380176`*^9}, {
   3.734506358681179*^9, 3.7345065044884367`*^9}, {3.734507270615474*^9, 
   3.7345073078195543`*^9}, {3.7345081308401713`*^9, 
   3.7345081521132126`*^9}},ExpressionUUID->"ba712180-4e09-45e8-834b-\
6a62217496f0"],

Cell["Computing outcomes", "Text",
 CellChangeTimes->{{3.623520025594915*^9, 
  3.6235200288102365`*^9}},ExpressionUUID->"6eb45026-00f0-4127-b64d-\
118d7f08188f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"out2", "=", 
   RowBox[{"Parallelize", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"countyProdShock", "[", 
       RowBox[{"rep", ",", 
        RowBox[{"prodShocks", "[", 
         RowBox[{"[", "rep", "]"}], "]"}], ",", "\[Eta]zero"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"rep", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}],
     "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.623516079626979*^9, 3.623516217545359*^9}, {
   3.623516449977686*^9, 3.623516461239957*^9}, 3.6235166335601873`*^9, {
   3.623518332919551*^9, 3.623518335165776*^9}, {3.6235184520764656`*^9, 
   3.6235185467549324`*^9}, {3.6235186413072433`*^9, 3.623518641637246*^9}, {
   3.6235193798406363`*^9, 3.6235194199130373`*^9}, {3.6235194550253887`*^9, 
   3.623519455255391*^9}, {3.6235195900827413`*^9, 3.6235195985028257`*^9}, {
   3.6235196430862713`*^9, 3.6235197935627785`*^9}, {3.6235198523983674`*^9, 
   3.623519934843194*^9}, {3.623519979451301*^9, 3.623520017636119*^9}, 
   3.623520075298885*^9, 3.6235201590072546`*^9, {3.6235341187481384`*^9, 
   3.6235341200091515`*^9}, {3.6235386037689514`*^9, 
   3.6235386321227865`*^9}, {3.623582371780312*^9, 3.6235823754356775`*^9}, {
   3.6235825620998983`*^9, 3.623582568860966*^9}, {3.623710102003875*^9, 
   3.623710106073875*^9}, 3.623712898013875*^9, {3.6237135282998753`*^9, 
   3.623713536210875*^9}, {3.623714018860875*^9, 3.623714045282875*^9}, {
   3.623714681569875*^9, 3.6237146937678747`*^9}, {3.6243021205247617`*^9, 
   3.6243021618202267`*^9}, {3.6251415503154964`*^9, 
   3.6251415522655087`*^9}, {3.6252520368454576`*^9, 3.6252520802868013`*^9}, 
   3.6267242734801636`*^9, {3.6412087197758126`*^9, 3.641208771136948*^9}, 
   3.6412091618920197`*^9, {3.652715284768613*^9, 3.652715306523857*^9}, {
   3.6527171719835553`*^9, 3.652717173150622*^9}, {3.7345058673822584`*^9, 
   3.734505871552265*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"772425d9-d0e4-4d08-8ed3-5986a170141b"],

Cell["Exporting data in separate files", "Text",
 CellChangeTimes->{{3.641209213788209*^9, 
  3.6412092217800083`*^9}},ExpressionUUID->"71cf7403-64bb-4c1b-b3c6-\
7d5a42a845e1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Started on \>\"", ",", 
    RowBox[{"DateString", "[", "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"repN", ",", "filename"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"repN", "=", 
        RowBox[{"ToString", "[", "rep", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rep", "<", "10"}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<000\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rep", "\[GreaterEqual]", "10"}], " ", "&&", " ", 
          RowBox[{"rep", "\[LessEqual]", "99"}]}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<00\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rep", "\[GreaterEqual]", "100"}], " ", "&&", " ", 
          RowBox[{"rep", "\[LessEqual]", "999"}]}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<0\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"filename", "=", 
        RowBox[{
        "\"\<data\\\\county shocks 5pct\\\\county_oneShock5pct_rep\>\"", "<>",
          "repN", "<>", "\"\<.csv\>\""}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", " ", 
         RowBox[{"out2", "[", 
          RowBox[{"[", 
           RowBox[{"rep", ",", "1"}], "]"}], "]"}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"rep", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<All export done on \>\"", ",", 
    RowBox[{"DateString", "[", "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.624132143367365*^9, 3.624132150917765*^9}, {
   3.624132376765565*^9, 3.624132396961565*^9}, {3.6241325854435654`*^9, 
   3.624132645104565*^9}, {3.6241326826801653`*^9, 3.624132703523765*^9}, 
   3.6241327349751654`*^9, {3.6241328228621655`*^9, 3.624132829365165*^9}, {
   3.624302331989519*^9, 3.6243023327383237`*^9}, {3.624302417388153*^9, 
   3.624302426250039*^9}, {3.624304792016388*^9, 3.624304872686841*^9}, {
   3.624964060704933*^9, 3.624964071481011*^9}, {3.6251412834577837`*^9, 
   3.6251412847681923`*^9}, 3.625252108065579*^9, {3.626724278472172*^9, 
   3.6267242800789747`*^9}, {3.626838697345999*^9, 3.626838698683132*^9}, {
   3.641148087247238*^9, 3.6411481238959026`*^9}, {3.6415898317171144`*^9, 
   3.6415898329602385`*^9}, {3.641853232806428*^9, 3.6418532382149687`*^9}, {
   3.6527070797303114`*^9, 3.652707097432324*^9}, {3.6527171683193455`*^9, 
   3.6527171685833607`*^9}, {3.652720414684027*^9, 3.6527204197943196`*^9}, {
   3.652722310534464*^9, 3.6527223116305265`*^9}, {3.6529660594221306`*^9, 
   3.652966061882134*^9}, {3.6532122054660454`*^9, 3.653212205776046*^9}, {
   3.7344615603393517`*^9, 3.734461562787151*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"0a95c2ea-85e1-4f72-9dc3-37a9a0d59cf1"],

Cell[TextData[{
 "Checking that all converged: max number of iteration is smaller than 2000, \
and distances from previous iteration smaller than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "6"}]], TraditionalForm]],ExpressionUUID->
  "2a13ca94-196d-4350-b6a9-1975bfc74846"]
}], "Text",
 CellChangeTimes->{{3.6243679326271677`*^9, 3.6243679391636095`*^9}, {
   3.624368283933448*^9, 3.6243683087556086`*^9}, {3.624968934306712*^9, 
   3.624968939795261*^9}, 
   3.641209264085238*^9},ExpressionUUID->"3af8faef-3875-4a53-ac24-\
90d9f4221e77"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "3"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "4"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.624367941659625*^9, 3.624368011094079*^9}, {
  3.6243682388871555`*^9, 3.624368276046995*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"74e33433-357f-46b3-a674-5e0cd4f019a4"]
}, Closed]],

Cell[CellGroupData[{

Cell["b) 5% productivity shocks in a world without commuting", "Subchapter",
 CellChangeTimes->{{3.68485853591669*^9, 3.6848585552367954`*^9}, {
   3.7341723078870535`*^9, 3.734172318728075*^9}, {3.7341724300452833`*^9, 
   3.7341724305752845`*^9}, {3.7345271588140182`*^9, 3.7345271601140203`*^9}, 
   3.7345272924852705`*^9, {3.7345279868944597`*^9, 
   3.7345279873444605`*^9}},ExpressionUUID->"205ceaa1-28c7-4c66-abca-\
264316f44d57"],

Cell["\<\
This section generates the data for figure C.7 in the appendix. The data is \
then imported in Stata for processing. \
\>", "Text",
 CellChangeTimes->{{3.7341723219710817`*^9, 3.73417236071515*^9}, {
   3.7344617489441233`*^9, 3.7344617506169505`*^9}, 
   3.7345262996544456`*^9},ExpressionUUID->"129b8709-982a-485e-b684-\
8fb41b8042ca"],

Cell[CellGroupData[{

Cell["A world with no commuting: generating initial values", "Subsection",
 CellChangeTimes->{{3.6420594507953873`*^9, 3.6420594544703875`*^9}, {
  3.652700221781415*^9, 
  3.6527002233744173`*^9}},ExpressionUUID->"ec201cf7-02fd-4290-acae-\
e0243f9cb4f9"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "productivity"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"300", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], "-", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Table", "[", 
        RowBox[{"299", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"el", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.642059549955387*^9, 3.642059572625387*^9}, 
   3.652699864722799*^9, {3.6542650943022704`*^9, 3.6542650985732765`*^9}, {
   3.684858958416856*^9, 3.6848589831592712`*^9}, {3.684859020984434*^9, 
   3.6848590243526273`*^9}, {3.734515622057502*^9, 3.734515622598502*^9}, {
   3.734515746714713*^9, 3.7345157676417522`*^9}, {3.7345159678542423`*^9, 
   3.7345159691653175`*^9}, {3.7345171438001933`*^9, 
   3.734517144033202*^9}},ExpressionUUID->"eb44d7bd-e0b2-49dd-9f6c-\
2ab219e52045"],

Cell["Computing changes from the initial equilibrium", "Text",
 CellChangeTimes->{{3.642059581752387*^9, 
  3.642059607427387*^9}},ExpressionUUID->"6ea89d3c-41e8-4ddc-ad3e-\
1106d2c7cad7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nocomm", "=", 
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "el", ",", "2"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"nocomm", "-", "1"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6420657605843873`*^9, 3.642065761441387*^9}, {
   3.68485899275982*^9, 3.684858997847111*^9}, {3.7345085721549797`*^9, 
   3.734508572587981*^9}, {3.7345155978714533`*^9, 3.73451560774247*^9}, 
   3.734515648388547*^9, {3.734515742861706*^9, 3.7345157634147453`*^9}, {
   3.7345159653250976`*^9, 3.734515973149545*^9}, {3.734516817644296*^9, 
   3.734516826449574*^9}, 
   3.7345168958534737`*^9},ExpressionUUID->"26c00071-3ccc-493f-9dee-\
31a8802cf3ba"],

Cell["Checking welfare", "Text",
 CellChangeTimes->{{3.6420658360743876`*^9, 
  3.6420658402823877`*^9}},ExpressionUUID->"c0afe8bf-d4d7-4433-80fb-\
c7b692770fe7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"whatOut", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Lambda]hatOut", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"QhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.652699870295807*^9, 3.652699871836809*^9}, {
  3.654265105207286*^9, 3.6542651054972863`*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"9df9a16b-b3e0-48cb-9384-9406a88e4c7d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9277107926764482`", ",", "0.927710798681464`"}], "}"}]], "Output",
 CellChangeTimes->{3.734510461449395*^9},
 CellLabel->
  "Out[158]=",ExpressionUUID->"5ea0bd97-b988-4514-bf6a-ca460c0d2deb"]
}, Closed]],

Cell["Computing new initial equilibrium", "Text",
 CellChangeTimes->{{3.6420596239193873`*^9, 
  3.6420596292213874`*^9}},ExpressionUUID->"31e7fbc1-1a9f-4f5a-a504-\
179d8f9eee17"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"resEmpIn", "=", 
   RowBox[{"resEmp", " ", 
    RowBox[{"(", 
     RowBox[{"LRhatOut", "+", "1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]In", "=", 
   RowBox[{"\[Lambda]", "  ", 
    RowBox[{"(", 
     RowBox[{"\[Lambda]hatOut", "+", "1"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"workplaceEmpIn", "=", 
   RowBox[{"workplaceEmp", " ", 
    RowBox[{"(", 
     RowBox[{"LMhatOut", "+", "1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resWageIn", "=", 
   RowBox[{"resWage", " ", 
    RowBox[{"(", 
     RowBox[{"VbarhatOut", "+", "1"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"workplaceWageIn", "=", 
   RowBox[{"workplaceWage", " ", 
    RowBox[{"(", 
     RowBox[{"whatOut", "+", "1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resIncomeIn", "=", 
   FractionBox[
    RowBox[{"resEmpIn", " ", "resWageIn"}], 
    SuperscriptBox["10", "6"]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"workIncomeIn", "=", 
   FractionBox[
    RowBox[{"workplaceEmpIn", " ", "workplaceWageIn"}], 
    SuperscriptBox["10", "6"]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Pi]niIn", "=", 
   RowBox[{"\[Pi]niOnlyTrading", " ", 
    RowBox[{"(", 
     RowBox[{"\[Pi]nihatOut", "+", "1"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6276680003228188`*^9, 3.627668105093294*^9}, {
   3.6276682931825323`*^9, 3.627668326687561*^9}, {3.6276683927118053`*^9, 
   3.6276684542882175`*^9}, {3.627668879420566*^9, 3.6276689276203856`*^9}, {
   3.627670106553771*^9, 3.627670198444375*^9}, {3.627670231443434*^9, 
   3.627670242849107*^9}, {3.6276702916686306`*^9, 3.6276703398173504`*^9}, {
   3.627670922131649*^9, 3.627670922615252*^9}, {3.6276736923830986`*^9, 
   3.6276736983386946`*^9}, {3.6328476865586743`*^9, 3.632847756608679*^9}, {
   3.632847813185336*^9, 3.6328478330743246`*^9}, {3.632847878658882*^9, 
   3.6328479112201385`*^9}, {3.6329405892312536`*^9, 3.632940591906521*^9}, {
   3.632940639553285*^9, 3.632940641083438*^9}, {3.632947134790744*^9, 
   3.6329471388161464`*^9}, {3.633025196624468*^9, 3.6330251982066264`*^9}, {
   3.633026072441041*^9, 3.6330260726570625`*^9}, {3.633028527086481*^9, 
   3.633028527343507*^9}, {3.6346020626752415`*^9, 3.6346020975087247`*^9}, 
   3.6420606001713877`*^9, {3.6420658612653875`*^9, 3.642065874217387*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"d382bc82-4cad-4c66-a90c-bfa58af2e93c"],

Cell["\<\
Checking that all flows are the same and that in each location, residents and \
employment are identical in terms of wages and counts\
\>", "Text",
 CellChangeTimes->{{3.734172377308182*^9, 
  3.734172406318242*^9}},ExpressionUUID->"c8a94d5c-9813-4ebc-9817-\
4018ed9ea1fe"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"\[Lambda]", ",", "2"}], "]"}], "/", 
    SuperscriptBox["10", "6"]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"\[Lambda]In", ",", "2"}], "]"}], "/", 
    SuperscriptBox["10", "6"]}], "\[IndentingNewLine]", 
   RowBox[{"Max", "[", 
    RowBox[{"Abs", "[", 
     FractionBox[
      RowBox[{"resEmpIn", "-", "workplaceEmpIn"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"resEmpIn", "+", "workplaceEmpIn"}], ")"}], " ", "0.5"}]], 
     "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Max", "[", 
    RowBox[{"Abs", "[", 
     FractionBox[
      RowBox[{"resWageIn", "-", "workplaceWageIn"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"resWageIn", "+", "workplaceWageIn"}], ")"}], " ", "0.5"}]], 
     "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{"Total", "[", "\[Pi]niIn", "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"Total", "[", "\[Pi]niIn", "]"}], "]"}]}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.654265381566706*^9, 3.6542654259287734`*^9}, {
  3.654265517043909*^9, 3.6542656111030474`*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"d53d64e3-868e-43ea-ab2f-fb7445c15fc1"]
}, Closed]],

Cell[CellGroupData[{

Cell["Productivity shocks in a world with no commuting", "Subsection",
 CellChangeTimes->{{3.684858575123933*^9, 
  3.684858586195566*^9}},ExpressionUUID->"8fe9b8b3-a701-4d8c-822f-\
59b376a91499"],

Cell["Set up of the simulations:", "Text",
 CellChangeTimes->{{3.623514213151874*^9, 3.623514218088924*^9}, {
  3.6243012660502205`*^9, 
  3.624301271932458*^9}},ExpressionUUID->"5cf00eac-0356-416d-9d82-\
b490a9952b0c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"varnames", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<Repetition\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<CountyLine\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LambdaNNHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PiNNHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<Ahat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<MeasuredProdHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ShipmentsHat\>\"", "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"setting", " ", "number", " ", "of", " ", 
     RowBox[{"replications", ":", " ", 
      RowBox[{"one", " ", "shock", " ", "per", " ", "county"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numberOfReplications", "=", "3111"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6235142279090242`*^9, 3.623514270250452*^9}, {
   3.6235144939377117`*^9, 3.623514521599989*^9}, {3.623521495295616*^9, 
   3.6235214959556227`*^9}, {3.623522678246557*^9, 3.6235227245710225`*^9}, {
   3.623522795089731*^9, 3.623522798495072*^9}, {3.6235228781300344`*^9, 
   3.6235228858188033`*^9}, {3.6235234819527054`*^9, 
   3.6235234947748337`*^9}, {3.623523570832595*^9, 3.6235235883727703`*^9}, {
   3.623534740185605*^9, 3.6235347420807943`*^9}, {3.623534925370121*^9, 
   3.6235349340259867`*^9}, {3.623535209225504*^9, 3.623535219027484*^9}, {
   3.623535255910172*^9, 3.6235352573663177`*^9}, {3.623535458931472*^9, 
   3.623535461024681*^9}, 3.6235358279077873`*^9, {3.623535874324253*^9, 
   3.623535874704257*^9}, {3.6235361428283052`*^9, 3.6235361533604126`*^9}, {
   3.623538576014176*^9, 3.623538576640239*^9}, 3.6235801268862333`*^9, {
   3.6235825766410437`*^9, 3.6235825779910574`*^9}, {3.6235829628293858`*^9, 
   3.6235829654026427`*^9}, {3.6235835964510045`*^9, 3.623583596954011*^9}, 
   3.623710728736875*^9, {3.623713332030875*^9, 3.623713337150875*^9}, {
   3.6243012883109646`*^9, 3.6243012892001705`*^9}, {3.6243019606663904`*^9, 
   3.6243019713064547`*^9}, {3.624303022659017*^9, 3.624303025638636*^9}, {
   3.6243036472239857`*^9, 3.6243036524188185`*^9}, {3.6243049548410263`*^9, 
   3.62430496378592*^9}, {3.6411479927758574`*^9, 3.6411479970034847`*^9}, {
   3.641209147539585*^9, 3.6412091572515554`*^9}, {3.641209864024226*^9, 
   3.6412098645352774`*^9}, {3.64158963745669*^9, 3.641589642950239*^9}, 
   3.6526978085839643`*^9, 3.6766538666735516`*^9, 3.676654398962533*^9, {
   3.676654539260306*^9, 3.6766545402933655`*^9}, {3.6770621778203907`*^9, 
   3.6770622233604546`*^9}, 3.6770671292373223`*^9, {3.6772646328907237`*^9, 
   3.677264633220724*^9}, {3.684862445614312*^9, 3.68486245729498*^9}, 
   3.7344618443998027`*^9, {3.7345144911734247`*^9, 3.7345144955464306`*^9}, {
   3.734516918871869*^9, 3.7345169292561393`*^9}, {3.734517114818892*^9, 
   3.734517121400994*^9}},ExpressionUUID->"9c9635b1-30bb-47f3-b02c-\
ea82817e8f77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"complete", " ", "matrix", " ", "of", " ", 
    RowBox[{"shocks", ":", " ", 
     RowBox[{
     "row", " ", "number", " ", "N", " ", "has", " ", "the", " ", "shock", 
      " ", "profile", " ", "for", " ", "repetition", " ", "N"}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"prodShocks", "=", 
    RowBox[{"1", "+", 
     RowBox[{"DiagonalMatrix", "[", 
      RowBox[{"Table", "[", 
       RowBox[{"0.05", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}],
       "]"}]}]}], ";"}], " "}]], "Input",
 CellChangeTimes->{{3.6235142279090242`*^9, 3.623514270250452*^9}, {
   3.6235144939377117`*^9, 3.623514521599989*^9}, {3.623521495295616*^9, 
   3.6235214959556227`*^9}, {3.623522678246557*^9, 3.6235227245710225`*^9}, {
   3.623522795089731*^9, 3.623522798495072*^9}, {3.6235228781300344`*^9, 
   3.6235228858188033`*^9}, {3.6235234819527054`*^9, 
   3.6235234947748337`*^9}, {3.623523570832595*^9, 3.6235235883727703`*^9}, {
   3.623534740185605*^9, 3.6235347420807943`*^9}, {3.623534925370121*^9, 
   3.6235349340259867`*^9}, {3.623535209225504*^9, 3.623535219027484*^9}, {
   3.623535255910172*^9, 3.6235352573663177`*^9}, {3.623535458931472*^9, 
   3.623535461024681*^9}, 3.6235358279077873`*^9, {3.623535874324253*^9, 
   3.623535874704257*^9}, {3.6235361428283052`*^9, 3.6235361533604126`*^9}, {
   3.623538576014176*^9, 3.623538576640239*^9}, 3.6235801268862333`*^9, {
   3.6235825766410437`*^9, 3.6235825779910574`*^9}, {3.6235829628293858`*^9, 
   3.6235829654026427`*^9}, {3.6235835964510045`*^9, 3.623583596954011*^9}, 
   3.623710728736875*^9, {3.623713332030875*^9, 3.623713337150875*^9}, {
   3.6243012883109646`*^9, 3.6243012892001705`*^9}, {3.6243019606663904`*^9, 
   3.6243019713064547`*^9}, {3.624303022659017*^9, 3.624303025638636*^9}, {
   3.6243036472239857`*^9, 3.6243036524188185`*^9}, {3.6243049548410263`*^9, 
   3.62430496378592*^9}, {3.6411479927758574`*^9, 3.6411479970034847`*^9}, {
   3.641209147539585*^9, 3.6412091572515554`*^9}, {3.641209864024226*^9, 
   3.6412098645352774`*^9}, {3.64158963745669*^9, 3.641589642950239*^9}, 
   3.6526978085839643`*^9, {3.6766538666735516`*^9, 3.676653870573557*^9}, {
   3.734514415395281*^9, 3.734514467593377*^9}, {3.734517128015045*^9, 
   3.734517133809092*^9}},ExpressionUUID->"15e0f2dc-63ab-45fc-bdd1-\
4c8bb9749750"],

Cell["Computing outcomes", "Text",
 CellChangeTimes->{{3.623520025594915*^9, 
  3.6235200288102365`*^9}},ExpressionUUID->"a1e00924-da35-46f0-a143-\
88983b8746ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"out2", "=", 
   RowBox[{"Parallelize", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"countyProdShockArb", "[", 
       RowBox[{"rep", ",", "khat", ",", " ", "dhat", ",", 
        RowBox[{"prodShocks", "[", 
         RowBox[{"[", "rep", "]"}], "]"}], ",", "bhat", ",", "\[Lambda]In", 
        ",", "workplaceWageIn", ",", "resWageIn", ",", "workplaceEmpIn", ",", 
        "resEmpIn", ",", "\[Pi]niIn", ",", "resIncomeIn", ",", "workIncomeIn",
         ",", " ", "el"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"rep", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}],
     "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.623516079626979*^9, 3.623516217545359*^9}, {
   3.623516449977686*^9, 3.623516461239957*^9}, 3.6235166335601873`*^9, {
   3.623518332919551*^9, 3.623518335165776*^9}, {3.6235184520764656`*^9, 
   3.6235185467549324`*^9}, {3.6235186413072433`*^9, 3.623518641637246*^9}, {
   3.6235193798406363`*^9, 3.6235194199130373`*^9}, {3.6235194550253887`*^9, 
   3.623519455255391*^9}, {3.6235195900827413`*^9, 3.6235195985028257`*^9}, {
   3.6235196430862713`*^9, 3.6235197935627785`*^9}, {3.6235198523983674`*^9, 
   3.623519934843194*^9}, {3.623519979451301*^9, 3.623520017636119*^9}, 
   3.623520075298885*^9, 3.6235201590072546`*^9, {3.6235341187481384`*^9, 
   3.6235341200091515`*^9}, {3.6235386037689514`*^9, 
   3.6235386321227865`*^9}, {3.623582371780312*^9, 3.6235823754356775`*^9}, {
   3.6235825620998983`*^9, 3.623582568860966*^9}, {3.623710102003875*^9, 
   3.623710106073875*^9}, 3.623712898013875*^9, {3.6237135282998753`*^9, 
   3.623713536210875*^9}, {3.623714018860875*^9, 3.623714045282875*^9}, {
   3.623714681569875*^9, 3.6237146937678747`*^9}, {3.6243021205247617`*^9, 
   3.6243021618202267`*^9}, {3.6251415503154964`*^9, 
   3.6251415522655087`*^9}, {3.6252520368454576`*^9, 3.6252520802868013`*^9}, 
   3.6267242734801636`*^9, {3.6412087197758126`*^9, 3.641208771136948*^9}, 
   3.6412091618920197`*^9, {3.652715284768613*^9, 3.652715306523857*^9}, {
   3.6527171719835553`*^9, 3.652717173150622*^9}, {3.676798058775761*^9, 
   3.676798070713279*^9}, {3.676798104248827*^9, 3.6767981063513308`*^9}, {
   3.6769006666469564`*^9, 3.6769006683269587`*^9}, {3.6770622275304604`*^9, 
   3.6770622310404654`*^9}, {3.677264636310728*^9, 3.6772646393107324`*^9}, {
   3.6777293703645425`*^9, 3.677729372314545*^9}, {3.680518402872714*^9, 
   3.6805184046647167`*^9}, 3.6848624944071026`*^9},
 CellLabel->
  "In[240]:=",ExpressionUUID->"b72b31ec-4a04-4758-b7f4-84f455da5231"],

Cell["Exporting data in separate files", "Text",
 CellChangeTimes->{{3.641209213788209*^9, 3.6412092217800083`*^9}, {
  3.6770670814572554`*^9, 
  3.677067083497258*^9}},ExpressionUUID->"fbeafef8-64e7-4db9-a277-\
7e01b6fc30ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Started on \>\"", ",", 
    RowBox[{"DateString", "[", "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"repN", ",", "filename"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"repN", "=", 
        RowBox[{"ToString", "[", "rep", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rep", "<", "10"}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<000\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rep", "\[GreaterEqual]", "10"}], " ", "&&", " ", 
          RowBox[{"rep", "\[LessEqual]", "99"}]}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<00\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rep", "\[GreaterEqual]", "100"}], " ", "&&", " ", 
          RowBox[{"rep", "\[LessEqual]", "999"}]}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<0\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"filename", "=", 
        RowBox[{
        "\"\<data\\\\county shocks 5 pct with no \
comm\\\\county_oneShock5pct_rep\>\"", "<>", "repN", "<>", "\"\<.csv\>\""}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", " ", 
         RowBox[{"out2", "[", 
          RowBox[{"[", 
           RowBox[{"rep", ",", "1"}], "]"}], "]"}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"rep", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<All export done on \>\"", ",", 
    RowBox[{"DateString", "[", "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.624132143367365*^9, 3.624132150917765*^9}, {
   3.624132376765565*^9, 3.624132396961565*^9}, {3.6241325854435654`*^9, 
   3.624132645104565*^9}, {3.6241326826801653`*^9, 3.624132703523765*^9}, 
   3.6241327349751654`*^9, {3.6241328228621655`*^9, 3.624132829365165*^9}, {
   3.624302331989519*^9, 3.6243023327383237`*^9}, {3.624302417388153*^9, 
   3.624302426250039*^9}, {3.624304792016388*^9, 3.624304872686841*^9}, {
   3.624964060704933*^9, 3.624964071481011*^9}, {3.6251412834577837`*^9, 
   3.6251412847681923`*^9}, 3.625252108065579*^9, {3.626724278472172*^9, 
   3.6267242800789747`*^9}, {3.626838697345999*^9, 3.626838698683132*^9}, {
   3.641148087247238*^9, 3.6411481238959026`*^9}, {3.6415898317171144`*^9, 
   3.6415898329602385`*^9}, {3.641853232806428*^9, 3.6418532382149687`*^9}, {
   3.6527070797303114`*^9, 3.652707097432324*^9}, {3.6527171683193455`*^9, 
   3.6527171685833607`*^9}, {3.652720414684027*^9, 3.6527204197943196`*^9}, {
   3.652722310534464*^9, 3.6527223116305265`*^9}, {3.6529660594221306`*^9, 
   3.652966061882134*^9}, {3.6532122054660454`*^9, 3.653212205776046*^9}, {
   3.676643621017864*^9, 3.676643622225366*^9}, {3.67679811319234*^9, 
   3.6767981329753695`*^9}, {3.6769008937172737`*^9, 3.676900894477275*^9}, {
   3.6770623933906927`*^9, 3.6770624020807047`*^9}, {3.6772645308205805`*^9, 
   3.677264532710583*^9}, {3.677729352894518*^9, 3.6777293535045185`*^9}, {
   3.6805183879276733`*^9, 3.6805183899216766`*^9}, {3.6848625329903097`*^9, 
   3.6848625386136312`*^9}, {3.7344618860161505`*^9, 3.7344618876492376`*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"6f57b14f-bdf7-47eb-a687-5880945ada1f"],

Cell[TextData[{
 "Checking that all converged: max number of iteration is smaller than 2000, \
and distances from previous iteration smaller than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "6"}]], TraditionalForm]],ExpressionUUID->
  "1404429e-51ae-4f07-8647-a2d4d65d9d65"]
}], "Text",
 CellChangeTimes->{{3.6243679326271677`*^9, 3.6243679391636095`*^9}, {
   3.624368283933448*^9, 3.6243683087556086`*^9}, {3.624968934306712*^9, 
   3.624968939795261*^9}, 
   3.641209264085238*^9},ExpressionUUID->"035a123f-7c55-4b9d-b65f-\
c9524a0d9240"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "3"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "4"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.624367941659625*^9, 3.624368011094079*^9}, {
  3.6243682388871555`*^9, 3.624368276046995*^9}},
 CellLabel->
  "In[247]:=",ExpressionUUID->"6d5b3681-0e81-4615-aa32-acd48e154035"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["c) Spatially correlated shocks", "Subchapter",
 CellChangeTimes->{{3.654259173413659*^9, 3.654259181381672*^9}, {
   3.7341726623156953`*^9, 3.7341726676557055`*^9}, {3.7345271646060295`*^9, 
   3.7345271651860304`*^9}, 
   3.7345279899154644`*^9},ExpressionUUID->"ac02c5bd-dad2-4da5-b71b-\
0b05d9a6574a"],

Cell["\<\
This exercise computes single-counterfactuals for three spatially correlated \
shocks (section C.4, figures C.4, C.5 and C.6 of the web appendix)\
\>", "Text",
 CellChangeTimes->{{3.734462527523234*^9, 3.734462533553338*^9}, {
  3.734462689149171*^9, 3.734462707264759*^9}, {3.734462750386158*^9, 
  3.734462758189754*^9}, {3.734526312283465*^9, 
  3.73452632200548*^9}},ExpressionUUID->"966f69ac-1b9e-4376-921d-\
dbebfb6ef43b"],

Cell[CellGroupData[{

Cell["\<\
Shock to Manufacturing only (productivity growth 2004-2010 from BLS)\
\>", "Section",
 CellChangeTimes->{{3.654453023013049*^9, 3.6544530293350587`*^9}, {
  3.654454624766013*^9, 
  3.6544546586530666`*^9}},ExpressionUUID->"453ab833-07eb-4af8-bb03-\
eab48bada81a"],

Cell["\<\
This exercise generates data for figure C.4 of the web appendix.\
\>", "Text",
 CellChangeTimes->{{3.734526333938501*^9, 
  3.7345263539305425`*^9}},ExpressionUUID->"24afd1b0-3859-4f75-9e71-\
42c96cc2b90c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"khat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bhat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.73451823842583*^9, 3.734518255394023*^9}, {
  3.7345189289549894`*^9, 
  3.73451892931201*^9}},ExpressionUUID->"9abe2a85-4bac-4261-91ac-\
d5f1cb4eaa03"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"total", " ", "mfg", " ", "tfp", " ", "growth", " ", "2004"}], 
     "-", "2010"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tfpMfg", "=", 
     FractionBox["6.1199", "100"]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "productivity"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{
      RowBox[{"tfpMfg", " ", "mfgShares"}], "+", "1"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"counterfactual", " ", "changes"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spCorr", "=", 
     RowBox[{"hatChangesA", "[", 
      RowBox[{"ahat", ",", "\[Eta]zero", ",", " ", "25"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6542591868506813`*^9, 3.6542592078127127`*^9}, {
   3.6543338224487553`*^9, 3.6543339126528893`*^9}, {3.6543339573439536`*^9, 
   3.6543339586759553`*^9}, {3.6543340678501368`*^9, 3.654334074378147*^9}, {
   3.6543375524795103`*^9, 3.6543375669855328`*^9}, {3.6544548081312904`*^9, 
   3.6544548150103006`*^9}, {3.654454884044405*^9, 3.6544548864614096`*^9}, 
   3.7087164226090636`*^9, {3.7345173979523335`*^9, 3.734517402097368*^9}, {
   3.7345185652243366`*^9, 3.7345185653543367`*^9}, {3.7345189332832375`*^9, 
   3.7345189350403376`*^9}},ExpressionUUID->"a3f40298-cf0d-45d7-b0b4-\
0bbc81f6f42c"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
       ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
       ",", "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", 
       "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
     RowBox[{"spCorr", "-", "1"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"varnames", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<OwnCommutingHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<OwnTradeHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ownTrade\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<mfgShare\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ahat\>\"", "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ownCommHat", "=", 
     RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ownTradeHat", "=", 
     RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"varnames", ",", 
       RowBox[{"{", 
        RowBox[{
        "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
         ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
         ",", "ownCommHat", ",", "ownTradeHat", ",", 
         RowBox[{"Diagonal", "[", "\[Pi]niOnlyTrading", "]"}], ",", 
         "mfgShares", ",", "ahat"}], "}"}], ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{
     "\"\<data\\\\spatially correlated\\\\spCorr_mfg_BLS.csv\>\"", ",", 
      "out"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wel", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"whatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
         RowBox[{
          RowBox[{"khat", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Lambda]hatOut", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"QhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
        SuperscriptBox[
         RowBox[{"bhat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", "wel", "]"}], ",", 
     RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.654333765071672*^9, 3.654333765071672*^9}, {
   3.654334014187049*^9, 3.654334066230134*^9}, {3.65433409744118*^9, 
   3.654334107017194*^9}, {3.6543342343153877`*^9, 3.6543342542144194`*^9}, 
   3.654337553660512*^9, {3.6543376185336075`*^9, 3.6543376193636084`*^9}, {
   3.6543376676926947`*^9, 3.6543376806927137`*^9}, {3.6543377116307645`*^9, 
   3.654337740099806*^9}, {3.6543389135546103`*^9, 3.65433893277864*^9}, {
   3.654454892214418*^9, 3.654454896496431*^9}, {3.676653667883273*^9, 
   3.676653671523278*^9}, {3.734461993060359*^9, 3.734461995357983*^9}, {
   3.7344620514788637`*^9, 3.7344620735922203`*^9}, {3.734514860449763*^9, 
   3.7345148607307634`*^9}, {3.7345172666841984`*^9, 3.734517268040214*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"3d7e35bc-1169-4352-ab1f-777ce5a58f75"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Shock to non-manufacturing only (productivity growth 2004-2010 from BLS)\
\>", "Section",
 CellChangeTimes->{{3.654453034725066*^9, 3.654453040584075*^9}, {
  3.6544548301823263`*^9, 
  3.6544548416623435`*^9}},ExpressionUUID->"cb8865a9-aab9-4d39-b9bc-\
815de9fa574b"],

Cell["\<\
This exercise generates data for figure C.5 of the web appendix.\
\>", "Text",
 CellChangeTimes->{{3.734526369103567*^9, 
  3.734526373812575*^9}},ExpressionUUID->"acbb0663-c2f9-4b3d-a963-\
478a4b66b6d6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"khat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bhat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[295]:=",ExpressionUUID->"29b14dda-1c8b-4df1-8786-f26de4aacab7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"total", " ", "non"}], "-", 
     RowBox[{"mfg", " ", "tfp", " ", "growth", " ", "2004"}], "-", "2010"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tfpNonMfg", "=", 
     FractionBox["3.1177", "100"]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "productivity"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{
      RowBox[{"tfpNonMfg", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "mfgShares"}], ")"}]}], "+", "1"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"counterfactual", " ", "changes"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spCorr", "=", 
     RowBox[{"hatChangesA", "[", 
      RowBox[{"ahat", ",", "\[Eta]zero", ",", " ", "25"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6542591868506813`*^9, 3.6542592078127127`*^9}, {
   3.6543338224487553`*^9, 3.6543339126528893`*^9}, {3.6543339573439536`*^9, 
   3.6543339586759553`*^9}, {3.6543340678501368`*^9, 3.654334074378147*^9}, {
   3.6543375524795103`*^9, 3.6543375669855328`*^9}, {3.6544531495312405`*^9, 
   3.6544532241633563`*^9}, {3.65445484603035*^9, 3.654454878961398*^9}, 
   3.6544549479515142`*^9, {3.734517414083476*^9, 3.7345174167444983`*^9}, {
   3.7345190783485346`*^9, 3.734519091420282*^9}, {3.734519154250948*^9, 
   3.7345191551569653`*^9}},ExpressionUUID->"36335a6d-72a3-43c4-9176-\
ea2d6c40e294"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
       ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
       ",", "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", 
       "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
     RowBox[{"spCorr", "-", "1"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"varnames", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<OwnCommutingHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<OwnTradeHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ownTrade\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<mfgShare\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ahat\>\"", "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ownCommHat", "=", 
     RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ownTradeHat", "=", 
     RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"varnames", ",", 
       RowBox[{"{", 
        RowBox[{
        "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
         ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
         ",", "ownCommHat", ",", "ownTradeHat", ",", 
         RowBox[{"Diagonal", "[", "\[Pi]niOnlyTrading", "]"}], ",", 
         "mfgShares", ",", "ahat"}], "}"}], ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{
     "\"\<data\\\\spatially correlated\\\\spCorr_nonMfg_BLS.csv\>\"", ",", 
      "out"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wel", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"whatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
         RowBox[{
          RowBox[{"khat", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Lambda]hatOut", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"QhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
        SuperscriptBox[
         RowBox[{"bhat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", "wel", "]"}], ",", 
     RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.654333765071672*^9, 3.654333765071672*^9}, {
   3.654334014187049*^9, 3.654334066230134*^9}, {3.65433409744118*^9, 
   3.654334107017194*^9}, {3.6543342343153877`*^9, 3.6543342542144194`*^9}, 
   3.654337553660512*^9, {3.6543376185336075`*^9, 3.6543376193636084`*^9}, {
   3.6543376676926947`*^9, 3.6543376806927137`*^9}, {3.6543377116307645`*^9, 
   3.654337740099806*^9}, {3.6543389135546103`*^9, 3.65433893277864*^9}, {
   3.6544549725645537`*^9, 3.654454978275562*^9}, {3.7344621178019953`*^9, 
   3.7344621198412185`*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"c2623847-7462-466a-ac02-443d58cede73"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Shock to both sectors (productivity growth 2004-2010 from BLS)\
\>", "Section",
 CellChangeTimes->{{3.654453034725066*^9, 3.654453040584075*^9}, {
  3.6544548301823263`*^9, 3.6544548416623435`*^9}, {3.654454992295582*^9, 
  3.654455002748598*^9}},ExpressionUUID->"ddd199cb-d0dc-40da-be77-\
beb4fce2701e"],

Cell["\<\
This exercise generates data for figure C.6 of the web appendix.\
\>", "Text",
 CellChangeTimes->{{3.7345263833355923`*^9, 
  3.7345263876665983`*^9}},ExpressionUUID->"a89ffef7-bd33-426e-8670-\
566c71272bae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"khat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bhat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"29035032-11b2-404f-91d8-206090e30a23"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "productivity"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tfpMfg", "=", 
     FractionBox["6.1199", "100"]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tfpNonMfg", "=", 
     FractionBox["3.1177", "100"]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{
      RowBox[{"tfpNonMfg", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "mfgShares"}], ")"}]}], "+", 
      RowBox[{"mfgShares", " ", "tfpMfg"}], "+", "1"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"counterfactual", " ", "changes"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spCorr", "=", 
     RowBox[{"hatChangesA", "[", 
      RowBox[{"ahat", ",", "\[Eta]zero", ",", " ", "25"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6542591868506813`*^9, 3.6542592078127127`*^9}, {
   3.6543338224487553`*^9, 3.6543339126528893`*^9}, {3.6543339573439536`*^9, 
   3.6543339586759553`*^9}, {3.6543340678501368`*^9, 3.654334074378147*^9}, {
   3.6543375524795103`*^9, 3.6543375669855328`*^9}, {3.6544531495312405`*^9, 
   3.6544532241633563`*^9}, {3.65445484603035*^9, 3.654454878961398*^9}, 
   3.6544549479515142`*^9, {3.6544550153816156`*^9, 3.6544550290866365`*^9}, {
   3.6544550784747086`*^9, 3.6544550952707415`*^9}, {3.7345174233775463`*^9, 
   3.7345174253785634`*^9}, {3.7345191869123077`*^9, 
   3.734519193102384*^9}},ExpressionUUID->"4b372472-1255-48f9-acfd-\
22fecd015631"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
       ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
       ",", "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", 
       "distWages", ",", "dist\[Lambda]"}], "}"}], "=", 
     RowBox[{"spCorr", "-", "1"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"c", ",", "distWages", ",", "dist\[Lambda]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"varnames", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<OwnCommutingHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<OwnTradeHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ownTrade\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<mfgShare\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ahat\>\"", "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ownCommHat", "=", 
     RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ownTradeHat", "=", 
     RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"varnames", ",", 
       RowBox[{"{", 
        RowBox[{
        "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
         ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
         ",", "ownCommHat", ",", "ownTradeHat", ",", 
         RowBox[{"Diagonal", "[", "\[Pi]niOnlyTrading", "]"}], ",", 
         "mfgShares", ",", "ahat"}], "}"}], ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"out", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{
     "\"\<data\\\\spatially correlated\\\\spCorr_both_BLS.csv\>\"", ",", 
      "out"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wel", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"whatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
         RowBox[{
          RowBox[{"khat", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Lambda]hatOut", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"QhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
        SuperscriptBox[
         RowBox[{"bhat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", "wel", "]"}], ",", 
     RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.654333765071672*^9, 3.654333765071672*^9}, {
   3.654334014187049*^9, 3.654334066230134*^9}, {3.65433409744118*^9, 
   3.654334107017194*^9}, {3.6543342343153877`*^9, 3.6543342542144194`*^9}, 
   3.654337553660512*^9, {3.6543376185336075`*^9, 3.6543376193636084`*^9}, {
   3.6543376676926947`*^9, 3.6543376806927137`*^9}, {3.6543377116307645`*^9, 
   3.654337740099806*^9}, {3.6543389135546103`*^9, 3.65433893277864*^9}, {
   3.6544549725645537`*^9, 3.654454978275562*^9}, {3.6544551447289233`*^9, 
   3.654455145114925*^9}, {3.7344621713458757`*^9, 3.7344621732996893`*^9}},
 CellLabel->
  "In[332]:=",ExpressionUUID->"dd36c4a4-1151-458b-95fe-219b1d3c134e"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["d) 5% shock to each county, positive land supply elasticity", \
"Subchapter",
 CellChangeTimes->{{3.6411478584431477`*^9, 3.64114788309711*^9}, {
   3.6766436017268353`*^9, 3.6766436081478453`*^9}, {3.676797945112864*^9, 
   3.6767979482838683`*^9}, {3.676798152669592*^9, 3.6767981665406137`*^9}, {
   3.6770621575103617`*^9, 3.6770621705003805`*^9}, {3.6772639128947144`*^9, 
   3.677263927444735*^9}, {3.6777291627842517`*^9, 3.677729166404257*^9}, {
   3.680518355517605*^9, 3.680518366317626*^9}, 3.680518634359153*^9, {
   3.703863285725066*^9, 3.703863285975066*^9}, 3.7044556158651686`*^9, 
   3.733931713149234*^9, {3.73418482775025*^9, 3.734184834588261*^9}, {
   3.734527009103715*^9, 3.7345270170447273`*^9}, {3.734527181414054*^9, 
   3.734527183103057*^9}, {3.734527297669278*^9, 3.734527312163299*^9}, 
   3.7345279938134704`*^9, {3.7345908075437984`*^9, 3.7345908105618877`*^9}, 
   3.7346038200067697`*^9},ExpressionUUID->"52364643-b852-4af1-b42e-\
18bb8b65b74c"],

Cell["\<\
This exercise computes counterfactuals using a positive land supply \
elasticity (figure 3, table C2).\
\>", "Text",
 CellChangeTimes->{{3.734462508852801*^9, 3.7344625962303*^9}, {
   3.734462626959387*^9, 3.734462684297762*^9}, {3.7344629221196985`*^9, 
   3.734462930605485*^9}, {3.7344631559049835`*^9, 3.7344631563038282`*^9}, 
   3.7346038434691114`*^9},ExpressionUUID->"02a0e349-0f0c-408e-8b6c-\
2b6312edf2c4"],

Cell["Set up of the simulations:", "Text",
 CellChangeTimes->{{3.623514213151874*^9, 3.623514218088924*^9}, {
  3.6243012660502205`*^9, 
  3.624301271932458*^9}},ExpressionUUID->"6bd4cf73-e506-40db-96b4-\
100015b63f93"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"varnames", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<Repetition\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<CountyLine\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<LambdaNNHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<PiNNHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<Ahat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<MeasuredProdHat\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<ShipmentsHat\>\"", "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"setting", " ", "number", " ", "of", " ", 
     RowBox[{"replications", ":", " ", 
      RowBox[{"one", " ", "shock", " ", "per", " ", "county"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numberOfReplications", "=", "3111"}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6235142279090242`*^9, 3.623514270250452*^9}, {
   3.6235144939377117`*^9, 3.623514521599989*^9}, {3.623521495295616*^9, 
   3.6235214959556227`*^9}, {3.623522678246557*^9, 3.6235227245710225`*^9}, {
   3.623522795089731*^9, 3.623522798495072*^9}, {3.6235228781300344`*^9, 
   3.6235228858188033`*^9}, {3.6235234819527054`*^9, 
   3.6235234947748337`*^9}, {3.623523570832595*^9, 3.6235235883727703`*^9}, {
   3.623534740185605*^9, 3.6235347420807943`*^9}, {3.623534925370121*^9, 
   3.6235349340259867`*^9}, {3.623535209225504*^9, 3.623535219027484*^9}, {
   3.623535255910172*^9, 3.6235352573663177`*^9}, {3.623535458931472*^9, 
   3.623535461024681*^9}, 3.6235358279077873`*^9, {3.623535874324253*^9, 
   3.623535874704257*^9}, {3.6235361428283052`*^9, 3.6235361533604126`*^9}, {
   3.623538576014176*^9, 3.623538576640239*^9}, 3.6235801268862333`*^9, {
   3.6235825766410437`*^9, 3.6235825779910574`*^9}, {3.6235829628293858`*^9, 
   3.6235829654026427`*^9}, {3.6235835964510045`*^9, 3.623583596954011*^9}, 
   3.623710728736875*^9, {3.623713332030875*^9, 3.623713337150875*^9}, {
   3.6243012883109646`*^9, 3.6243012892001705`*^9}, {3.6243019606663904`*^9, 
   3.6243019713064547`*^9}, {3.624303022659017*^9, 3.624303025638636*^9}, {
   3.6243036472239857`*^9, 3.6243036524188185`*^9}, {3.6243049548410263`*^9, 
   3.62430496378592*^9}, {3.6411479927758574`*^9, 3.6411479970034847`*^9}, {
   3.641209147539585*^9, 3.6412091572515554`*^9}, {3.641209864024226*^9, 
   3.6412098645352774`*^9}, {3.64158963745669*^9, 3.641589642950239*^9}, 
   3.6526978085839643`*^9, 3.6766538666735516`*^9, 3.676654398962533*^9, {
   3.676654539260306*^9, 3.6766545402933655`*^9}, {3.6770621778203907`*^9, 
   3.6770622233604546`*^9}, 3.6770671292373223`*^9, {3.6772646328907237`*^9, 
   3.677264633220724*^9}, {3.7345194384474535`*^9, 3.73451944792955*^9}, {
   3.7345205156443005`*^9, 
   3.734520517250303*^9}},ExpressionUUID->"ca14a7d6-fd8d-4ded-88aa-\
a5839bcf1b7c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"complete", " ", "matrix", " ", "of", " ", 
    RowBox[{"shocks", ":", " ", 
     RowBox[{
     "row", " ", "number", " ", "N", " ", "has", " ", "the", " ", "shock", 
      " ", "profile", " ", "for", " ", "repetition", " ", "N"}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"prodShocks", "=", 
     RowBox[{"1", "+", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Table", "[", 
        RowBox[{"0.05", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], 
        "]"}], "]"}]}]}], ";"}], " ", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6235142279090242`*^9, 3.623514270250452*^9}, {
   3.6235144939377117`*^9, 3.623514521599989*^9}, {3.623521495295616*^9, 
   3.6235214959556227`*^9}, {3.623522678246557*^9, 3.6235227245710225`*^9}, {
   3.623522795089731*^9, 3.623522798495072*^9}, {3.6235228781300344`*^9, 
   3.6235228858188033`*^9}, {3.6235234819527054`*^9, 
   3.6235234947748337`*^9}, {3.623523570832595*^9, 3.6235235883727703`*^9}, {
   3.623534740185605*^9, 3.6235347420807943`*^9}, {3.623534925370121*^9, 
   3.6235349340259867`*^9}, {3.623535209225504*^9, 3.623535219027484*^9}, {
   3.623535255910172*^9, 3.6235352573663177`*^9}, {3.623535458931472*^9, 
   3.623535461024681*^9}, 3.6235358279077873`*^9, {3.623535874324253*^9, 
   3.623535874704257*^9}, {3.6235361428283052`*^9, 3.6235361533604126`*^9}, {
   3.623538576014176*^9, 3.623538576640239*^9}, 3.6235801268862333`*^9, {
   3.6235825766410437`*^9, 3.6235825779910574`*^9}, {3.6235829628293858`*^9, 
   3.6235829654026427`*^9}, {3.6235835964510045`*^9, 3.623583596954011*^9}, 
   3.623710728736875*^9, {3.623713332030875*^9, 3.623713337150875*^9}, {
   3.6243012883109646`*^9, 3.6243012892001705`*^9}, {3.6243019606663904`*^9, 
   3.6243019713064547`*^9}, {3.624303022659017*^9, 3.624303025638636*^9}, {
   3.6243036472239857`*^9, 3.6243036524188185`*^9}, {3.6243049548410263`*^9, 
   3.62430496378592*^9}, {3.6411479927758574`*^9, 3.6411479970034847`*^9}, {
   3.641209147539585*^9, 3.6412091572515554`*^9}, {3.641209864024226*^9, 
   3.6412098645352774`*^9}, {3.64158963745669*^9, 3.641589642950239*^9}, 
   3.6526978085839643`*^9, {3.6766538666735516`*^9, 3.676653870573557*^9}, {
   3.7345194351674223`*^9, 3.7345194766989236`*^9}, {3.734519581485717*^9, 
   3.7345196373498096`*^9}, {3.734520391449069*^9, 3.734520392574071*^9}, 
   3.7345205083342857`*^9},ExpressionUUID->"318af840-3d27-4cb9-915f-\
bef96eb09345"],

Cell["Computing outcomes", "Text",
 CellChangeTimes->{{3.623520025594915*^9, 
  3.6235200288102365`*^9}},ExpressionUUID->"82cf4f75-58bc-47cc-bd86-\
8c8082dbc6ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"out2", "=", 
   RowBox[{"Parallelize", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"countyProdShock", "[", 
       RowBox[{"rep", ",", 
        RowBox[{"prodShocks", "[", 
         RowBox[{"[", "rep", "]"}], "]"}], ",", "\[Eta]exf"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"rep", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}],
     "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.623516079626979*^9, 3.623516217545359*^9}, {
   3.623516449977686*^9, 3.623516461239957*^9}, 3.6235166335601873`*^9, {
   3.623518332919551*^9, 3.623518335165776*^9}, {3.6235184520764656`*^9, 
   3.6235185467549324`*^9}, {3.6235186413072433`*^9, 3.623518641637246*^9}, {
   3.6235193798406363`*^9, 3.6235194199130373`*^9}, {3.6235194550253887`*^9, 
   3.623519455255391*^9}, {3.6235195900827413`*^9, 3.6235195985028257`*^9}, {
   3.6235196430862713`*^9, 3.6235197935627785`*^9}, {3.6235198523983674`*^9, 
   3.623519934843194*^9}, {3.623519979451301*^9, 3.623520017636119*^9}, 
   3.623520075298885*^9, 3.6235201590072546`*^9, {3.6235341187481384`*^9, 
   3.6235341200091515`*^9}, {3.6235386037689514`*^9, 
   3.6235386321227865`*^9}, {3.623582371780312*^9, 3.6235823754356775`*^9}, {
   3.6235825620998983`*^9, 3.623582568860966*^9}, {3.623710102003875*^9, 
   3.623710106073875*^9}, 3.623712898013875*^9, {3.6237135282998753`*^9, 
   3.623713536210875*^9}, {3.623714018860875*^9, 3.623714045282875*^9}, {
   3.623714681569875*^9, 3.6237146937678747`*^9}, {3.6243021205247617`*^9, 
   3.6243021618202267`*^9}, {3.6251415503154964`*^9, 
   3.6251415522655087`*^9}, {3.6252520368454576`*^9, 3.6252520802868013`*^9}, 
   3.6267242734801636`*^9, {3.6412087197758126`*^9, 3.641208771136948*^9}, 
   3.6412091618920197`*^9, {3.652715284768613*^9, 3.652715306523857*^9}, {
   3.6527171719835553`*^9, 3.652717173150622*^9}, {3.676798058775761*^9, 
   3.676798070713279*^9}, {3.676798104248827*^9, 3.6767981063513308`*^9}, {
   3.6769006666469564`*^9, 3.6769006683269587`*^9}, {3.6770622275304604`*^9, 
   3.6770622310404654`*^9}, {3.677264636310728*^9, 3.6772646393107324`*^9}, {
   3.6777293703645425`*^9, 3.677729372314545*^9}, {3.6805186146981153`*^9, 
   3.6805186169851203`*^9}, {3.7038633414711514`*^9, 
   3.7038633416511517`*^9}, {3.704455624073638*^9, 3.7044556245216637`*^9}},
 CellLabel->
  "In[347]:=",ExpressionUUID->"7d26a029-00f1-4a0a-9386-f3f436328ba1"],

Cell["Exporting data in separate files", "Text",
 CellChangeTimes->{{3.641209213788209*^9, 3.6412092217800083`*^9}, {
  3.6770670814572554`*^9, 
  3.677067083497258*^9}},ExpressionUUID->"9044bdea-c65e-45ac-8845-\
2c249924d434"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Started on \>\"", ",", 
    RowBox[{"DateString", "[", "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"repN", ",", "filename"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"repN", "=", 
        RowBox[{"ToString", "[", "rep", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rep", "<", "10"}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<000\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rep", "\[GreaterEqual]", "10"}], " ", "&&", " ", 
          RowBox[{"rep", "\[LessEqual]", "99"}]}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<00\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rep", "\[GreaterEqual]", "100"}], " ", "&&", " ", 
          RowBox[{"rep", "\[LessEqual]", "999"}]}], ",", 
         RowBox[{"repN", "=", 
          RowBox[{"\"\<0\>\"", "<>", "repN"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"filename", "=", 
        RowBox[{
        "\"\<data\\\\Saiz price exf county shocks \
5pct\\\\county_oneShock5pct_rep\>\"", "<>", "repN", "<>", "\"\<.csv\>\""}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", " ", 
         RowBox[{"out2", "[", 
          RowBox[{"[", 
           RowBox[{"rep", ",", "1"}], "]"}], "]"}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"rep", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<All export done on \>\"", ",", 
    RowBox[{"DateString", "[", "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.624132143367365*^9, 3.624132150917765*^9}, {
   3.624132376765565*^9, 3.624132396961565*^9}, {3.6241325854435654`*^9, 
   3.624132645104565*^9}, {3.6241326826801653`*^9, 3.624132703523765*^9}, 
   3.6241327349751654`*^9, {3.6241328228621655`*^9, 3.624132829365165*^9}, {
   3.624302331989519*^9, 3.6243023327383237`*^9}, {3.624302417388153*^9, 
   3.624302426250039*^9}, {3.624304792016388*^9, 3.624304872686841*^9}, {
   3.624964060704933*^9, 3.624964071481011*^9}, {3.6251412834577837`*^9, 
   3.6251412847681923`*^9}, 3.625252108065579*^9, {3.626724278472172*^9, 
   3.6267242800789747`*^9}, {3.626838697345999*^9, 3.626838698683132*^9}, {
   3.641148087247238*^9, 3.6411481238959026`*^9}, {3.6415898317171144`*^9, 
   3.6415898329602385`*^9}, {3.641853232806428*^9, 3.6418532382149687`*^9}, {
   3.6527070797303114`*^9, 3.652707097432324*^9}, {3.6527171683193455`*^9, 
   3.6527171685833607`*^9}, {3.652720414684027*^9, 3.6527204197943196`*^9}, {
   3.652722310534464*^9, 3.6527223116305265`*^9}, {3.6529660594221306`*^9, 
   3.652966061882134*^9}, {3.6532122054660454`*^9, 3.653212205776046*^9}, {
   3.676643621017864*^9, 3.676643622225366*^9}, {3.67679811319234*^9, 
   3.6767981329753695`*^9}, {3.6769008937172737`*^9, 3.676900894477275*^9}, {
   3.6770623933906927`*^9, 3.6770624020807047`*^9}, {3.6772645308205805`*^9, 
   3.677264532710583*^9}, {3.677729352894518*^9, 3.6777293535045185`*^9}, {
   3.680518619578125*^9, 3.680518620449127*^9}, {3.7038633605831814`*^9, 
   3.703863360953182*^9}, {3.7044557033761735`*^9, 3.7044557035431833`*^9}, {
   3.7344629563204803`*^9, 3.734462979220482*^9}},
 CellLabel->
  "In[351]:=",ExpressionUUID->"41c80642-1e94-4620-a085-914c2b92000c"],

Cell[TextData[{
 "Checking that all converged: max number of iteration is smaller than 2000, \
and distances from previous iteration smaller than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "6"}]], TraditionalForm]],ExpressionUUID->
  "2a866614-ce18-47bc-8058-745d31c8fee4"]
}], "Text",
 CellChangeTimes->{{3.6243679326271677`*^9, 3.6243679391636095`*^9}, {
   3.624368283933448*^9, 3.6243683087556086`*^9}, {3.624968934306712*^9, 
   3.624968939795261*^9}, 
   3.641209264085238*^9},ExpressionUUID->"81a9dfe5-4332-4d5c-93b5-\
221d9aec7e4c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "3"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"out2", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "4"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numberOfReplications"}], "}"}]}], "]"}], 
    "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.624367941659625*^9, 3.624368011094079*^9}, {
  3.6243682388871555`*^9, 
  3.624368276046995*^9}},ExpressionUUID->"642b1d2f-9a97-45ca-be36-\
8d2e80316afe"]
}, Closed]],

Cell[CellGroupData[{

Cell["e) Reducing commuting costs using HRI changes 1990-2007", "Subchapter",
 CellChangeTimes->{{3.6410618491529827`*^9, 3.641061860663133*^9}, {
  3.681668730838708*^9, 3.681668736830716*^9}, {3.6816687928158035`*^9, 
  3.6816688103088293`*^9}, {3.681670937879146*^9, 3.6816709441601644`*^9}, {
  3.6817286400835266`*^9, 3.6817286570525646`*^9}, {3.6817297175899677`*^9, 
  3.6817297243829813`*^9}, {3.734187401683897*^9, 3.734187405795903*^9}, {
  3.73452734053435*^9, 3.734527341815352*^9}, {3.7345280051304913`*^9, 
  3.734528013255506*^9}, {3.7346038524986277`*^9, 
  3.734603852636636*^9}},ExpressionUUID->"a7578c53-8cd2-4ac1-b58f-\
c5e01fc190b3"],

Cell[CellGroupData[{

Cell["Reduction by the median change", "Section",
 CellChangeTimes->{{3.6817297006459208`*^9, 
  3.681729711935948*^9}},ExpressionUUID->"8e1df223-6393-4f91-b145-\
bd9688e0f8e1"],

Cell["\<\
We reduce commuting costs symmetrically for all counties. The reduction is \
the inverse of the median change in the HRI from 1990 to 2007. In this \
distribution, we only count counties with a positive HRI, and exclude \
residence=workplace cases (where HRI_hat=1). 
Note: to simulate the consequences of reducing commuting costs with a 50% \
higher or 50% lower \[Epsilon] (see footnote 42) it is sufficient to quit the \
Notebook (to clear all data), change the value of \[Epsilon] accordingly in \
the \[OpenCurlyDoubleQuote]Setup, Import Data >> Parameters\
\[CloseCurlyDoubleQuote], and re-run.\
\>", "Text",
 CellChangeTimes->{{3.681669078631254*^9, 3.6816691769254074`*^9}, 
   3.681669762506525*^9, {3.6817285982934265`*^9, 3.6817286360375156`*^9}, {
   3.734541191372075*^9, 3.7345412958362303`*^9}, {3.734541328613279*^9, 
   3.734541365595335*^9}},ExpressionUUID->"f678a257-ee89-4f48-b951-\
272ca333c7f9"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "commuting", " ", "costs"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comch", "=", 
     SuperscriptBox[".6601334", 
      RowBox[{"1", "/", "\[Epsilon]"}]]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"comch", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.641140521292776*^9, 3.641140541180765*^9}, {
   3.641253201747097*^9, 3.641253203669097*^9}, {3.6413205512543764`*^9, 
   3.6413205839186425`*^9}, {3.641320662952545*^9, 3.6413206635286026`*^9}, {
   3.6419223039527063`*^9, 3.64192230909622*^9}, 3.641944156052787*^9, 
   3.641944425288693*^9, {3.641945157157748*^9, 3.6419452233192034`*^9}, {
   3.64199378495715*^9, 3.6419938011647706`*^9}, 3.6526979704742146`*^9, {
   3.6542574106878295`*^9, 3.654257415160836*^9}, {3.6542586824522486`*^9, 
   3.6542586894642615`*^9}, {3.6816692084494567`*^9, 3.681669261006547*^9}, {
   3.6816693135976353`*^9, 3.6816693670427303`*^9}, {3.681728584288392*^9, 
   3.6817285856033955`*^9}, {3.6817287343747606`*^9, 
   3.6817287644409423`*^9}, {3.6817288325283422`*^9, 
   3.6817288441273656`*^9}, {3.6818277933394227`*^9, 3.6818277958244295`*^9}, 
   3.7345207984548235`*^9},
 CellLabel->
  "In[369]:=",ExpressionUUID->"9076b107-7f71-4a7a-8439-ab6795b8a6f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"khat", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "4"}], ",", 
     RowBox[{"1", ";;", "4"}]}], "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6816693792957544`*^9, 3.681669380237756*^9}, {
   3.681669767026533*^9, 3.6816697811905613`*^9}, 3.6816698395011144`*^9, {
   3.681669903738945*^9, 3.6816699093049555`*^9}, {3.6816704510218782`*^9, 
   3.681670474113925*^9}, {3.6817287078116913`*^9, 3.6817287191887236`*^9}},
 CellLabel->
  "In[376]:=",ExpressionUUID->"fc6dc0c4-e3ef-4314-8a6f-85a061caf09b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"comm", "=", 
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Eta]zero", ",", 
     "25"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.641140519915639*^9, {3.641140558789526*^9, 3.64114070294694*^9}, {
   3.6411407460272474`*^9, 3.6411407647561207`*^9}, {3.641253125092097*^9, 
   3.641253129570097*^9}, {3.6413206677060204`*^9, 3.6413206724964995`*^9}, {
   3.68172880839915*^9, 3.6817288100051546`*^9}, {3.6817288542793856`*^9, 
   3.681728854709387*^9}, 3.7344633701351757`*^9, {3.7345208032728343`*^9, 
   3.734520805056839*^9}},
 CellLabel->
  "In[377]:=",ExpressionUUID->"4f21fdd2-fd05-428a-9b0f-e3a39338b2eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"comm", "-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"varnames", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<OwnCommutingHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<OwnTradeHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<ownTrade\>\"", "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.632849387342736*^9, {3.632851592218201*^9, 3.6328516293859177`*^9}, {
   3.6328517089808764`*^9, 3.6328517546464424`*^9}, {3.633027178552641*^9, 
   3.6330271939531813`*^9}, {3.634601835730294*^9, 3.6346018377583065`*^9}, 
   3.6413211861368585`*^9, {3.6413215392271643`*^9, 3.6413215400262437`*^9}, 
   3.6420589789063873`*^9, {3.6542621814453487`*^9, 3.6542621826453505`*^9}, {
   3.6817291426792483`*^9, 3.6817291431932497`*^9}, 3.734463373461732*^9, {
   3.7345209188090343`*^9, 3.7345209310650578`*^9}},
 CellLabel->
  "In[378]:=",ExpressionUUID->"7e4b7eba-c060-423e-a892-7a74615c061e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ownCommHat", "=", 
   RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ownTradeHat", "=", 
   RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"varnames", ",", 
     RowBox[{"{", 
      RowBox[{
      "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
       ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
       ",", "ownCommHat", ",", "ownTradeHat", ",", 
       RowBox[{"Diagonal", "[", "\[Pi]niOnlyTrading", "]"}]}], "}"}], ",", 
     "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<data\\\\decreaseMedian.csv\>\"", ",", "out"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"whatOut", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
       RowBox[{
        RowBox[{"khat", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]hatOut", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"PhatOut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"QhatOut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
         RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
      SuperscriptBox[
       RowBox[{"bhat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], 
       RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6276680003228188`*^9, 3.627668105093294*^9}, {
   3.6276682931825323`*^9, 3.627668326687561*^9}, {3.6276683927118053`*^9, 
   3.6276684542882175`*^9}, {3.627668879420566*^9, 3.6276689276203856`*^9}, {
   3.627670106553771*^9, 3.627670198444375*^9}, {3.627670231443434*^9, 
   3.627670242849107*^9}, {3.6276702916686306`*^9, 3.6276703398173504`*^9}, {
   3.627670922131649*^9, 3.627670922615252*^9}, {3.6276736923830986`*^9, 
   3.6276736983386946`*^9}, {3.6328476865586743`*^9, 3.632847756608679*^9}, {
   3.632847813185336*^9, 3.6328478330743246`*^9}, {3.632847878658882*^9, 
   3.6328479112201385`*^9}, {3.6329405892312536`*^9, 3.632940591906521*^9}, {
   3.632940639553285*^9, 3.632940641083438*^9}, {3.632947134790744*^9, 
   3.6329471388161464`*^9}, {3.633025196624468*^9, 3.6330251982066264`*^9}, {
   3.633026072441041*^9, 3.6330260726570625`*^9}, {3.633028527086481*^9, 
   3.633028527343507*^9}, {3.6346020626752415`*^9, 3.6346020975087247`*^9}, {
   3.64132086481973*^9, 3.6413208650337515`*^9}, 3.641320910239271*^9, {
   3.6413214593851805`*^9, 3.6413214888241243`*^9}, {3.6415567121239643`*^9, 
   3.6415567124899645`*^9}, {3.6419251326716385`*^9, 
   3.6419251360789795`*^9}, {3.641925245557926*^9, 3.641925249346305*^9}, {
   3.641944956384615*^9, 3.641944959083432*^9}, {3.641945951846801*^9, 
   3.6419459607574577`*^9}, {3.6419903910217905`*^9, 3.6419903922029085`*^9}, 
   3.6526995241011477`*^9, {3.6526995581612215`*^9, 3.6526995584982233`*^9}, {
   3.65312397241711*^9, 3.6531239902051363`*^9}, {3.653212396134348*^9, 
   3.65321239791435*^9}, {3.654256209526021*^9, 3.6542562098160214`*^9}, {
   3.681729096464632*^9, 3.681729123043208*^9}, {3.7344634209687953`*^9, 
   3.7344634258389053`*^9}},
 CellLabel->
  "In[380]:=",ExpressionUUID->"aacc051a-2e6e-4033-beb1-75cdbc1733d9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0326307816431701`", ",", "1.0326308749963784`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.641321574521693*^9, 3.6419251651888905`*^9, 
  3.6419252576081314`*^9, 3.6419441454587274`*^9, 3.6419449601598387`*^9, 
  3.6419458852845535`*^9, 3.6419460245218925`*^9, 3.641990458264514*^9, 
  3.641994413890037*^9, 3.653125098543242*^9, 3.653390637457116*^9, 
  3.6542573752317753`*^9, 3.6542584701139855`*^9, 3.6542621905653615`*^9, 
  3.6817296603065557`*^9, 3.6818285355358076`*^9, 3.734521594882304*^9},
 CellLabel->
  "Out[387]=",ExpressionUUID->"2371f8d0-84f3-422b-a8a3-eefa552c4549"]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6781145539149103`*^9, 3.6781145539149103`*^9}, 
   3.6781145981249723`*^9},
 CellLabel->
  "In[388]:=",ExpressionUUID->"f173b672-36f9-45d5-97fd-7901e0e6a5d6"]
}, Closed]],

Cell[CellGroupData[{

Cell["Increase by the median change", "Section",
 CellChangeTimes->{{3.6817297006459208`*^9, 3.681729711935948*^9}, {
  3.6817297599752154`*^9, 
  3.6817297611272187`*^9}},ExpressionUUID->"7b2a67de-6aba-4c5f-b1de-\
90820f54a828"],

Cell["\<\
We increase commuting costs symmetrically for all counties. The increase is \
the median change in the HRI from 1990 to 2007. In this distribution, we only \
count counties with a positive HRI, and exclude residence=workplace cases \
(where HRI_hat=1). \
\>", "Text",
 CellChangeTimes->{{3.681669078631254*^9, 3.6816691769254074`*^9}, 
   3.681669762506525*^9, {3.6817285982934265`*^9, 3.6817286360375156`*^9}, {
   3.6817297808232875`*^9, 
   3.681729798049323*^9}},ExpressionUUID->"b6f05890-a5ea-4c6e-9a68-\
6e1b40d17d4b"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "commuting", " ", "costs"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comch", "=", 
     SuperscriptBox["1.514845", 
      RowBox[{"1", "/", "\[Epsilon]"}]]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"comch", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.641140521292776*^9, 3.641140541180765*^9}, {
   3.641253201747097*^9, 3.641253203669097*^9}, {3.6413205512543764`*^9, 
   3.6413205839186425`*^9}, {3.641320662952545*^9, 3.6413206635286026`*^9}, {
   3.6419223039527063`*^9, 3.64192230909622*^9}, 3.641944156052787*^9, 
   3.641944425288693*^9, {3.641945157157748*^9, 3.6419452233192034`*^9}, {
   3.64199378495715*^9, 3.6419938011647706`*^9}, 3.6526979704742146`*^9, {
   3.6542574106878295`*^9, 3.654257415160836*^9}, {3.6542586824522486`*^9, 
   3.6542586894642615`*^9}, {3.6816692084494567`*^9, 3.681669261006547*^9}, {
   3.6816693135976353`*^9, 3.6816693670427303`*^9}, {3.681728584288392*^9, 
   3.6817285856033955`*^9}, {3.6817287343747606`*^9, 
   3.6817287644409423`*^9}, {3.6817288325283422`*^9, 3.6817288441273656`*^9}, 
   3.6817297746862745`*^9, {3.681827809233452*^9, 3.6818278096434526`*^9}, {
   3.7345219608762226`*^9, 3.7345219613462234`*^9}},
 CellLabel->
  "In[389]:=",ExpressionUUID->"fa7e8178-051c-4ca6-80e5-9aa453f4f454"],

Cell[BoxData[
 RowBox[{
  RowBox[{"khat", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "4"}], ",", 
     RowBox[{"1", ";;", "4"}]}], "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6816693792957544`*^9, 3.681669380237756*^9}, {
   3.681669767026533*^9, 3.6816697811905613`*^9}, 3.6816698395011144`*^9, {
   3.681669903738945*^9, 3.6816699093049555`*^9}, {3.6816704510218782`*^9, 
   3.681670474113925*^9}, {3.6817287078116913`*^9, 3.6817287191887236`*^9}},
 CellLabel->
  "In[396]:=",ExpressionUUID->"68660dbb-9f72-40f7-8794-18ec799a6d53"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6419444169210386`*^9, 3.641944422511875*^9}},
 CellLabel->
  "In[397]:=",ExpressionUUID->"144432ad-71c3-4dbd-ba89-75975280ba07"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"comm", "=", 
    RowBox[{"hatChanges", "[", 
     RowBox[{
     "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Eta]zero", ",", 
      "25"}], "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.641140519915639*^9, {3.641140558789526*^9, 3.64114070294694*^9}, {
   3.6411407460272474`*^9, 3.6411407647561207`*^9}, {3.641253125092097*^9, 
   3.641253129570097*^9}, {3.6413206677060204`*^9, 3.6413206724964995`*^9}, {
   3.68172880839915*^9, 3.6817288100051546`*^9}, {3.6817288542793856`*^9, 
   3.681728854709387*^9}, {3.7345219556952147`*^9, 3.7345219575752172`*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"ed50d061-abc5-40dd-b892-639325f38373"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"comm", "-", "1"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.632849387342736*^9, {3.632851592218201*^9, 3.6328516293859177`*^9}, {
   3.6328517089808764`*^9, 3.6328517546464424`*^9}, {3.633027178552641*^9, 
   3.6330271939531813`*^9}, {3.634601835730294*^9, 3.6346018377583065`*^9}, 
   3.6413211861368585`*^9, {3.6413215392271643`*^9, 3.6413215400262437`*^9}, 
   3.6420589789063873`*^9, {3.6542621814453487`*^9, 3.6542621826453505`*^9}, {
   3.6817291426792483`*^9, 3.6817291431932497`*^9}, {3.6817303040741234`*^9, 
   3.6817303045541244`*^9}, 3.7344634655022974`*^9, {3.734463564388567*^9, 
   3.734463564900881*^9}, {3.7345228561397514`*^9, 3.734522856552752*^9}},
 CellLabel->
  "In[402]:=",ExpressionUUID->"29654c29-9a09-4023-b603-f0e64428a619"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"whatOut", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
       RowBox[{
        RowBox[{"khat", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]hatOut", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"PhatOut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"QhatOut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
         RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
      SuperscriptBox[
       RowBox[{"bhat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], 
       RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6276680003228188`*^9, 3.627668105093294*^9}, {
   3.6276682931825323`*^9, 3.627668326687561*^9}, {3.6276683927118053`*^9, 
   3.6276684542882175`*^9}, {3.627668879420566*^9, 3.6276689276203856`*^9}, {
   3.627670106553771*^9, 3.627670198444375*^9}, {3.627670231443434*^9, 
   3.627670242849107*^9}, {3.6276702916686306`*^9, 3.6276703398173504`*^9}, {
   3.627670922131649*^9, 3.627670922615252*^9}, {3.6276736923830986`*^9, 
   3.6276736983386946`*^9}, {3.6328476865586743`*^9, 3.632847756608679*^9}, {
   3.632847813185336*^9, 3.6328478330743246`*^9}, {3.632847878658882*^9, 
   3.6328479112201385`*^9}, {3.6329405892312536`*^9, 3.632940591906521*^9}, {
   3.632940639553285*^9, 3.632940641083438*^9}, {3.632947134790744*^9, 
   3.6329471388161464`*^9}, {3.633025196624468*^9, 3.6330251982066264`*^9}, {
   3.633026072441041*^9, 3.6330260726570625`*^9}, {3.633028527086481*^9, 
   3.633028527343507*^9}, {3.6346020626752415`*^9, 3.6346020975087247`*^9}, {
   3.64132086481973*^9, 3.6413208650337515`*^9}, 3.641320910239271*^9, {
   3.6413214593851805`*^9, 3.6413214888241243`*^9}, {3.6415567121239643`*^9, 
   3.6415567124899645`*^9}, {3.6419251326716385`*^9, 
   3.6419251360789795`*^9}, {3.641925245557926*^9, 3.641925249346305*^9}, {
   3.641944956384615*^9, 3.641944959083432*^9}, {3.641945951846801*^9, 
   3.6419459607574577`*^9}, {3.6419903910217905`*^9, 3.6419903922029085`*^9}, 
   3.6526995241011477`*^9, {3.6526995581612215`*^9, 3.6526995584982233`*^9}, {
   3.65312397241711*^9, 3.6531239902051363`*^9}, {3.653212396134348*^9, 
   3.65321239791435*^9}, {3.654256209526021*^9, 3.6542562098160214`*^9}, {
   3.681729096464632*^9, 3.681729123043208*^9}, {3.6817298347984037`*^9, 
   3.6817298367224073`*^9}, {3.7344635208837204`*^9, 3.734463521338352*^9}, {
   3.734463553102851*^9, 3.734463553914056*^9}, {3.734463602524626*^9, 
   3.734463604709205*^9}},
 CellLabel->
  "In[403]:=",ExpressionUUID->"c4240257-904f-46ae-b96d-05316ede0ef0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9766517544989965`", ",", "0.9766518461973883`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.641321574521693*^9, 3.6419251651888905`*^9, 
  3.6419252576081314`*^9, 3.6419441454587274`*^9, 3.6419449601598387`*^9, 
  3.6419458852845535`*^9, 3.6419460245218925`*^9, 3.641990458264514*^9, 
  3.641994413890037*^9, 3.653125098543242*^9, 3.653390637457116*^9, 
  3.6542573752317753`*^9, 3.6542584701139855`*^9, 3.6542621905653615`*^9, 
  3.6817296603065557`*^9, 3.681730662474658*^9, 3.68182927781034*^9, 
  3.7345227020004497`*^9, 3.7345228744967813`*^9},
 CellLabel->
  "Out[404]=",ExpressionUUID->"bd19cb78-dfb9-44ee-be17-b18ee44af406"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Reduction by the p25 change", "Section",
 CellChangeTimes->{{3.6817297006459208`*^9, 3.681729711935948*^9}, {
  3.68172987401588*^9, 
  3.6817298753248844`*^9}},ExpressionUUID->"78af92d8-537d-4e61-9752-\
f4819807b98b"],

Cell["\<\
We reduce commuting costs symmetrically for all counties. The reduction is \
the inverse of the p25 change in the HRI from 1990 to 2007. In this \
distribution, we only count counties with a positive HRI, and exclude \
residence=workplace cases (where HRI_hat=1). \
\>", "Text",
 CellChangeTimes->{{3.681669078631254*^9, 3.6816691769254074`*^9}, 
   3.681669762506525*^9, {3.6817285982934265`*^9, 3.6817286360375156`*^9}, {
   3.6817298808208966`*^9, 
   3.6817298815438976`*^9}},ExpressionUUID->"5bc4c47e-a8c5-4921-a542-\
903f4d2de6e1"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "commuting", " ", "costs"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comch", "=", 
     SuperscriptBox[".8805599", 
      RowBox[{"1", "/", "\[Epsilon]"}]]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"comch", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.641140521292776*^9, 3.641140541180765*^9}, {
   3.641253201747097*^9, 3.641253203669097*^9}, {3.6413205512543764`*^9, 
   3.6413205839186425`*^9}, {3.641320662952545*^9, 3.6413206635286026`*^9}, {
   3.6419223039527063`*^9, 3.64192230909622*^9}, 3.641944156052787*^9, 
   3.641944425288693*^9, {3.641945157157748*^9, 3.6419452233192034`*^9}, {
   3.64199378495715*^9, 3.6419938011647706`*^9}, 3.6526979704742146`*^9, {
   3.6542574106878295`*^9, 3.654257415160836*^9}, {3.6542586824522486`*^9, 
   3.6542586894642615`*^9}, {3.6816692084494567`*^9, 3.681669261006547*^9}, {
   3.6816693135976353`*^9, 3.6816693670427303`*^9}, {3.681728584288392*^9, 
   3.6817285856033955`*^9}, {3.6817287343747606`*^9, 
   3.6817287644409423`*^9}, {3.6817288325283422`*^9, 
   3.6817288441273656`*^9}, {3.6817300122243767`*^9, 
   3.6817300126243773`*^9}, {3.681730121263562*^9, 3.681730121645563*^9}, {
   3.6818278148374605`*^9, 3.6818278153394613`*^9}, {3.7345228955728197`*^9, 
   3.7345228983348236`*^9}},ExpressionUUID->"5ec97ba4-b452-44d7-af06-\
4eddc607ddba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"khat", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "4"}], ",", 
     RowBox[{"1", ";;", "4"}]}], "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6816693792957544`*^9, 3.681669380237756*^9}, {
   3.681669767026533*^9, 3.6816697811905613`*^9}, 3.6816698395011144`*^9, {
   3.681669903738945*^9, 3.6816699093049555`*^9}, {3.6816704510218782`*^9, 
   3.681670474113925*^9}, {3.6817287078116913`*^9, 
   3.6817287191887236`*^9}},ExpressionUUID->"4d33cf68-6b78-48c4-ba2f-\
42f9c671895b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6419444169210386`*^9, 
  3.641944422511875*^9}},ExpressionUUID->"00ad8ee6-9f50-4242-b200-\
72958d5e0725"],

Cell[BoxData[
 RowBox[{
  RowBox[{"comm", "=", 
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Eta]zero", ",", 
     "25"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.641140519915639*^9, {3.641140558789526*^9, 3.64114070294694*^9}, {
   3.6411407460272474`*^9, 3.6411407647561207`*^9}, {3.641253125092097*^9, 
   3.641253129570097*^9}, {3.6413206677060204`*^9, 3.6413206724964995`*^9}, {
   3.68172880839915*^9, 3.6817288100051546`*^9}, {3.6817288542793856`*^9, 
   3.681728854709387*^9}, 3.7344636227882366`*^9, {3.7345228903818083`*^9, 
   3.7345228921018105`*^9}},ExpressionUUID->"5a82d131-a499-4573-91c5-\
4f0da2b10860"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"comm", "-", "1"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.632849387342736*^9, {3.632851592218201*^9, 3.6328516293859177`*^9}, {
   3.6328517089808764`*^9, 3.6328517546464424`*^9}, {3.633027178552641*^9, 
   3.6330271939531813`*^9}, {3.634601835730294*^9, 3.6346018377583065`*^9}, 
   3.6413211861368585`*^9, {3.6413215392271643`*^9, 3.6413215400262437`*^9}, 
   3.6420589789063873`*^9, {3.6542621814453487`*^9, 3.6542621826453505`*^9}, {
   3.6817291426792483`*^9, 3.6817291431932497`*^9}, {3.7344636309774475`*^9, 
   3.734463631362026*^9}, {3.734522885521799*^9, 
   3.7345228858317995`*^9}},ExpressionUUID->"c86965a9-7b15-4d85-a513-\
ecfa7aa7d31c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"whatOut", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
       RowBox[{
        RowBox[{"khat", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]hatOut", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"PhatOut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"QhatOut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
         RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
      SuperscriptBox[
       RowBox[{"bhat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], 
       RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6276680003228188`*^9, 3.627668105093294*^9}, {
   3.6276682931825323`*^9, 3.627668326687561*^9}, {3.6276683927118053`*^9, 
   3.6276684542882175`*^9}, {3.627668879420566*^9, 3.6276689276203856`*^9}, {
   3.627670106553771*^9, 3.627670198444375*^9}, {3.627670231443434*^9, 
   3.627670242849107*^9}, {3.6276702916686306`*^9, 3.6276703398173504`*^9}, {
   3.627670922131649*^9, 3.627670922615252*^9}, {3.6276736923830986`*^9, 
   3.6276736983386946`*^9}, {3.6328476865586743`*^9, 3.632847756608679*^9}, {
   3.632847813185336*^9, 3.6328478330743246`*^9}, {3.632847878658882*^9, 
   3.6328479112201385`*^9}, {3.6329405892312536`*^9, 3.632940591906521*^9}, {
   3.632940639553285*^9, 3.632940641083438*^9}, {3.632947134790744*^9, 
   3.6329471388161464`*^9}, {3.633025196624468*^9, 3.6330251982066264`*^9}, {
   3.633026072441041*^9, 3.6330260726570625`*^9}, {3.633028527086481*^9, 
   3.633028527343507*^9}, {3.6346020626752415`*^9, 3.6346020975087247`*^9}, {
   3.64132086481973*^9, 3.6413208650337515`*^9}, 3.641320910239271*^9, {
   3.6413214593851805`*^9, 3.6413214888241243`*^9}, {3.6415567121239643`*^9, 
   3.6415567124899645`*^9}, {3.6419251326716385`*^9, 
   3.6419251360789795`*^9}, {3.641925245557926*^9, 3.641925249346305*^9}, {
   3.641944956384615*^9, 3.641944959083432*^9}, {3.641945951846801*^9, 
   3.6419459607574577`*^9}, {3.6419903910217905`*^9, 3.6419903922029085`*^9}, 
   3.6526995241011477`*^9, {3.6526995581612215`*^9, 3.6526995584982233`*^9}, {
   3.65312397241711*^9, 3.6531239902051363`*^9}, {3.653212396134348*^9, 
   3.65321239791435*^9}, {3.654256209526021*^9, 3.6542562098160214`*^9}, {
   3.681729096464632*^9, 3.681729123043208*^9}, {3.681729901597948*^9, 
   3.6817299033749533`*^9}, {3.7344636547238584`*^9, 
   3.7344636599715285`*^9}},ExpressionUUID->"11e5383a-f45c-4795-91dd-\
4e258b2a9d6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0088952170358392`", ",", "1.0088953198224209`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.641321574521693*^9, 3.6419251651888905`*^9, 
  3.6419252576081314`*^9, 3.6419441454587274`*^9, 3.6419449601598387`*^9, 
  3.6419458852845535`*^9, 3.6419460245218925`*^9, 3.641990458264514*^9, 
  3.641994413890037*^9, 3.653125098543242*^9, 3.653390637457116*^9, 
  3.6542573752317753`*^9, 3.6542584701139855`*^9, 3.6542621905653615`*^9, 
  3.6817296603065557`*^9, 3.681731314757518*^9, 
  3.6818299065396414`*^9},ExpressionUUID->"158e8695-ba67-41b3-a315-\
57f4eaefa5b8"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Reduction by the p75 change", "Section",
 CellChangeTimes->{{3.6817297006459208`*^9, 3.681729711935948*^9}, {
  3.6817298879039173`*^9, 
  3.681729888655919*^9}},ExpressionUUID->"570ff4f1-c80d-4730-b4a5-\
a50192cf3c36"],

Cell["\<\
We reduce commuting costs symmetrically for all counties. The reduction is \
the inverse of the p75 change in the HRI from 1990 to 2007. In this \
distribution, we only count counties with a positive HRI, and exclude \
residence=workplace cases (where HRI_hat=1). \
\>", "Text",
 CellChangeTimes->{{3.681669078631254*^9, 3.6816691769254074`*^9}, 
   3.681669762506525*^9, {3.6817285982934265`*^9, 3.6817286360375156`*^9}, {
   3.681729893134927*^9, 
   3.681729893847929*^9}},ExpressionUUID->"3e5e6db0-f242-4664-80af-\
4ef217b98e7a"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "commuting", " ", "costs"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comch", "=", 
     SuperscriptBox[".4664594", 
      RowBox[{"1", "/", "\[Epsilon]"}]]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"comch", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.641140521292776*^9, 3.641140541180765*^9}, {
   3.641253201747097*^9, 3.641253203669097*^9}, {3.6413205512543764`*^9, 
   3.6413205839186425`*^9}, {3.641320662952545*^9, 3.6413206635286026`*^9}, {
   3.6419223039527063`*^9, 3.64192230909622*^9}, 3.641944156052787*^9, 
   3.641944425288693*^9, {3.641945157157748*^9, 3.6419452233192034`*^9}, {
   3.64199378495715*^9, 3.6419938011647706`*^9}, 3.6526979704742146`*^9, {
   3.6542574106878295`*^9, 3.654257415160836*^9}, {3.6542586824522486`*^9, 
   3.6542586894642615`*^9}, {3.6816692084494567`*^9, 3.681669261006547*^9}, {
   3.6816693135976353`*^9, 3.6816693670427303`*^9}, {3.681728584288392*^9, 
   3.6817285856033955`*^9}, {3.6817287343747606`*^9, 
   3.6817287644409423`*^9}, {3.6817288325283422`*^9, 3.6817288441273656`*^9}, 
   3.681730063151458*^9, 3.681730138503601*^9, {3.6818278200084734`*^9, 
   3.6818278204934764`*^9}, {3.7345229305518746`*^9, 
   3.734522930821875*^9}},ExpressionUUID->"5415c6ea-e6a4-46ef-aab9-\
0da6d39d3b81"],

Cell[BoxData[
 RowBox[{
  RowBox[{"khat", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "4"}], ",", 
     RowBox[{"1", ";;", "4"}]}], "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6816693792957544`*^9, 3.681669380237756*^9}, {
   3.681669767026533*^9, 3.6816697811905613`*^9}, 3.6816698395011144`*^9, {
   3.681669903738945*^9, 3.6816699093049555`*^9}, {3.6816704510218782`*^9, 
   3.681670474113925*^9}, {3.6817287078116913`*^9, 
   3.6817287191887236`*^9}},ExpressionUUID->"d27497bc-c1ff-41bc-afce-\
1341438f8386"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6419444169210386`*^9, 
  3.641944422511875*^9}},ExpressionUUID->"2382ff15-d5db-4bf5-bd14-\
924383e66cad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"comm", "=", 
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Eta]zero", ",", 
     "25"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.641140519915639*^9, {3.641140558789526*^9, 3.64114070294694*^9}, {
   3.6411407460272474`*^9, 3.6411407647561207`*^9}, {3.641253125092097*^9, 
   3.641253129570097*^9}, {3.6413206677060204`*^9, 3.6413206724964995`*^9}, {
   3.68172880839915*^9, 3.6817288100051546`*^9}, {3.6817288542793856`*^9, 
   3.681728854709387*^9}, 3.734463692444527*^9, {3.73452293429888*^9, 
   3.734522936115883*^9}},ExpressionUUID->"63a374d3-6869-4a07-bfb0-\
a0dcf342cfad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"comm", "-", "1"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.632849387342736*^9, {3.632851592218201*^9, 3.6328516293859177`*^9}, {
   3.6328517089808764`*^9, 3.6328517546464424`*^9}, {3.633027178552641*^9, 
   3.6330271939531813`*^9}, {3.634601835730294*^9, 3.6346018377583065`*^9}, 
   3.6413211861368585`*^9, {3.6413215392271643`*^9, 3.6413215400262437`*^9}, 
   3.6420589789063873`*^9, {3.6542621814453487`*^9, 3.6542621826453505`*^9}, {
   3.6817291426792483`*^9, 3.6817291431932497`*^9}, {3.7344636974504805`*^9, 
   3.734463698847145*^9}, {3.734522947828904*^9, 
   3.7345229480819063`*^9}},ExpressionUUID->"3a2f546f-2b71-4a30-a09d-\
9499f47994f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"wel", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"whatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
         RowBox[{
          RowBox[{"khat", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Lambda]hatOut", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"QhatOut", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
           RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", 
        SuperscriptBox[
         RowBox[{"bhat", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "i"}], "]"}], "]"}], 
         RowBox[{"1", "/", "\[Epsilon]"}]]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", "wel", "]"}], ",", 
     RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.6276680003228188`*^9, 3.627668105093294*^9}, {
   3.6276682931825323`*^9, 3.627668326687561*^9}, {3.6276683927118053`*^9, 
   3.6276684542882175`*^9}, {3.627668879420566*^9, 3.6276689276203856`*^9}, {
   3.627670106553771*^9, 3.627670198444375*^9}, {3.627670231443434*^9, 
   3.627670242849107*^9}, {3.6276702916686306`*^9, 3.6276703398173504`*^9}, {
   3.627670922131649*^9, 3.627670922615252*^9}, {3.6276736923830986`*^9, 
   3.6276736983386946`*^9}, {3.6328476865586743`*^9, 3.632847756608679*^9}, {
   3.632847813185336*^9, 3.6328478330743246`*^9}, {3.632847878658882*^9, 
   3.6328479112201385`*^9}, {3.6329405892312536`*^9, 3.632940591906521*^9}, {
   3.632940639553285*^9, 3.632940641083438*^9}, {3.632947134790744*^9, 
   3.6329471388161464`*^9}, {3.633025196624468*^9, 3.6330251982066264`*^9}, {
   3.633026072441041*^9, 3.6330260726570625`*^9}, {3.633028527086481*^9, 
   3.633028527343507*^9}, {3.6346020626752415`*^9, 3.6346020975087247`*^9}, {
   3.64132086481973*^9, 3.6413208650337515`*^9}, 3.641320910239271*^9, {
   3.6413214593851805`*^9, 3.6413214888241243`*^9}, {3.6415567121239643`*^9, 
   3.6415567124899645`*^9}, {3.6419251326716385`*^9, 
   3.6419251360789795`*^9}, {3.641925245557926*^9, 3.641925249346305*^9}, {
   3.641944956384615*^9, 3.641944959083432*^9}, {3.641945951846801*^9, 
   3.6419459607574577`*^9}, {3.6419903910217905`*^9, 3.6419903922029085`*^9}, 
   3.6526995241011477`*^9, {3.6526995581612215`*^9, 3.6526995584982233`*^9}, {
   3.65312397241711*^9, 3.6531239902051363`*^9}, {3.653212396134348*^9, 
   3.65321239791435*^9}, {3.654256209526021*^9, 3.6542562098160214`*^9}, {
   3.681729096464632*^9, 3.681729123043208*^9}, {3.681729912384978*^9, 
   3.681729916340988*^9}, {3.734463703086609*^9, 
   3.734463711187288*^9}},ExpressionUUID->"d9a3f8d0-97cd-4925-a78c-\
13aa60c5437d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0688775923823883`", ",", "1.06887769773704`"}], "}"}]], "Output",
 CellChangeTimes->{3.641321574521693*^9, 3.6419251651888905`*^9, 
  3.6419252576081314`*^9, 3.6419441454587274`*^9, 3.6419449601598387`*^9, 
  3.6419458852845535`*^9, 3.6419460245218925`*^9, 3.641990458264514*^9, 
  3.641994413890037*^9, 3.653125098543242*^9, 3.653390637457116*^9, 
  3.6542573752317753`*^9, 3.6542584701139855`*^9, 3.6542621905653615`*^9, 
  3.6817296603065557`*^9, 3.6817319487985983`*^9, 
  3.6818305733935213`*^9},ExpressionUUID->"a47d4633-6386-49e7-b12c-\
de6b74f09584"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["f) Reducing trade costs in worlds with and without commuting", \
"Subchapter",
 CellChangeTimes->{{3.6420593025723877`*^9, 3.6420593415173874`*^9}, {
  3.642151685497595*^9, 3.642151687537799*^9}, {3.734254631001791*^9, 
  3.7342546339027953`*^9}, {3.734528016995512*^9, 3.734528035053547*^9}, {
  3.734590895764661*^9, 3.7345908970200377`*^9}, {3.7346038558958225`*^9, 
  3.7346038588589916`*^9}},ExpressionUUID->"4ab39b69-3c77-4fe9-b8c7-\
0f3545949fbf"],

Cell[CellGroupData[{

Cell["Changing trade costs in the current world", "Section",
 CellChangeTimes->{{3.6420593672303877`*^9, 3.6420593846673875`*^9}, {
  3.6421514987649236`*^9, 
  3.6421515001640635`*^9}},ExpressionUUID->"8c24ac59-dc5b-4c84-8cda-\
39b464d8c99e"],

Cell["\<\
In this exercise we compute the effect of reducing trade costs by 20% in the \
initial equilibrium.\
\>", "Text",
 CellChangeTimes->{{3.734543013333205*^9, 
  3.734543041621251*^9}},ExpressionUUID->"ca58e433-0188-4163-8a51-\
3800882059c4"],

Cell[CellGroupData[{

Cell["Reducing trade costs 20% from the initial equilibrium", "Subsection",
 CellChangeTimes->{{3.6420731666803875`*^9, 
  3.6420731917003875`*^9}},ExpressionUUID->"2f47b84a-814e-4cd8-a398-\
16262f481c76"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"change", " ", "in", " ", "distances"}], ";", " ", 
    RowBox[{"already", " ", "exponentiated"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"0.8", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], "-", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"-", "0.2"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"tolerance", ",", " ", 
     RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
     RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.621264863025693*^9, 3.621264925537944*^9}, 
   3.6212658881101913`*^9, {3.621265937823162*^9, 3.6212659437197514`*^9}, {
   3.6212664097183466`*^9, 3.6212664726786423`*^9}, {3.6212665029436684`*^9, 
   3.621266531312505*^9}, {3.6212665779861717`*^9, 3.621266627221095*^9}, {
   3.6212667382852*^9, 3.6212668704864187`*^9}, {3.6212669340117707`*^9, 
   3.6212669499963694`*^9}, {3.6213360832371306`*^9, 3.621336123514044*^9}, {
   3.6213366572646956`*^9, 3.6213367028286953`*^9}, {3.6213367353146954`*^9, 
   3.6213367565686955`*^9}, {3.6213368620426955`*^9, 
   3.6213368647856956`*^9}, {3.6213369123756957`*^9, 
   3.6213369148696957`*^9}, {3.6213369475316954`*^9, 
   3.6213369509396954`*^9}, {3.621337000591696*^9, 3.6213370050626955`*^9}, 
   3.621337304905696*^9, {3.6213376993511753`*^9, 3.621337699527193*^9}, {
   3.6213377446957097`*^9, 3.621337768331073*^9}, {3.621337801881428*^9, 
   3.6213378033295727`*^9}, {3.62133788101234*^9, 3.6213379188691254`*^9}, {
   3.621340198894105*^9, 3.62134019904712*^9}, {3.621340622777489*^9, 
   3.6213406266778793`*^9}, {3.6213406604262533`*^9, 
   3.6213407485510654`*^9}, {3.6213452712422895`*^9, 3.621345271499315*^9}, {
   3.6213465334544973`*^9, 3.621346534967649*^9}, 3.6213470189300404`*^9, {
   3.621347309417086*^9, 3.6213473196011047`*^9}, {3.6213473950746512`*^9, 
   3.6213474889970427`*^9}, {3.621347560367179*^9, 3.6213475665557976`*^9}, {
   3.6213476661957607`*^9, 3.621347694923633*^9}, {3.6213479696171*^9, 
   3.6213482389600315`*^9}, {3.6213486128994217`*^9, 3.621348627795911*^9}, {
   3.621348786943824*^9, 3.621348788134943*^9}, {3.621349077942921*^9, 
   3.6213492179809237`*^9}, {3.621349277733898*^9, 3.621349291126237*^9}, {
   3.6213493847275963`*^9, 3.621349485323655*^9}, {3.6213497293610563`*^9, 
   3.6213497371778383`*^9}, {3.621349810595179*^9, 3.6213498118043003`*^9}, {
   3.6213499303771563`*^9, 3.621349942373356*^9}, {3.6213500000431223`*^9, 
   3.621350003347452*^9}, {3.6213501498831043`*^9, 3.6213501501141276`*^9}, {
   3.6213502467577906`*^9, 3.6213502741185265`*^9}, {3.621350399685082*^9, 
   3.621350465089622*^9}, {3.621350525936706*^9, 3.6213505302651386`*^9}, 
   3.621350847990908*^9, {3.6213509164037485`*^9, 3.6213509167877874`*^9}, {
   3.621354277596834*^9, 3.6213543223293076`*^9}, {3.621355665181579*^9, 
   3.6213558026693263`*^9}, {3.621355849680027*^9, 3.621355850481107*^9}, {
   3.621356022205278*^9, 3.621356024788536*^9}, {3.6213561769557514`*^9, 
   3.621356178018858*^9}, {3.621356467156769*^9, 3.6213564711471677`*^9}, {
   3.6213565487499275`*^9, 3.6213565496930213`*^9}, {3.6213566144014916`*^9, 
   3.621356748411891*^9}, {3.6213567939974494`*^9, 3.6213567966597157`*^9}, {
   3.621356857029752*^9, 3.621356872022251*^9}, {3.621356910635112*^9, 
   3.621356955527601*^9}, 3.621357015875635*^9, {3.6213570741654634`*^9, 
   3.621357116014648*^9}, {3.621357488162859*^9, 3.621357488552898*^9}, {
   3.621360761559166*^9, 3.6213608397039795`*^9}, {3.621360945930601*^9, 
   3.6213609471867266`*^9}, {3.62136102972598*^9, 3.6213610408730946`*^9}, {
   3.6213619637393723`*^9, 3.621361968658864*^9}, {3.6213621262526217`*^9, 
   3.6213621638853846`*^9}, {3.621362231968192*^9, 3.621362236666662*^9}, {
   3.621362519813974*^9, 3.62136259038603*^9}, {3.621362625455537*^9, 
   3.6213626823522263`*^9}, {3.6213627210991*^9, 3.621362842866276*^9}, {
   3.6213628792379127`*^9, 3.621362988416829*^9}, {3.6213630383168187`*^9, 
   3.6213630384438314`*^9}, {3.621363103342321*^9, 3.6213631627892647`*^9}, {
   3.6213632427112565`*^9, 3.621363363470331*^9}, {3.621363560508033*^9, 
   3.621363638713853*^9}, {3.621363669954976*^9, 3.6213636822112017`*^9}, {
   3.621363721580138*^9, 3.6213637221021905`*^9}, {3.621363886874666*^9, 
   3.621363887474726*^9}, {3.6213647295619264`*^9, 3.6213647351064806`*^9}, 
   3.621428761819832*^9, {3.62142897742239*^9, 3.6214290483344803`*^9}, {
   3.621429135050151*^9, 3.621429141662812*^9}, {3.6214292048131266`*^9, 
   3.6214292470613513`*^9}, {3.6214293132209663`*^9, 3.621429319516596*^9}, {
   3.6214294520158443`*^9, 3.621429452500893*^9}, {3.621435836149415*^9, 
   3.6214358838991895`*^9}, {3.621442845089239*^9, 3.6214428483925695`*^9}, {
   3.6214444013728514`*^9, 3.6214444269024043`*^9}, {3.6214445389276056`*^9, 
   3.621444552392952*^9}, {3.6214445960753202`*^9, 3.6214445995526676`*^9}, {
   3.62144705732342*^9, 3.6214470593736253`*^9}, {3.6214470960532928`*^9, 
   3.6214471040440917`*^9}, {3.621447602188901*^9, 3.621447639590641*^9}, {
   3.6214476815278344`*^9, 3.62144783189987*^9}, {3.621447878183498*^9, 
   3.621447884324112*^9}, 3.6214482310847845`*^9, {3.621448310597735*^9, 
   3.6214483117258477`*^9}, {3.621448355340209*^9, 3.6214483557492495`*^9}, {
   3.621448388823557*^9, 3.6214484270943837`*^9}, {3.621448859176587*^9, 
   3.6214488793656063`*^9}, {3.621448938997569*^9, 3.6214489391965885`*^9}, {
   3.6214493960062647`*^9, 3.621449401896854*^9}, {3.621449549024565*^9, 
   3.621449554506113*^9}, {3.6214497278764486`*^9, 3.6214497280834694`*^9}, {
   3.6214498316028204`*^9, 3.6214498454392037`*^9}, {3.62144994971063*^9, 
   3.621449964064065*^9}, 3.6214500624499025`*^9, {3.6214502905027056`*^9, 
   3.6214503065723124`*^9}, 3.621450351758831*^9, {3.621450389911646*^9, 
   3.6214503945511093`*^9}, {3.6214507122268744`*^9, 
   3.6214507153431854`*^9}, {3.621450813949045*^9, 3.6214508173213825`*^9}, {
   3.621450863822032*^9, 3.6214508899816475`*^9}, {3.6214509933029785`*^9, 
   3.6214509937750263`*^9}, {3.62145102461611*^9, 3.6214510251121593`*^9}, {
   3.621451109385586*^9, 3.6214511136400113`*^9}, 3.621451208770523*^9, 
   3.621453319069532*^9, {3.62145334935256*^9, 3.6214533929469194`*^9}, {
   3.621453475356159*^9, 3.621453549054528*^9}, 3.6214536671383357`*^9, {
   3.621453719238545*^9, 3.621453733950016*^9}, 3.6214537644390645`*^9, {
   3.621454594995112*^9, 3.621454595130125*^9}, {3.6214547620858192`*^9, 
   3.6214548062632365`*^9}, {3.621454853632973*^9, 3.6214548750001097`*^9}, {
   3.6214549110017095`*^9, 3.621454924626072*^9}, {3.62145496451406*^9, 
   3.6214549872833366`*^9}, {3.621466886180997*^9, 3.621466904427388*^9}, {
   3.621589391080161*^9, 3.621589392872161*^9}, {3.621589916915161*^9, 
   3.621589917442161*^9}, {3.621598070088068*^9, 3.621598129713822*^9}, {
   3.6215983421081147`*^9, 3.621598366473422*^9}, {3.621616087067378*^9, 
   3.6216161189965706`*^9}, {3.621624124238014*^9, 3.6216241470372944`*^9}, {
   3.6216241816627564`*^9, 3.621624205440134*^9}, {3.621624299355524*^9, 
   3.6216243412827168`*^9}, {3.621782986851038*^9, 3.621782993319038*^9}, {
   3.621795479589527*^9, 3.6217954812245593`*^9}, {3.6217992620564137`*^9, 
   3.6217992630014133`*^9}, {3.6218088379064136`*^9, 
   3.6218088394464135`*^9}, {3.621849838837517*^9, 3.6218498391475167`*^9}, {
   3.621852507236517*^9, 3.621852524027517*^9}, {3.621852892111517*^9, 
   3.621852899021517*^9}, {3.621882926600565*^9, 3.621882931096565*^9}, {
   3.6218978770063505`*^9, 3.6218978844643507`*^9}, 3.627493132034206*^9, {
   3.627662235548311*^9, 3.6276622384125977`*^9}, {3.6276663650420365`*^9, 
   3.6276663656192403`*^9}, {3.6276676059291787`*^9, 
   3.6276676156530414`*^9}, {3.627667695273565*^9, 3.6276677311179953`*^9}, {
   3.6276677745162764`*^9, 3.627667776949892*^9}, {3.6279876428832245`*^9, 
   3.6279876603870783`*^9}, {3.627990052301015*^9, 3.6279900533628216`*^9}, {
   3.627991637224477*^9, 3.6279916428103127`*^9}, {3.6328358086093655`*^9, 
   3.6328358504075446`*^9}, {3.632846991416175*^9, 3.6328470029613295`*^9}, {
   3.6328473519972296`*^9, 3.632847385172547*^9}, {3.6328488358445916`*^9, 
   3.6328488852295294`*^9}, {3.6328489203510413`*^9, 
   3.6328489248714933`*^9}, {3.632849266490652*^9, 3.632849324697472*^9}, {
   3.632849442869288*^9, 3.6328494432293243`*^9}, {3.632851097363721*^9, 
   3.6328510993639207`*^9}, {3.6330202603708925`*^9, 3.633020261069962*^9}, {
   3.633020338663721*^9, 3.633020342689123*^9}, {3.633020392294083*^9, 
   3.633020397170571*^9}, {3.6330207336412144`*^9, 3.633020751187969*^9}, {
   3.633021277519597*^9, 3.63302128925077*^9}, {3.634602311624134*^9, 
   3.6346024255326333`*^9}, {3.634603193838558*^9, 3.634603194275361*^9}, {
   3.6420656402493877`*^9, 3.642065645797387*^9}, 3.6420657130373874`*^9, {
   3.6420670646683874`*^9, 3.6420670924103875`*^9}, {3.6420671352413874`*^9, 
   3.642067148618387*^9}, {3.6420672362793875`*^9, 3.6420672537663875`*^9}, 
   3.6420693792223873`*^9, 3.6526996619024706`*^9},
 CellLabel->
  "In[410]:=",ExpressionUUID->"516eaabd-cebe-43b9-a15d-a6c0cadd2c1f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lowTradeInitialEq", "=", 
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Eta]zero", ",", 
     "25"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"lowTradeInitialEq", "-", "1"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.6328493659475965`*^9, {3.6328494465666575`*^9, 3.6328494471817193`*^9}, {
   3.633021369005745*^9, 3.6330213692217665`*^9}, 3.634605226790651*^9, {
   3.6420671494783874`*^9, 3.642067182783387*^9}, {3.6420672772443876`*^9, 
   3.6420672778603873`*^9}, {3.642068239224387*^9, 3.6420682563983874`*^9}, {
   3.6420694503533874`*^9, 3.6420694507693872`*^9}, {3.7345230648051233`*^9, 
   3.7345230969301767`*^9}},
 CellLabel->
  "In[415]:=",ExpressionUUID->"3ef7de64-43f4-4493-8770-8c8d6b1a18ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"whatOut", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Lambda]hatOut", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"QhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.652699694588529*^9, 3.6526996960205317`*^9}, {
  3.6542622784934883`*^9, 3.6542622787834888`*^9}},
 CellLabel->
  "In[417]:=",ExpressionUUID->"765de0e2-98af-4402-b971-be483b7e5a14"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6420672043123875`*^9, 3.642067204330387*^9}},
 CellLabel->
  "In[419]:=",ExpressionUUID->"2c60d74a-0761-4454-bfbe-7588ee883c2e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"varnames", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<OwnCommutingHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<OwnTradeHat\>\"", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ownCommHat", "=", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}], "+", "1"}], 
     RowBox[{"LRhatOut", "+", "1"}]], "-", "1"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ownTradeHat", "=", 
   RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"varnames", ",", 
     RowBox[{"{", 
      RowBox[{
      "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
       ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
       ",", "ownCommHat", ",", "ownTradeHat"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<data\\\\TradeLess20InitialEq.csv\>\"", ",", "out"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6276741292087774`*^9, 3.627674137286585*^9}, {
   3.6276756250243*^9, 3.6276756273105288`*^9}, {3.63093212705332*^9, 
   3.630932129485563*^9}, {3.6325974543119125`*^9, 3.6325974613526163`*^9}, {
   3.6325983655590277`*^9, 3.632598365911063*^9}, {3.6326528926195087`*^9, 
   3.632652894115658*^9}, {3.63265565971119*^9, 3.632655660278247*^9}, {
   3.6328486734813566`*^9, 3.6328486798879976`*^9}, {3.6328494338613873`*^9, 
   3.6328494397669773`*^9}, {3.633021349598804*^9, 3.633021351183963*^9}, {
   3.6330213864464884`*^9, 3.6330214164874926`*^9}, 3.633028683309102*^9, {
   3.63460525678765*^9, 3.634605265616533*^9}, {3.6346058944334087`*^9, 
   3.634605906542619*^9}, {3.642067184573387*^9, 3.6420671852613873`*^9}, {
   3.642067294651387*^9, 3.6420673104503875`*^9}, {3.6420673439093876`*^9, 
   3.6420673470953875`*^9}, {3.6420680796113873`*^9, 3.642068080179387*^9}, {
   3.6420707668593874`*^9, 3.642070769210387*^9}, {3.6542649660550213`*^9, 
   3.654264970039027*^9}, {3.7344640128181233`*^9, 3.7344640174414454`*^9}},
 CellLabel->
  "In[420]:=",ExpressionUUID->"38d9867d-d74a-4154-ad9b-6301d44112ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"lowTradeInitialEq", "-", "1"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73452475639767*^9, 3.734524756609682*^9}},
 CellLabel->
  "In[428]:=",ExpressionUUID->"5ed4c8f1-a9d2-4f0b-9bfb-a7d52aa78bd4"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Changing trade costs in a world with no commuting", "Section",
 CellChangeTimes->{{3.6420593883713875`*^9, 3.642059421599387*^9}, {
   3.642151503349382*^9, 3.6421515044614935`*^9}, {3.734525886439743*^9, 
   3.7345258897837486`*^9}, 
   3.7345429887371645`*^9},ExpressionUUID->"d4d2ad51-77e5-428d-b6a9-\
11d11392cdf4"],

Cell["\<\
In this exercise we compute the effect of reducing trade costs by 20% \
starting from a counterfactual world where commuting is not allowed.\
\>", "Text",
 CellChangeTimes->{{3.7345430485052624`*^9, 
  3.734543072378314*^9}},ExpressionUUID->"288d8bd0-8063-49be-822f-\
e1bd1157b0c0"],

Cell[CellGroupData[{

Cell["A world with no commuting: generating initial values", "Subsection",
 CellChangeTimes->{{3.6420594507953873`*^9, 3.6420594544703875`*^9}, {
  3.652700221781415*^9, 
  3.6527002233744173`*^9}},ExpressionUUID->"9e6be806-33f4-4fc7-a145-\
7597807473f3"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"tolerance", ",", " ", 
    RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
    RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"change", " ", "in", " ", "productivity"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"100", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], "-", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Table", "[", 
        RowBox[{"99", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.642059549955387*^9, 3.642059572625387*^9}, 
   3.652699864722799*^9, {3.6542650943022704`*^9, 3.6542650985732765`*^9}},
 CellLabel->
  "In[429]:=",ExpressionUUID->"dfb2968c-c855-4471-bfcf-32adce3a8e02"],

Cell["Computing changes from the initial equilibrium", "Text",
 CellChangeTimes->{{3.642059581752387*^9, 
  3.642059607427387*^9}},ExpressionUUID->"dd2e6552-c0a3-4ba4-b73d-\
c07aef07010e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nocomm", "=", 
   RowBox[{"hatChanges", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Eta]zero", ",", 
     "25"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"nocomm", "-", "1"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6420657605843873`*^9, 3.642065761441387*^9}, {
  3.7345231814783244`*^9, 3.7345231881223354`*^9}, {3.7345232312434177`*^9, 
  3.7345232353184247`*^9}},
 CellLabel->
  "In[434]:=",ExpressionUUID->"5b033742-4db7-4eb6-85a0-c97905dd42f5"],

Cell["Checking welfare", "Text",
 CellChangeTimes->{{3.6420658360743876`*^9, 
  3.6420658402823877`*^9}},ExpressionUUID->"1b8b67c4-ffc0-4ba6-b93f-\
9019d79ca451"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"whatOut", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Lambda]hatOut", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"QhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.652699870295807*^9, 3.652699871836809*^9}, {
  3.654265105207286*^9, 3.6542651054972863`*^9}},
 CellLabel->
  "In[436]:=",ExpressionUUID->"eb797f86-8a45-4125-8863-34d340692719"],

Cell["Computing new initial equilibrium", "Text",
 CellChangeTimes->{{3.6420596239193873`*^9, 
  3.6420596292213874`*^9}},ExpressionUUID->"ec08fff6-f4d2-4e62-a02b-\
5f183b0c035d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"resEmpIn", "=", 
   RowBox[{"resEmp", " ", 
    RowBox[{"(", 
     RowBox[{"LRhatOut", "+", "1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]In", "=", 
   RowBox[{"\[Lambda]", "  ", 
    RowBox[{"(", 
     RowBox[{"\[Lambda]hatOut", "+", "1"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"workplaceEmpIn", "=", 
   RowBox[{"workplaceEmp", " ", 
    RowBox[{"(", 
     RowBox[{"LMhatOut", "+", "1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resWageIn", "=", 
   RowBox[{"resWage", " ", 
    RowBox[{"(", 
     RowBox[{"VbarhatOut", "+", "1"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"workplaceWageIn", "=", 
   RowBox[{"workplaceWage", " ", 
    RowBox[{"(", 
     RowBox[{"whatOut", "+", "1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resIncomeIn", "=", 
   FractionBox[
    RowBox[{"resEmpIn", " ", "resWageIn"}], 
    SuperscriptBox["10", "6"]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"workIncomeIn", "=", 
   FractionBox[
    RowBox[{"workplaceEmpIn", " ", "workplaceWageIn"}], 
    SuperscriptBox["10", "6"]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Pi]niIn", "=", 
   RowBox[{"\[Pi]niOnlyTrading", " ", 
    RowBox[{"(", 
     RowBox[{"\[Pi]nihatOut", "+", "1"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6276680003228188`*^9, 3.627668105093294*^9}, {
   3.6276682931825323`*^9, 3.627668326687561*^9}, {3.6276683927118053`*^9, 
   3.6276684542882175`*^9}, {3.627668879420566*^9, 3.6276689276203856`*^9}, {
   3.627670106553771*^9, 3.627670198444375*^9}, {3.627670231443434*^9, 
   3.627670242849107*^9}, {3.6276702916686306`*^9, 3.6276703398173504`*^9}, {
   3.627670922131649*^9, 3.627670922615252*^9}, {3.6276736923830986`*^9, 
   3.6276736983386946`*^9}, {3.6328476865586743`*^9, 3.632847756608679*^9}, {
   3.632847813185336*^9, 3.6328478330743246`*^9}, {3.632847878658882*^9, 
   3.6328479112201385`*^9}, {3.6329405892312536`*^9, 3.632940591906521*^9}, {
   3.632940639553285*^9, 3.632940641083438*^9}, {3.632947134790744*^9, 
   3.6329471388161464`*^9}, {3.633025196624468*^9, 3.6330251982066264`*^9}, {
   3.633026072441041*^9, 3.6330260726570625`*^9}, {3.633028527086481*^9, 
   3.633028527343507*^9}, {3.6346020626752415`*^9, 3.6346020975087247`*^9}, 
   3.6420606001713877`*^9, {3.6420658612653875`*^9, 3.642065874217387*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"791ece8f-8ec0-4c0e-ba38-f922ff9e775a"],

Cell["Checking total population", "Text",
 CellChangeTimes->{{3.734464110808511*^9, 
  3.734464120453622*^9}},ExpressionUUID->"9b140c89-0753-4fd0-90bd-\
486855a24f10"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"\[Lambda]", ",", "2"}], "]"}], "/", 
    SuperscriptBox["10", "6"]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"\[Lambda]In", ",", "2"}], "]"}], "/", 
    SuperscriptBox["10", "6"]}], "\[IndentingNewLine]", 
   RowBox[{"Max", "[", 
    RowBox[{"Abs", "[", 
     FractionBox[
      RowBox[{"resEmpIn", "-", "workplaceEmpIn"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"resEmpIn", "+", "workplaceEmpIn"}], ")"}], " ", "0.5"}]], 
     "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Max", "[", 
    RowBox[{"Abs", "[", 
     FractionBox[
      RowBox[{"resWageIn", "-", "workplaceWageIn"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"resWageIn", "+", "workplaceWageIn"}], ")"}], " ", "0.5"}]], 
     "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{"Total", "[", "\[Pi]niIn", "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"Total", "[", "\[Pi]niIn", "]"}], "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.654265381566706*^9, 3.6542654259287734`*^9}, {
  3.654265517043909*^9, 3.6542656111030474`*^9}, {3.7345267890713153`*^9, 
  3.734526789621316*^9}},ExpressionUUID->"ef6f69b7-d5d3-413a-b3a6-\
7bdfac7e4002"]
}, Closed]],

Cell[CellGroupData[{

Cell["Reducing trade costs 20% in the world with no commuting", "Subsection",
 CellChangeTimes->{{3.642059497099387*^9, 3.6420595205013876`*^9}, {
  3.6420730063943872`*^9, 
  3.6420730079853873`*^9}},ExpressionUUID->"62a14571-4fb6-495b-a785-\
2163fb31617a"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"change", " ", "in", " ", "distances"}], ";", " ", 
    RowBox[{"already", " ", "exponentiated"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dhat", "=", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"0.8", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], "-", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"-", "0.2"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"khat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ahat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bhat", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"tolerance", ",", " ", 
     RowBox[{"max", " ", "number", " ", "of", " ", "iterations"}], ",", " ", 
     RowBox[{"speed", " ", "of", " ", "adjustment"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tol", "=", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], ";", " ", 
    RowBox[{"maxiter", "=", "1000"}], ";", " ", 
    RowBox[{"\[Zeta]", "=", "0.7"}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.621264863025693*^9, 3.621264925537944*^9}, 
   3.6212658881101913`*^9, {3.621265937823162*^9, 3.6212659437197514`*^9}, {
   3.6212664097183466`*^9, 3.6212664726786423`*^9}, {3.6212665029436684`*^9, 
   3.621266531312505*^9}, {3.6212665779861717`*^9, 3.621266627221095*^9}, {
   3.6212667382852*^9, 3.6212668704864187`*^9}, {3.6212669340117707`*^9, 
   3.6212669499963694`*^9}, {3.6213360832371306`*^9, 3.621336123514044*^9}, {
   3.6213366572646956`*^9, 3.6213367028286953`*^9}, {3.6213367353146954`*^9, 
   3.6213367565686955`*^9}, {3.6213368620426955`*^9, 
   3.6213368647856956`*^9}, {3.6213369123756957`*^9, 
   3.6213369148696957`*^9}, {3.6213369475316954`*^9, 
   3.6213369509396954`*^9}, {3.621337000591696*^9, 3.6213370050626955`*^9}, 
   3.621337304905696*^9, {3.6213376993511753`*^9, 3.621337699527193*^9}, {
   3.6213377446957097`*^9, 3.621337768331073*^9}, {3.621337801881428*^9, 
   3.6213378033295727`*^9}, {3.62133788101234*^9, 3.6213379188691254`*^9}, {
   3.621340198894105*^9, 3.62134019904712*^9}, {3.621340622777489*^9, 
   3.6213406266778793`*^9}, {3.6213406604262533`*^9, 
   3.6213407485510654`*^9}, {3.6213452712422895`*^9, 3.621345271499315*^9}, {
   3.6213465334544973`*^9, 3.621346534967649*^9}, 3.6213470189300404`*^9, {
   3.621347309417086*^9, 3.6213473196011047`*^9}, {3.6213473950746512`*^9, 
   3.6213474889970427`*^9}, {3.621347560367179*^9, 3.6213475665557976`*^9}, {
   3.6213476661957607`*^9, 3.621347694923633*^9}, {3.6213479696171*^9, 
   3.6213482389600315`*^9}, {3.6213486128994217`*^9, 3.621348627795911*^9}, {
   3.621348786943824*^9, 3.621348788134943*^9}, {3.621349077942921*^9, 
   3.6213492179809237`*^9}, {3.621349277733898*^9, 3.621349291126237*^9}, {
   3.6213493847275963`*^9, 3.621349485323655*^9}, {3.6213497293610563`*^9, 
   3.6213497371778383`*^9}, {3.621349810595179*^9, 3.6213498118043003`*^9}, {
   3.6213499303771563`*^9, 3.621349942373356*^9}, {3.6213500000431223`*^9, 
   3.621350003347452*^9}, {3.6213501498831043`*^9, 3.6213501501141276`*^9}, {
   3.6213502467577906`*^9, 3.6213502741185265`*^9}, {3.621350399685082*^9, 
   3.621350465089622*^9}, {3.621350525936706*^9, 3.6213505302651386`*^9}, 
   3.621350847990908*^9, {3.6213509164037485`*^9, 3.6213509167877874`*^9}, {
   3.621354277596834*^9, 3.6213543223293076`*^9}, {3.621355665181579*^9, 
   3.6213558026693263`*^9}, {3.621355849680027*^9, 3.621355850481107*^9}, {
   3.621356022205278*^9, 3.621356024788536*^9}, {3.6213561769557514`*^9, 
   3.621356178018858*^9}, {3.621356467156769*^9, 3.6213564711471677`*^9}, {
   3.6213565487499275`*^9, 3.6213565496930213`*^9}, {3.6213566144014916`*^9, 
   3.621356748411891*^9}, {3.6213567939974494`*^9, 3.6213567966597157`*^9}, {
   3.621356857029752*^9, 3.621356872022251*^9}, {3.621356910635112*^9, 
   3.621356955527601*^9}, 3.621357015875635*^9, {3.6213570741654634`*^9, 
   3.621357116014648*^9}, {3.621357488162859*^9, 3.621357488552898*^9}, {
   3.621360761559166*^9, 3.6213608397039795`*^9}, {3.621360945930601*^9, 
   3.6213609471867266`*^9}, {3.62136102972598*^9, 3.6213610408730946`*^9}, {
   3.6213619637393723`*^9, 3.621361968658864*^9}, {3.6213621262526217`*^9, 
   3.6213621638853846`*^9}, {3.621362231968192*^9, 3.621362236666662*^9}, {
   3.621362519813974*^9, 3.62136259038603*^9}, {3.621362625455537*^9, 
   3.6213626823522263`*^9}, {3.6213627210991*^9, 3.621362842866276*^9}, {
   3.6213628792379127`*^9, 3.621362988416829*^9}, {3.6213630383168187`*^9, 
   3.6213630384438314`*^9}, {3.621363103342321*^9, 3.6213631627892647`*^9}, {
   3.6213632427112565`*^9, 3.621363363470331*^9}, {3.621363560508033*^9, 
   3.621363638713853*^9}, {3.621363669954976*^9, 3.6213636822112017`*^9}, {
   3.621363721580138*^9, 3.6213637221021905`*^9}, {3.621363886874666*^9, 
   3.621363887474726*^9}, {3.6213647295619264`*^9, 3.6213647351064806`*^9}, 
   3.621428761819832*^9, {3.62142897742239*^9, 3.6214290483344803`*^9}, {
   3.621429135050151*^9, 3.621429141662812*^9}, {3.6214292048131266`*^9, 
   3.6214292470613513`*^9}, {3.6214293132209663`*^9, 3.621429319516596*^9}, {
   3.6214294520158443`*^9, 3.621429452500893*^9}, {3.621435836149415*^9, 
   3.6214358838991895`*^9}, {3.621442845089239*^9, 3.6214428483925695`*^9}, {
   3.6214444013728514`*^9, 3.6214444269024043`*^9}, {3.6214445389276056`*^9, 
   3.621444552392952*^9}, {3.6214445960753202`*^9, 3.6214445995526676`*^9}, {
   3.62144705732342*^9, 3.6214470593736253`*^9}, {3.6214470960532928`*^9, 
   3.6214471040440917`*^9}, {3.621447602188901*^9, 3.621447639590641*^9}, {
   3.6214476815278344`*^9, 3.62144783189987*^9}, {3.621447878183498*^9, 
   3.621447884324112*^9}, 3.6214482310847845`*^9, {3.621448310597735*^9, 
   3.6214483117258477`*^9}, {3.621448355340209*^9, 3.6214483557492495`*^9}, {
   3.621448388823557*^9, 3.6214484270943837`*^9}, {3.621448859176587*^9, 
   3.6214488793656063`*^9}, {3.621448938997569*^9, 3.6214489391965885`*^9}, {
   3.6214493960062647`*^9, 3.621449401896854*^9}, {3.621449549024565*^9, 
   3.621449554506113*^9}, {3.6214497278764486`*^9, 3.6214497280834694`*^9}, {
   3.6214498316028204`*^9, 3.6214498454392037`*^9}, {3.62144994971063*^9, 
   3.621449964064065*^9}, 3.6214500624499025`*^9, {3.6214502905027056`*^9, 
   3.6214503065723124`*^9}, 3.621450351758831*^9, {3.621450389911646*^9, 
   3.6214503945511093`*^9}, {3.6214507122268744`*^9, 
   3.6214507153431854`*^9}, {3.621450813949045*^9, 3.6214508173213825`*^9}, {
   3.621450863822032*^9, 3.6214508899816475`*^9}, {3.6214509933029785`*^9, 
   3.6214509937750263`*^9}, {3.62145102461611*^9, 3.6214510251121593`*^9}, {
   3.621451109385586*^9, 3.6214511136400113`*^9}, 3.621451208770523*^9, 
   3.621453319069532*^9, {3.62145334935256*^9, 3.6214533929469194`*^9}, {
   3.621453475356159*^9, 3.621453549054528*^9}, 3.6214536671383357`*^9, {
   3.621453719238545*^9, 3.621453733950016*^9}, 3.6214537644390645`*^9, {
   3.621454594995112*^9, 3.621454595130125*^9}, {3.6214547620858192`*^9, 
   3.6214548062632365`*^9}, {3.621454853632973*^9, 3.6214548750001097`*^9}, {
   3.6214549110017095`*^9, 3.621454924626072*^9}, {3.62145496451406*^9, 
   3.6214549872833366`*^9}, {3.621466886180997*^9, 3.621466904427388*^9}, {
   3.621589391080161*^9, 3.621589392872161*^9}, {3.621589916915161*^9, 
   3.621589917442161*^9}, {3.621598070088068*^9, 3.621598129713822*^9}, {
   3.6215983421081147`*^9, 3.621598366473422*^9}, {3.621616087067378*^9, 
   3.6216161189965706`*^9}, {3.621624124238014*^9, 3.6216241470372944`*^9}, {
   3.6216241816627564`*^9, 3.621624205440134*^9}, {3.621624299355524*^9, 
   3.6216243412827168`*^9}, {3.621782986851038*^9, 3.621782993319038*^9}, {
   3.621795479589527*^9, 3.6217954812245593`*^9}, {3.6217992620564137`*^9, 
   3.6217992630014133`*^9}, {3.6218088379064136`*^9, 
   3.6218088394464135`*^9}, {3.621849838837517*^9, 3.6218498391475167`*^9}, {
   3.621852507236517*^9, 3.621852524027517*^9}, {3.621852892111517*^9, 
   3.621852899021517*^9}, {3.621882926600565*^9, 3.621882931096565*^9}, {
   3.6218978770063505`*^9, 3.6218978844643507`*^9}, 3.627493132034206*^9, {
   3.627662235548311*^9, 3.6276622384125977`*^9}, {3.6276663650420365`*^9, 
   3.6276663656192403`*^9}, {3.6276676059291787`*^9, 
   3.6276676156530414`*^9}, {3.627667695273565*^9, 3.6276677311179953`*^9}, {
   3.6276677745162764`*^9, 3.627667776949892*^9}, {3.6279876428832245`*^9, 
   3.6279876603870783`*^9}, {3.627990052301015*^9, 3.6279900533628216`*^9}, {
   3.627991637224477*^9, 3.6279916428103127`*^9}, {3.6328358086093655`*^9, 
   3.6328358504075446`*^9}, {3.632846991416175*^9, 3.6328470029613295`*^9}, {
   3.6328473519972296`*^9, 3.632847385172547*^9}, {3.6328488358445916`*^9, 
   3.6328488852295294`*^9}, {3.6328489203510413`*^9, 
   3.6328489248714933`*^9}, {3.632849266490652*^9, 3.632849324697472*^9}, {
   3.632849442869288*^9, 3.6328494432293243`*^9}, {3.632851097363721*^9, 
   3.6328510993639207`*^9}, {3.6330202603708925`*^9, 3.633020261069962*^9}, {
   3.633020338663721*^9, 3.633020342689123*^9}, {3.633020392294083*^9, 
   3.633020397170571*^9}, {3.6330207336412144`*^9, 3.633020751187969*^9}, {
   3.633021277519597*^9, 3.63302128925077*^9}, {3.634602311624134*^9, 
   3.6346024255326333`*^9}, {3.634603193838558*^9, 3.634603194275361*^9}, {
   3.6420656402493877`*^9, 3.642065645797387*^9}, 3.6420657130373874`*^9, {
   3.6420670646683874`*^9, 3.6420670924103875`*^9}, {3.6420671352413874`*^9, 
   3.642067148618387*^9}, {3.6420672362793875`*^9, 3.6420672537663875`*^9}, 
   3.6527001192172375`*^9},
 CellLabel->
  "In[451]:=",ExpressionUUID->"68472c7f-1f8f-44b0-b523-5a07b13113cb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lowTradeNoComm", "=", 
   RowBox[{"hatChangesArb", "[", 
    RowBox[{
    "khat", ",", "dhat", ",", "ahat", ",", "bhat", ",", "\[Lambda]In", ",", 
     "workplaceWageIn", ",", "resWageIn", ",", "workplaceEmpIn", ",", 
     "resEmpIn", ",", "\[Pi]niIn", ",", "resIncomeIn", ",", "workIncomeIn", 
     ",", "\[Eta]zero", ",", "25"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", ",", 
     "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", ",", 
     "\[Lambda]hatOut", ",", "\[Pi]nihatOut", ",", "c", ",", "distWages", ",",
      "dist\[Lambda]"}], "}"}], "=", 
   RowBox[{"lowTradeNoComm", "-", "1"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.6328493659475965`*^9, {3.6328494465666575`*^9, 3.6328494471817193`*^9}, {
   3.633021369005745*^9, 3.6330213692217665`*^9}, 3.634605226790651*^9, {
   3.6420671494783874`*^9, 3.642067182783387*^9}, {3.6420672772443876`*^9, 
   3.6420672778603873`*^9}, {3.734523318933567*^9, 3.734523339521599*^9}},
 CellLabel->
  "In[456]:=",ExpressionUUID->"20f85eeb-40c9-4bcf-8c2d-d2f97063abca"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"wel", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"whatOut", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], 
      RowBox[{
       RowBox[{"khat", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Lambda]hatOut", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "/", "\[Epsilon]"}]], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"QhatOut", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "+", "1"}], ")"}], 
        RowBox[{"1", "-", "\[Alpha]"}]]}]], " ", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "ncounties"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", "wel", "]"}], ",", 
   RowBox[{"Max", "[", "wel", "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.652700126026249*^9, 3.65270012680725*^9}, {
  3.6542656782031903`*^9, 3.654265678459193*^9}},
 CellLabel->
  "In[458]:=",ExpressionUUID->"6bb469e2-d1ce-4831-8d4e-6b653bdcdb1d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"varnames", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "\"\<WHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<VbarHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<RealIncHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<LMhat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<LRhat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<QHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<PHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<PriceHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<OwnCommutingHat\>\"", "}"}], ",", 
     RowBox[{"{", "\"\<OwnTradeHat\>\"", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ownCommHat", "=", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"Diagonal", "[", "\[Lambda]hatOut", "]"}], "+", "1"}], 
     RowBox[{"LRhatOut", "+", "1"}]], "-", "1"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ownTradeHat", "=", 
   RowBox[{"Diagonal", "[", "\[Pi]nihatOut", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"varnames", ",", 
     RowBox[{"{", 
      RowBox[{
      "whatOut", ",", "VbarhatOut", ",", "realinchatOut", ",", "LMhatOut", 
       ",", "LRhatOut", ",", "QhatOut", ",", "PhatOut", ",", "pricehatOut", 
       ",", "ownCommHat", ",", "ownTradeHat"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Transpose", "[", "out", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"out", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"countyNames", ",", "out", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<data\\\\TradeLess20Nocomm.csv\>\"", ",", "out"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6276741292087774`*^9, 3.627674137286585*^9}, {
   3.6276756250243*^9, 3.6276756273105288`*^9}, {3.63093212705332*^9, 
   3.630932129485563*^9}, {3.6325974543119125`*^9, 3.6325974613526163`*^9}, {
   3.6325983655590277`*^9, 3.632598365911063*^9}, {3.6326528926195087`*^9, 
   3.632652894115658*^9}, {3.63265565971119*^9, 3.632655660278247*^9}, {
   3.6328486734813566`*^9, 3.6328486798879976`*^9}, {3.6328494338613873`*^9, 
   3.6328494397669773`*^9}, {3.633021349598804*^9, 3.633021351183963*^9}, {
   3.6330213864464884`*^9, 3.6330214164874926`*^9}, 3.633028683309102*^9, {
   3.63460525678765*^9, 3.634605265616533*^9}, {3.6346058944334087`*^9, 
   3.634605906542619*^9}, {3.642067184573387*^9, 3.6420671852613873`*^9}, {
   3.642067294651387*^9, 3.6420673104503875`*^9}, {3.6420673439093876`*^9, 
   3.6420673470953875`*^9}, {3.6420680796113873`*^9, 3.642068080179387*^9}, {
   3.6542657003012247`*^9, 3.6542657042422304`*^9}, {3.7344641706741486`*^9, 
   3.7344641729778457`*^9}},
 CellLabel->
  "In[460]:=",ExpressionUUID->"b99fe2ac-db32-42c2-8e75-74d6625dd70d"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
CellGrouping->Automatic,
WindowSize->{1920, 998},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612., 791.9999999999999}},
SpellingDictionaries->{"CorrectWords"->{
 "productivities", "Productivities", "Stata"}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 174, 4, 28, "Input",ExpressionUUID->"b1511fcd-e472-469b-9230-c2809f28cff7"],
Cell[CellGroupData[{
Cell[757, 28, 354, 5, 96, "Title",ExpressionUUID->"2c5f7765-f8d4-404d-89a8-c54f72aa0e54"],
Cell[1114, 35, 247, 5, 53, "Subtitle",ExpressionUUID->"a65c54b5-9845-43a0-b37b-cc1f963d65a7"],
Cell[1364, 42, 221, 4, 35, "Text",ExpressionUUID->"853f611c-7efe-47d5-aa21-95fe5dfc58c7"],
Cell[CellGroupData[{
Cell[1610, 50, 488, 9, 44, "ItemParagraph",ExpressionUUID->"b0348991-48f6-44e2-ac73-4017b4ec9647"],
Cell[2101, 61, 367, 7, 24, "ItemParagraph",ExpressionUUID->"6577feb1-2ca9-4d52-a557-533a829370f3"],
Cell[2471, 70, 369, 7, 24, "ItemParagraph",ExpressionUUID->"2b20b979-b63a-49b4-9e6a-380ecf7939d0"],
Cell[2843, 79, 514, 9, 44, "ItemParagraph",ExpressionUUID->"053a42ca-dad5-4c04-b592-335dc3b7b283"],
Cell[3360, 90, 381, 7, 24, "ItemParagraph",ExpressionUUID->"38fbf0f0-a2fe-4a82-857c-6578d389fbe2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3778, 102, 167, 3, 67, "Chapter",ExpressionUUID->"52f52cea-8225-44fa-a15f-bece6d1ca0d8"],
Cell[CellGroupData[{
Cell[3970, 109, 155, 3, 53, "Subsection",ExpressionUUID->"cf21b982-0389-4335-b2a8-8c52d2ac88a4"],
Cell[4128, 114, 281, 6, 34, "Text",ExpressionUUID->"e997a02d-0b30-4c85-9364-712537b7bac3"],
Cell[4412, 122, 748, 13, 48, "Input",ExpressionUUID->"8f23ef9c-7a3a-4c5f-a7b7-6d5dbce1cf1e"]
}, Closed]],
Cell[CellGroupData[{
Cell[5197, 140, 270, 4, 53, "Subsection",ExpressionUUID->"fe6d5f13-e0b5-4ce2-9b53-53066683c21b"],
Cell[5470, 146, 224, 4, 34, "Text",ExpressionUUID->"5a3e2997-2927-43fa-9c74-03a3104c991b"],
Cell[5697, 152, 8659, 189, 487, "Input",ExpressionUUID->"21d312f9-916d-4c2c-be3e-5fc3fc539b71"],
Cell[14359, 343, 2223, 46, 105, "Input",ExpressionUUID->"76ce94c8-a7c8-4cce-892e-c70143c3d515"]
}, Closed]],
Cell[CellGroupData[{
Cell[16619, 394, 172, 3, 53, "Subsection",ExpressionUUID->"682b2737-5939-4050-8dc5-ae308f47378e"],
Cell[16794, 399, 641, 11, 78, "Text",ExpressionUUID->"76cc4b2f-a428-448f-8ce5-da3ee023af1b"],
Cell[17438, 412, 553, 12, 67, "Input",ExpressionUUID->"fa70b280-8e06-4e58-b216-52df1d53eb6e"]
}, Closed]],
Cell[CellGroupData[{
Cell[18028, 429, 158, 3, 53, "Subsection",ExpressionUUID->"ca590e48-0a19-488c-8fa9-0f69ea4a2e8c"],
Cell[18189, 434, 2181, 42, 124, "Input",ExpressionUUID->"c2ebdfc1-1415-4fcd-868d-753e6f2a8c73"]
}, Closed]],
Cell[CellGroupData[{
Cell[20407, 481, 271, 4, 53, "Subsection",ExpressionUUID->"e26f546b-d2f7-4e66-9dd0-be3800db9dc3"],
Cell[20681, 487, 493, 9, 34, "Text",ExpressionUUID->"fe79731a-2287-4072-8187-70e5455fbf94"],
Cell[21177, 498, 298, 6, 34, "Text",ExpressionUUID->"cca4cd86-3746-4efe-aba6-f253f8109ab1"],
Cell[21478, 506, 1682, 40, 86, "Input",ExpressionUUID->"325eba45-50f8-4dc5-9b72-012de28d1b0c"],
Cell[23163, 548, 280, 4, 34, "Text",ExpressionUUID->"c101762b-60ec-464a-bb36-069ffdc189f6"],
Cell[23446, 554, 267, 5, 28, "Input",ExpressionUUID->"6747d05b-e0f4-4149-ad0c-925dd56c0e3a"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[23762, 565, 181, 3, 56, "Chapter",ExpressionUUID->"d3d62128-4802-4906-b7da-839350415bfd"],
Cell[CellGroupData[{
Cell[23968, 572, 170, 3, 64, "Subchapter",ExpressionUUID->"1d0d61fa-8346-4fb6-9d96-874fd1a44fd7"],
Cell[24141, 577, 390, 7, 34, "Text",ExpressionUUID->"95410092-ace7-4ea0-9c5a-d95773337cce"],
Cell[24534, 586, 2397, 54, 181, "Input",ExpressionUUID->"1b950291-d7c3-4e20-b4a7-ab88bd4b1434"],
Cell[26934, 642, 1154, 18, 100, "Text",ExpressionUUID->"54530509-4ad4-4e96-8af1-864dd4b123ab"],
Cell[28091, 662, 9315, 210, 874, "Input",ExpressionUUID->"c306493e-c00f-4f79-b20b-0f952b3e9943"]
}, Closed]],
Cell[CellGroupData[{
Cell[37443, 877, 157, 3, 64, "Subchapter",ExpressionUUID->"a8bdf6b9-c05d-4ff5-9ef9-66497d24233d"],
Cell[37603, 882, 595, 10, 78, "Text",ExpressionUUID->"59c21e7e-6ca8-4b43-8846-51dea1b50891"],
Cell[38201, 894, 3583, 83, 316, "Input",ExpressionUUID->"c169e1c0-9a63-4d54-ac3f-e4930c922dd8"]
}, Closed]],
Cell[CellGroupData[{
Cell[41821, 982, 372, 6, 64, "Subchapter",ExpressionUUID->"3b9935e7-2c6c-4e21-be71-15d44b0065e7"],
Cell[CellGroupData[{
Cell[42218, 992, 244, 4, 67, "Section",ExpressionUUID->"7640f9a3-d240-4819-92d3-a0c408e3482e"],
Cell[CellGroupData[{
Cell[42487, 1000, 314, 5, 44, "Subsubsection",ExpressionUUID->"3941ec9d-cce0-43b3-9501-77e924d3943e"],
Cell[42804, 1007, 376, 8, 34, "Text",ExpressionUUID->"0daaaa2f-237b-4342-9d13-27bbc881045f"],
Cell[43183, 1017, 16205, 329, 1527, "Input",ExpressionUUID->"6951456b-2803-4520-a896-6d563976c135"]
}, Closed]],
Cell[CellGroupData[{
Cell[59425, 1351, 403, 7, 44, "Subsubsection",ExpressionUUID->"c0f3778c-77b0-4012-98ae-9ca1f1e4b518"],
Cell[59831, 1360, 739, 12, 56, "Text",ExpressionUUID->"4ea9ca5b-ae1f-4aa2-9586-a1ca8a156d8a"],
Cell[60573, 1374, 15699, 345, 1996, "Input",ExpressionUUID->"3637dcf1-c1e6-4165-be23-97145fe12976"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[76321, 1725, 298, 4, 67, "Section",ExpressionUUID->"7ee6c1ee-6a43-4df4-b9b8-dfa4afb3cd78"],
Cell[CellGroupData[{
Cell[76644, 1733, 294, 5, 44, "Subsubsection",ExpressionUUID->"5215d1c1-44eb-4089-9b64-e424a2f049cf"],
Cell[76941, 1740, 376, 8, 34, "Text",ExpressionUUID->"6ac58665-987d-4659-a157-4d8c286adfd7"],
Cell[77320, 1750, 16551, 337, 1565, "Input",ExpressionUUID->"3f2f087e-3289-45a9-9282-89a60e561fb5"]
}, Closed]],
Cell[CellGroupData[{
Cell[93908, 2092, 600, 10, 69, "Subsubsection",ExpressionUUID->"403a9613-5042-404a-950c-9a888fc85d33"],
Cell[94511, 2104, 593, 11, 56, "Text",ExpressionUUID->"7bf46258-8b20-4f99-abe7-5e9e8d3b8f33"],
Cell[95107, 2117, 16583, 356, 2091, "Input",ExpressionUUID->"117519e1-9fa9-4839-af93-43d95a2d01dc"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[111739, 2479, 226, 4, 67, "Section",ExpressionUUID->"dc788f63-a1f6-4853-9d19-b1df4b62999a"],
Cell[CellGroupData[{
Cell[111990, 2487, 338, 5, 44, "Subsubsection",ExpressionUUID->"6503b0b0-0765-4fdf-8c2c-478ba486ba44"],
Cell[112331, 2494, 11578, 251, 1433, "Input",ExpressionUUID->"0c2099a5-6560-42d4-b745-e38041c5e384"]
}, Closed]],
Cell[CellGroupData[{
Cell[123946, 2750, 449, 6, 44, "Subsubsection",ExpressionUUID->"41cdfda8-bc6e-43b8-b9f0-5e6f5e9fe784"],
Cell[124398, 2758, 14236, 321, 1949, "Input",ExpressionUUID->"ba5c34a3-51ec-4a4e-9703-3e3fcee5435f"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[138695, 3086, 163, 3, 64, "Subchapter",ExpressionUUID->"a0025f62-e8cb-4cb0-a3cc-59668d39735b"],
Cell[CellGroupData[{
Cell[138883, 3093, 187, 3, 67, "Section",ExpressionUUID->"8c654a82-b63e-44e9-81c9-4034f9c6df08"],
Cell[139073, 3098, 500, 10, 78, "Text",ExpressionUUID->"a9d07b4b-22de-407c-93e6-cdeaf38cc06e"],
Cell[139576, 3110, 6268, 140, 780, "Input",ExpressionUUID->"7299a700-cace-468f-a489-c8829d75ea04"]
}, Closed]],
Cell[CellGroupData[{
Cell[145881, 3255, 226, 5, 67, "Section",ExpressionUUID->"edab34f6-9597-430e-bd1e-f4cec9582b09"],
Cell[146110, 3262, 7071, 153, 799, "Input",ExpressionUUID->"f8c9b7b3-d132-4624-8904-9b3ac26c563f"],
Cell[153184, 3417, 175, 3, 28, "Input",ExpressionUUID->"e1e1802a-1131-4228-9d00-bb78dec43af4"],
Cell[153362, 3422, 177, 3, 28, "Input",ExpressionUUID->"3f4bf081-65a9-40a8-b787-80d5bdbbebdd"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[153600, 3432, 312, 5, 56, "Chapter",ExpressionUUID->"9ca915e1-2461-4e01-86eb-68d12e1f4ecb"],
Cell[CellGroupData[{
Cell[153937, 3441, 321, 5, 64, "Subchapter",ExpressionUUID->"4b7fd149-694a-48ae-bf3c-8378f55130bd"],
Cell[CellGroupData[{
Cell[154283, 3450, 339, 5, 67, "Section",ExpressionUUID->"639f3dae-f34b-4d27-be77-15650f409c4f"],
Cell[CellGroupData[{
Cell[154647, 3459, 168, 3, 53, "Subsection",ExpressionUUID->"18a59eda-59a3-4aa3-a32b-b3c74321c543"],
Cell[154818, 3464, 1000, 15, 100, "Text",ExpressionUUID->"d71a481a-460c-47f9-b3ed-9a3452c75b7a"],
Cell[155821, 3481, 2053, 56, 124, "Input",ExpressionUUID->"6924aef2-2045-401f-941f-6016696b42ab"],
Cell[157877, 3539, 554, 12, 28, "Input",ExpressionUUID->"bc012d3c-2e54-4541-8119-dd6f52b976de"],
Cell[158434, 3553, 292, 7, 34, "Text",ExpressionUUID->"d77dbc6a-3e46-4364-86da-17cc54896aa8"],
Cell[158729, 3562, 639, 12, 48, "Input",ExpressionUUID->"4dc575e7-708d-4249-b15b-42665184a1c7"],
Cell[159371, 3576, 296, 4, 34, "Text",ExpressionUUID->"2e3e2131-9d9f-4b00-b89f-e8a125435de4"],
Cell[CellGroupData[{
Cell[159692, 3584, 2328, 65, 192, "Input",ExpressionUUID->"e71a7c63-4d3e-4abc-9a52-c5ad7a333d1d"],
Cell[162023, 3651, 11929, 347, 258, "Output",ExpressionUUID->"faae7866-3a82-495c-b2c3-836309ddc6d1"],
Cell[173955, 4000, 541, 12, 22, "Print",ExpressionUUID->"46b705b9-9c1d-462d-89d8-c2b1dc57e7b3"],
Cell[174499, 4014, 937, 29, 164, "Output",ExpressionUUID->"de946488-23ca-4e47-8cdf-3710910be70d"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[175485, 4049, 218, 3, 53, "Subsection",ExpressionUUID->"2e83d430-8f54-46f6-b0e7-f77abf51d356"],
Cell[175706, 4054, 723, 12, 56, "Text",ExpressionUUID->"05caad6b-3697-4ec1-bfb3-82c860dd2064"],
Cell[176432, 4068, 273, 6, 34, "Text",ExpressionUUID->"adf1a3bd-d7d4-4d6c-9e75-c83ad702c9ac"],
Cell[176708, 4076, 1423, 38, 86, "Input",ExpressionUUID->"53436e92-bd6f-4e40-9ed1-fcdb8dcb3645"],
Cell[178134, 4116, 692, 11, 78, "Text",ExpressionUUID->"18ad39a3-b2bf-4f1d-8d2b-35f32dea47e2"],
Cell[178829, 4129, 485, 12, 55, "Input",ExpressionUUID->"4e46dce4-374c-4dfb-87ab-537fc306e7dc"],
Cell[179317, 4143, 292, 6, 34, "Text",ExpressionUUID->"b2c77fea-aa7e-464f-86a0-8e45b6efc8e6"],
Cell[179612, 4151, 605, 12, 28, "Input",ExpressionUUID->"ea94a7ff-4945-4c14-b5bf-642b13082f7b"],
Cell[180220, 4165, 691, 12, 78, "Text",ExpressionUUID->"5a3fd6ba-fa85-496c-a8f5-33cdcf07adfe"],
Cell[180914, 4179, 156, 3, 28, "Input",ExpressionUUID->"2f788477-b6cc-4a1b-b366-1f3185ac1421"],
Cell[181073, 4184, 2661, 72, 136, "Input",ExpressionUUID->"785a0571-5fa6-49bf-b09b-7456742c5796"],
Cell[183737, 4258, 228, 5, 34, "Text",ExpressionUUID->"bbd204d4-279d-440c-97b4-850c3a833ef6"],
Cell[CellGroupData[{
Cell[183990, 4267, 2592, 67, 208, "Input",ExpressionUUID->"2cc45bd5-a966-4381-9fc7-636dc54a9277"],
Cell[186585, 4336, 9913, 288, 253, "Output",ExpressionUUID->"a8588ad6-78c9-450f-aecd-2cf15bf73a0c"],
Cell[196501, 4626, 542, 12, 22, "Print",ExpressionUUID->"6f9a445f-14e6-4821-80af-3b70187a9080"],
Cell[197046, 4640, 941, 29, 164, "Output",ExpressionUUID->"dee0b7ff-092e-4a2b-820b-36b7f81f2dc1"]
}, Closed]],
Cell[198002, 4672, 213, 5, 34, "Text",ExpressionUUID->"17b1ca8b-f5e4-4475-97ef-8881cbb93c9b"],
Cell[CellGroupData[{
Cell[198240, 4681, 1922, 47, 105, "Input",ExpressionUUID->"d65b538e-40a2-4e1d-8fb0-2349c6ad4f78"],
Cell[200165, 4730, 6729, 133, 263, "Output",ExpressionUUID->"0172089a-5f25-422c-a27b-7624ee358c36"]
}, Closed]],
Cell[206909, 4866, 202, 3, 34, "Text",ExpressionUUID->"47bed05b-e89f-4ae3-ae6f-5dbcea4e968f"],
Cell[207114, 4871, 267, 5, 28, "Input",ExpressionUUID->"8acf1f17-e00f-48a6-9fc8-4a90a651f986"],
Cell[207384, 4878, 242, 4, 28, "Input",ExpressionUUID->"e61492ac-8d1c-4942-bb48-74bf5345c4d8"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[207675, 4888, 300, 4, 67, "Section",ExpressionUUID->"eff2d284-177e-4763-b829-a60ad1e48554"],
Cell[207978, 4894, 181, 3, 34, "Text",ExpressionUUID->"562d7c6e-267e-4a0c-8f45-823e3145658b"],
Cell[208162, 4899, 7556, 107, 28, "Input",ExpressionUUID->"872cca61-fcfb-4b73-9afe-625c7391f112"],
Cell[215721, 5008, 185, 3, 34, "Text",ExpressionUUID->"17f023e2-fa2e-458d-a59c-db90a156d9d0"],
Cell[215909, 5013, 537, 13, 48, "Input",ExpressionUUID->"66022cea-6bb0-453f-bb0f-9a696b8ae66f"],
Cell[216449, 5028, 319, 6, 34, "Text",ExpressionUUID->"37ad96e7-959d-4a01-bbf3-1d87709d69e2"],
Cell[CellGroupData[{
Cell[216793, 5038, 832, 21, 98, "Input",ExpressionUUID->"46562443-8a89-4535-a748-c5a7c6ec9b03"],
Cell[217628, 5061, 1029, 16, 32, "Output",ExpressionUUID->"25d8f95f-946f-4ba2-b898-38c6a716374c"],
Cell[218660, 5079, 1032, 16, 32, "Output",ExpressionUUID->"9bbba99d-ff2b-4bff-933a-e87d048fff41"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[219741, 5101, 238, 4, 67, "Section",ExpressionUUID->"ed517d28-cafe-409b-b476-79e9ed7ba39a"],
Cell[CellGroupData[{
Cell[220004, 5109, 248, 4, 53, "Subsection",ExpressionUUID->"9eccd7a3-d383-487b-960b-d791001d28ac"],
Cell[220255, 5115, 335, 7, 34, "Text",ExpressionUUID->"62d4e2d6-e704-4404-ae2e-e3e541d05bf0"],
Cell[CellGroupData[{
Cell[220615, 5126, 2021, 46, 162, "Input",ExpressionUUID->"5cae43fa-9c02-470b-9594-5760a0cf4a7d"],
Cell[222639, 5174, 977, 18, 32, "Output",ExpressionUUID->"87b3e542-18c7-48da-8a2a-c915db899386"]
}, Closed]],
Cell[223631, 5195, 224, 5, 34, "Text",ExpressionUUID->"a4428f22-7974-4c64-aa9c-f9e646ea034e"],
Cell[CellGroupData[{
Cell[223880, 5204, 2048, 47, 143, "Input",ExpressionUUID->"a8747d50-3cc7-4c58-bb3e-01d573c83bd0"],
Cell[225931, 5253, 2137, 31, 32, "Output",ExpressionUUID->"3fef97bd-1ea0-48a4-9417-5f0e72e5d087"]
}, Closed]],
Cell[228083, 5287, 520, 10, 34, "Text",ExpressionUUID->"fe8d563b-5b0e-4598-9309-b17866d1a3ce"],
Cell[CellGroupData[{
Cell[228628, 5301, 1127, 34, 48, "Input",ExpressionUUID->"693d5d2e-bd4c-40be-a42e-d045d52e6437"],
Cell[229758, 5337, 3059, 62, 157, "Output",ExpressionUUID->"cb46ea3f-9a71-49dd-80d0-209316c83456"],
Cell[232820, 5401, 387, 8, 21, "Message",ExpressionUUID->"98f4eac9-4b4a-4947-9aff-25197e3c530e"],
Cell[233210, 5411, 395, 9, 21, "Message",ExpressionUUID->"732d272e-0d2e-4531-8d27-73e3c52c36ab"],
Cell[233608, 5422, 388, 8, 21, "Message",ExpressionUUID->"fe1b9941-f883-42fe-b251-584efdf43ce7"],
Cell[233999, 5432, 396, 9, 21, "Message",ExpressionUUID->"f4dfc011-9447-4f4e-b762-0e7a75a0446d"],
Cell[234398, 5443, 387, 8, 21, "Message",ExpressionUUID->"010d20eb-b774-4879-8e88-995e289df386"],
Cell[234788, 5453, 395, 9, 21, "Message",ExpressionUUID->"40ba729b-7407-440e-bea5-5d24881c7291"],
Cell[235186, 5464, 389, 8, 21, "Message",ExpressionUUID->"d410d6c7-30e2-4702-b66e-e820b49d4395"],
Cell[235578, 5474, 395, 9, 21, "Message",ExpressionUUID->"441637c8-f392-42cb-bd08-08db4ae6580c"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[236022, 5489, 238, 4, 37, "Subsection",ExpressionUUID->"d4f3c416-efcd-4732-95a6-98f298bbdd87"],
Cell[236263, 5495, 324, 6, 34, "Text",ExpressionUUID->"bf607831-e4ef-46c4-a846-05376804ab83"],
Cell[CellGroupData[{
Cell[236612, 5505, 2877, 58, 86, "Input",ExpressionUUID->"8403877c-4d26-4d19-8ae5-cf03cd3d3c49"],
Cell[239492, 5565, 217695, 3588, 389, "Output",ExpressionUUID->"3245fbac-28f8-4fc7-8c80-9ecb87e88af5"]
}, Closed]],
Cell[457202, 9156, 221, 4, 34, "Text",ExpressionUUID->"ef2aa5bc-816d-47f5-aa15-a520d34ab128"],
Cell[CellGroupData[{
Cell[457448, 9164, 3716, 82, 261, "Input",ExpressionUUID->"7d9d5e4e-7fee-4618-946b-43c49a43d381"],
Cell[461167, 9248, 225115, 3709, 356, "Output",ExpressionUUID->"c4993c06-c0e2-4e3f-8ed4-bf3329415896"],
Cell[686285, 12959, 204, 5, 32, "Output",ExpressionUUID->"b2bbd92a-6afc-4a9f-ab41-e7f1ac11674c"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[686562, 12972, 416, 6, 64, "Subchapter",ExpressionUUID->"83578512-958b-4b51-afa4-af94e9e33eb8"],
Cell[CellGroupData[{
Cell[687003, 12982, 156, 3, 67, "Section",ExpressionUUID->"17aedbe4-6dc5-43bb-bf59-e5594a150aa9"],
Cell[687162, 12987, 179, 3, 34, "Text",ExpressionUUID->"1d00e049-4fb4-428c-a1ba-0d2f1a8907da"],
Cell[CellGroupData[{
Cell[687366, 12994, 1532, 45, 196, "Input",ExpressionUUID->"fb6a0728-4fd4-454e-b654-5a9621b7e312"],
Cell[688901, 13041, 192, 3, 32, "Output",ExpressionUUID->"587a162b-fc0f-43a0-bfa6-1037eddc9037"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[689142, 13050, 168, 3, 67, "Section",ExpressionUUID->"a1c9b46e-336e-45d0-aaaf-01680b1b8e81"],
Cell[689313, 13055, 286, 6, 34, "Text",ExpressionUUID->"0b43971d-67c7-43c1-82d1-af6c78d21671"],
Cell[689602, 13063, 12738, 274, 1963, "Input",ExpressionUUID->"55a3bc79-2251-4cc2-a322-fad38b376164"],
Cell[702343, 13339, 358, 8, 28, "Input",ExpressionUUID->"e64a23e1-cae5-4525-aa5d-eca7ffab4ac9"]
}, Closed]],
Cell[CellGroupData[{
Cell[702738, 13352, 179, 3, 67, "Section",ExpressionUUID->"79349318-1d76-40a4-80e8-40b5d4172632"],
Cell[702920, 13357, 413, 9, 56, "Text",ExpressionUUID->"df35d54f-8bd9-45b5-9469-32bf5fde4cf9"],
Cell[703336, 13368, 278, 8, 54, "Input",ExpressionUUID->"f6e3caed-e417-47bb-aba8-7451c690acfc"],
Cell[703617, 13378, 177, 3, 28, "Input",ExpressionUUID->"b53e66b2-fbec-4c97-8448-6e5efdd4542b"],
Cell[703797, 13383, 11974, 250, 952, "Input",ExpressionUUID->"59ded682-602a-4fed-913c-1aed43d5aaed"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[715832, 13640, 171, 3, 56, "Chapter",ExpressionUUID->"169659b9-b64a-4308-b903-a584890f7dbd"],
Cell[CellGroupData[{
Cell[716028, 13647, 528, 8, 64, "Subchapter",ExpressionUUID->"c2cc4cc7-6ab5-4373-8803-764a3d044715"],
Cell[716559, 13657, 485, 9, 34, "Text",ExpressionUUID->"a762f525-6cb5-4e58-9316-857ef3b3f62f"],
Cell[717047, 13668, 219, 4, 34, "Text",ExpressionUUID->"d13de291-fc1e-4ddb-8f3b-662085c19d34"],
Cell[717269, 13674, 4213, 83, 200, "Input",ExpressionUUID->"ba712180-4e09-45e8-834b-6a62217496f0"],
Cell[721485, 13759, 162, 3, 34, "Text",ExpressionUUID->"6eb45026-00f0-4127-b64d-118d7f08188f"],
Cell[721650, 13764, 2051, 35, 67, "Input",ExpressionUUID->"772425d9-d0e4-4d08-8ed3-5986a170141b"],
Cell[723704, 13801, 176, 3, 34, "Text",ExpressionUUID->"71cf7403-64bb-4c1b-b3c6-7d5a42a845e1"],
Cell[723883, 13806, 3342, 71, 238, "Input",ExpressionUUID->"0a95c2ea-85e1-4f72-9dc3-37a9a0d59cf1"],
Cell[727228, 13879, 568, 13, 34, "Text",ExpressionUUID->"3af8faef-3875-4a53-ac24-90d9f4221e77"],
Cell[727799, 13894, 1098, 33, 48, "Input",ExpressionUUID->"74e33433-357f-46b3-a674-5e0cd4f019a4"]
}, Closed]],
Cell[CellGroupData[{
Cell[728934, 13932, 438, 6, 64, "Subchapter",ExpressionUUID->"205ceaa1-28c7-4c66-abca-264316f44d57"],
Cell[729375, 13940, 347, 7, 34, "Text",ExpressionUUID->"129b8709-982a-485e-b684-8fb41b8042ca"],
Cell[CellGroupData[{
Cell[729747, 13951, 255, 4, 53, "Subsection",ExpressionUUID->"ec201cf7-02fd-4290-acae-e0243f9cb4f9"],
Cell[730005, 13957, 2690, 71, 200, "Input",ExpressionUUID->"eb44d7bd-e0b2-49dd-9f6c-2ab219e52045"],
Cell[732698, 14030, 188, 3, 34, "Text",ExpressionUUID->"6ea89d3c-41e8-4ddc-ad3e-1106d2c7cad7"],
Cell[732889, 14035, 1088, 23, 67, "Input",ExpressionUUID->"26c00071-3ccc-493f-9dee-31a8802cf3ba"],
Cell[733980, 14060, 162, 3, 34, "Text",ExpressionUUID->"c0afe8bf-d4d7-4433-80fb-c7b692770fe7"],
Cell[CellGroupData[{
Cell[734167, 14067, 1411, 41, 79, "Input",ExpressionUUID->"9df9a16b-b3e0-48cb-9384-9406a88e4c7d"],
Cell[735581, 14110, 233, 5, 32, "Output",ExpressionUUID->"5ea0bd97-b988-4514-bf6a-ca460c0d2deb"]
}, Closed]],
Cell[735829, 14118, 179, 3, 34, "Text",ExpressionUUID->"31e7fbc1-1a9f-4f5a-a504-179d8f9eee17"],
Cell[736011, 14123, 2550, 59, 237, "Input",ExpressionUUID->"d382bc82-4cad-4c66-a90c-bfa58af2e93c"],
Cell[738564, 14184, 283, 6, 34, "Text",ExpressionUUID->"c8a94d5c-9813-4ebc-9817-4018ed9ea1fe"],
Cell[738850, 14192, 1378, 37, 229, "Input",ExpressionUUID->"d53d64e3-868e-43ea-ab2f-fb7445c15fc1"]
}, Closed]],
Cell[CellGroupData[{
Cell[740265, 14234, 196, 3, 53, "Subsection",ExpressionUUID->"8fe9b8b3-a701-4d8c-822f-59b376a91499"],
Cell[740464, 14239, 219, 4, 34, "Text",ExpressionUUID->"5cf00eac-0356-416d-9d82-b490a9952b0c"],
Cell[740686, 14245, 4690, 97, 181, "Input",ExpressionUUID->"9c9635b1-30bb-47f3-b02c-ea82817e8f77"],
Cell[745379, 14344, 2420, 42, 48, "Input",ExpressionUUID->"15e0f2dc-63ab-45fc-bdd1-4c8bb9749750"],
Cell[747802, 14388, 162, 3, 34, "Text",ExpressionUUID->"a1e00924-da35-46f0-a143-88983b8746ec"],
Cell[747967, 14393, 2613, 42, 86, "Input",ExpressionUUID->"b72b31ec-4a04-4758-b7f4-84f455da5231"],
Cell[750583, 14437, 227, 4, 34, "Text",ExpressionUUID->"fbeafef8-64e7-4db9-a277-7e01b6fc30ec"],
Cell[750813, 14443, 3765, 77, 238, "Input",ExpressionUUID->"6f57b14f-bdf7-47eb-a687-5880945ada1f"],
Cell[754581, 14522, 568, 13, 34, "Text",ExpressionUUID->"035a123f-7c55-4b9d-b65f-c9524a0d9240"],
Cell[755152, 14537, 1098, 33, 48, "Input",ExpressionUUID->"6d5b3681-0e81-4615-aa32-acd48e154035"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[756299, 14576, 311, 5, 64, "Subchapter",ExpressionUUID->"ac02c5bd-dad2-4da5-b71b-0b05d9a6574a"],
Cell[756613, 14583, 438, 8, 34, "Text",ExpressionUUID->"966f69ac-1b9e-4376-921d-dbebfb6ef43b"],
Cell[CellGroupData[{
Cell[757076, 14595, 274, 6, 67, "Section",ExpressionUUID->"453ab833-07eb-4af8-bb03-eab48bada81a"],
Cell[757353, 14603, 216, 5, 34, "Text",ExpressionUUID->"24afd1b0-3859-4f75-9e71-42c96cc2b90c"],
Cell[757572, 14610, 744, 22, 48, "Input",ExpressionUUID->"9abe2a85-4bac-4261-91ac-d5f1cb4eaa03"],
Cell[758319, 14634, 1886, 44, 188, "Input",ExpressionUUID->"a3f40298-cf0d-45d7-b0b4-0bbc81f6f42c"],
Cell[760208, 14680, 4983, 121, 327, "Input",ExpressionUUID->"3d7e35bc-1169-4352-ab1f-777ce5a58f75"]
}, Closed]],
Cell[CellGroupData[{
Cell[765228, 14806, 278, 6, 67, "Section",ExpressionUUID->"cb8865a9-aab9-4d39-b9bc-815de9fa574b"],
Cell[765509, 14814, 214, 5, 34, "Text",ExpressionUUID->"acbb0663-c2f9-4b3d-a963-478a4b66b6d6"],
Cell[765726, 14821, 652, 20, 48, "Input",ExpressionUUID->"29b14dda-1c8b-4df1-8786-f26de4aacab7"],
Cell[766381, 14843, 1948, 46, 188, "Input",ExpressionUUID->"36335a6d-72a3-43c4-9176-ea2d6c40e294"],
Cell[768332, 14891, 4769, 119, 308, "Input",ExpressionUUID->"c2623847-7462-466a-ac02-443d58cede73"]
}, Closed]],
Cell[CellGroupData[{
Cell[773138, 15015, 314, 6, 67, "Section",ExpressionUUID->"ddd199cb-d0dc-40da-be77-beb4fce2701e"],
Cell[773455, 15023, 218, 5, 34, "Text",ExpressionUUID->"a89ffef7-bd33-426e-8670-566c71272bae"],
Cell[773676, 15030, 624, 18, 48, "Input",ExpressionUUID->"29035032-11b2-404f-91d8-206090e30a23"],
Cell[774303, 15050, 1981, 47, 214, "Input",ExpressionUUID->"4b372472-1255-48f9-acfd-22fecd015631"],
Cell[776287, 15099, 4815, 119, 308, "Input",ExpressionUUID->"dd36c4a4-1151-458b-95fe-219b1d3c134e"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[781151, 15224, 986, 14, 64, "Subchapter",ExpressionUUID->"52364643-b852-4af1-b42e-18bb8b65b74c"],
Cell[782140, 15240, 427, 8, 34, "Text",ExpressionUUID->"02a0e349-0f0c-408e-8b6c-2b6312edf2c4"],
Cell[782570, 15250, 219, 4, 34, "Text",ExpressionUUID->"6bd4cf73-e506-40db-96b4-100015b63f93"],
Cell[782792, 15256, 3710, 69, 162, "Input",ExpressionUUID->"ca14a7d6-fd8d-4ded-88aa-a5839bcf1b7c"],
Cell[786505, 15327, 2546, 44, 67, "Input",ExpressionUUID->"318af840-3d27-4cb9-915f-bef96eb09345"],
Cell[789054, 15373, 162, 3, 34, "Text",ExpressionUUID->"82cf4f75-58bc-47cc-bd86-8c8082dbc6ff"],
Cell[789219, 15378, 2460, 40, 67, "Input",ExpressionUUID->"7d26a029-00f1-4a0a-9386-f3f436328ba1"],
Cell[791682, 15420, 227, 4, 34, "Text",ExpressionUUID->"9044bdea-c65e-45ac-8845-2c249924d434"],
Cell[791912, 15426, 3812, 78, 238, "Input",ExpressionUUID->"41c80642-1e94-4620-a085-914c2b92000c"],
Cell[795727, 15506, 568, 13, 34, "Text",ExpressionUUID->"81a9dfe5-4332-4d5c-93b5-221d9aec7e4c"],
Cell[796298, 15521, 1075, 33, 48, "Input",ExpressionUUID->"642b1d2f-9a97-45ca-be36-8d2e80316afe"]
}, Closed]],
Cell[CellGroupData[{
Cell[797410, 15559, 654, 9, 64, "Subchapter",ExpressionUUID->"a7578c53-8cd2-4ac1-b58f-c5e01fc190b3"],
Cell[CellGroupData[{
Cell[798089, 15572, 177, 3, 67, "Section",ExpressionUUID->"8e1df223-6393-4f91-b145-bd9688e0f8e1"],
Cell[798269, 15577, 927, 15, 100, "Text",ExpressionUUID->"f678a257-ee89-4f48-b951-272ca333c7f9"],
Cell[799199, 15594, 3198, 79, 238, "Input",ExpressionUUID->"9076b107-7f71-4a7a-8439-ab6795b8a6f4"],
Cell[802400, 15675, 574, 12, 28, "Input",ExpressionUUID->"fc6dc0c4-e3ef-4314-8a6f-85a061caf09b"],
Cell[802977, 15689, 712, 15, 28, "Input",ExpressionUUID->"4f21fdd2-fd05-428a-9b0f-e3a39338b2eb"],
Cell[803692, 15706, 1661, 34, 48, "Input",ExpressionUUID->"7e4b7eba-c060-423e-a892-7a74615c061e"],
Cell[CellGroupData[{
Cell[805378, 15744, 4380, 100, 232, "Input",ExpressionUUID->"aacc051a-2e6e-4033-beb1-75cdbc1733d9"],
Cell[809761, 15846, 626, 11, 32, "Output",ExpressionUUID->"2371f8d0-84f3-422b-a8a3-eefa552c4549"]
}, Closed]],
Cell[810402, 15860, 207, 4, 28, "Input",ExpressionUUID->"f173b672-36f9-45d5-97fd-7901e0e6a5d6"]
}, Closed]],
Cell[CellGroupData[{
Cell[810646, 15869, 229, 4, 67, "Section",ExpressionUUID->"7b2a67de-6aba-4c5f-b1de-90820f54a828"],
Cell[810878, 15875, 534, 10, 56, "Text",ExpressionUUID->"b6f05890-a5ea-4c6e-9a68-6e1b40d17d4b"],
Cell[811415, 15887, 3224, 79, 219, "Input",ExpressionUUID->"fa7e8178-051c-4ca6-80e5-9aa453f4f454"],
Cell[814642, 15968, 574, 12, 28, "Input",ExpressionUUID->"68660dbb-9f72-40f7-8794-18ec799a6d53"],
Cell[815219, 15982, 177, 3, 28, "Input",ExpressionUUID->"144432ad-71c3-4dbd-ba89-75975280ba07"],
Cell[815399, 15987, 727, 15, 48, "Input",ExpressionUUID->"ed50d061-abc5-40dd-b892-639325f38373"],
Cell[816129, 16004, 1101, 20, 28, "Input",ExpressionUUID->"29654c29-9a09-4023-b603-f0e64428a619"],
Cell[CellGroupData[{
Cell[817255, 16028, 3413, 71, 98, "Input",ExpressionUUID->"c4240257-904f-46ae-b96d-05316ede0ef0"],
Cell[820671, 16101, 674, 12, 32, "Output",ExpressionUUID->"bd19cb78-dfb9-44ee-be17-b18ee44af406"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[821394, 16119, 224, 4, 67, "Section",ExpressionUUID->"78af92d8-537d-4e61-9752-f4819807b98b"],
Cell[821621, 16125, 547, 10, 56, "Text",ExpressionUUID->"5bc4c47e-a8c5-4921-a542-903f4d2de6e1"],
Cell[822171, 16137, 3280, 80, 219, "Input",ExpressionUUID->"5ec97ba4-b452-44d7-af06-4eddc607ddba"],
Cell[825454, 16219, 552, 12, 28, "Input",ExpressionUUID->"4d33cf68-6b78-48c4-ba2f-42f9c671895b"],
Cell[826009, 16233, 154, 3, 28, "Input",ExpressionUUID->"00ad8ee6-9f50-4242-b200-72958d5e0725"],
Cell[826166, 16238, 688, 14, 28, "Input",ExpressionUUID->"5a82d131-a499-4573-91c5-4f0da2b10860"],
Cell[826857, 16254, 1003, 19, 28, "Input",ExpressionUUID->"c86965a9-7b15-4d85-a513-ecfa7aa7d31c"],
Cell[CellGroupData[{
Cell[827885, 16277, 3291, 69, 98, "Input",ExpressionUUID->"11e5383a-f45c-4795-91dd-4e258b2a9d6c"],
Cell[831179, 16348, 603, 11, 32, "Output",ExpressionUUID->"158e8695-ba67-41b3-a315-57f4eaefa5b8"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[831831, 16365, 225, 4, 67, "Section",ExpressionUUID->"570ff4f1-c80d-4730-b4a5-a50192cf3c36"],
Cell[832059, 16371, 543, 10, 56, "Text",ExpressionUUID->"3e5e6db0-f242-4664-80af-4ef217b98e7a"],
Cell[832605, 16383, 3222, 79, 219, "Input",ExpressionUUID->"5415c6ea-e6a4-46ef-aab9-0da6d39d3b81"],
Cell[835830, 16464, 552, 12, 28, "Input",ExpressionUUID->"d27497bc-c1ff-41bc-afce-1341438f8386"],
Cell[836385, 16478, 154, 3, 28, "Input",ExpressionUUID->"2382ff15-d5db-4bf5-bd14-924383e66cad"],
Cell[836542, 16483, 681, 14, 28, "Input",ExpressionUUID->"63a374d3-6869-4a07-bfb0-a0dcf342cfad"],
Cell[837226, 16499, 1003, 19, 28, "Input",ExpressionUUID->"3a2f546f-2b71-4a30-a09d-9499f47994f7"],
Cell[CellGroupData[{
Cell[838254, 16522, 3393, 71, 99, "Input",ExpressionUUID->"d9a3f8d0-97cd-4925-a78c-13aa60c5437d"],
Cell[841650, 16595, 600, 10, 32, "Output",ExpressionUUID->"a47d4633-6386-49e7-b12c-de6b74f09584"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[842311, 16612, 461, 7, 64, "Subchapter",ExpressionUUID->"4ab39b69-3c77-4fe9-b8c7-0f3545949fbf"],
Cell[CellGroupData[{
Cell[842797, 16623, 243, 4, 67, "Section",ExpressionUUID->"8c24ac59-dc5b-4c84-8cda-39b464d8c99e"],
Cell[843043, 16629, 249, 6, 34, "Text",ExpressionUUID->"ca58e433-0188-4163-8a51-3800882059c4"],
Cell[CellGroupData[{
Cell[843317, 16639, 205, 3, 53, "Subsection",ExpressionUUID->"2f47b84a-814e-4cd8-a398-16262f481c76"],
Cell[843525, 16644, 10641, 177, 181, "Input",ExpressionUUID->"516eaabd-cebe-43b9-a15d-a6c0cadd2c1f"],
Cell[854169, 16823, 1162, 25, 67, "Input",ExpressionUUID->"3ef7de64-43f4-4493-8770-8c8d6b1a18ff"],
Cell[855334, 16850, 1415, 41, 79, "Input",ExpressionUUID->"765de0e2-98af-4402-b971-be483b7e5a14"],
Cell[856752, 16893, 177, 3, 28, "Input",ExpressionUUID->"2c60d74a-0761-4454-bfbe-7588ee883c2e"],
Cell[856932, 16898, 2907, 65, 171, "Input",ExpressionUUID->"38d9867d-d74a-4154-ad9b-6301d44112ad"],
Cell[859842, 16965, 546, 12, 28, "Input",ExpressionUUID->"5ed4c8f1-a9d2-4f0b-9bfb-a7d52aa78bd4"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[860437, 16983, 325, 5, 67, "Section",ExpressionUUID->"d4d2ad51-77e5-428d-b6a9-11d11392cdf4"],
Cell[860765, 16990, 292, 6, 34, "Text",ExpressionUUID->"288d8bd0-8063-49be-822f-e1bd1157b0c0"],
Cell[CellGroupData[{
Cell[861082, 17000, 255, 4, 53, "Subsection",ExpressionUUID->"9e6be806-33f4-4fc7-a145-7597807473f3"],
Cell[861340, 17006, 2193, 60, 181, "Input",ExpressionUUID->"dfb2968c-c855-4471-bfcf-32adce3a8e02"],
Cell[863536, 17068, 188, 3, 34, "Text",ExpressionUUID->"dd2e6552-c0a3-4ba4-b73d-c07aef07010e"],
Cell[863727, 17073, 855, 20, 48, "Input",ExpressionUUID->"5b033742-4db7-4eb6-85a0-c97905dd42f5"],
Cell[864585, 17095, 162, 3, 34, "Text",ExpressionUUID->"1b8b67c4-ffc0-4ba6-b93f-9019d79ca451"],
Cell[864750, 17100, 1411, 41, 79, "Input",ExpressionUUID->"eb797f86-8a45-4125-8863-34d340692719"],
Cell[866164, 17143, 179, 3, 34, "Text",ExpressionUUID->"ec08fff6-f4d2-4e62-a02b-5f183b0c035d"],
Cell[866346, 17148, 2550, 59, 237, "Input",ExpressionUUID->"791ece8f-8ec0-4c0e-ba38-f922ff9e775a"],
Cell[868899, 17209, 167, 3, 34, "Text",ExpressionUUID->"9b140c89-0753-4fd0-90bd-486855a24f10"],
Cell[869069, 17214, 1353, 36, 191, "Input",ExpressionUUID->"ef6f69b7-d5d3-413a-b3a6-7bdfac7e4002"]
}, Closed]],
Cell[CellGroupData[{
Cell[870459, 17255, 258, 4, 53, "Subsection",ExpressionUUID->"62a14571-4fb6-495b-a785-2163fb31617a"],
Cell[870720, 17261, 10617, 177, 181, "Input",ExpressionUUID->"68472c7f-1f8f-44b0-b523-5a07b13113cb"],
Cell[881340, 17440, 1222, 25, 67, "Input",ExpressionUUID->"20f85eeb-40c9-4bcf-8c2d-d2f97063abca"],
Cell[882565, 17467, 1410, 41, 79, "Input",ExpressionUUID->"6bb469e2-d1ce-4831-8d4e-6b653bdcdb1d"],
Cell[883978, 17510, 2858, 65, 171, "Input",ExpressionUUID->"b99fe2ac-db32-42c2-8e75-74d6625dd70d"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

